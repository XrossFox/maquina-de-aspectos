["luckily, django provides checks to avoid this kind of leakage before hitting production with", "this is a great concrete example why you should never run debug mode on a public server. django can only do so much for redacting private info. this is also a great example of how insecure pickle is!", "django is pretty serious about warning you of the risks of this [1]. i think in this case the key was in some third party options variable so the bug is there. the sentry thing sounds like an internal bug to facebook rather than a django issue.[1]", "if i remember correctly, django only shows these information if left in debug mode. needless to say, this should never be used in production.", "so, this was simply taking advantage of a crash-prone webapp running on a debug-enabled django instance using pickle session serialization, and more specifically this was only possible because _django didn't redact the stored secret key used to sign serialized inputs out of the crashdump information!_did the author tell django about this yet, or is this a (possibly unintentional) 0-day?besides the above interestingness, the morals of this story i get are- stay persistent and leave your scanners running; you never know what new things will turn up.- crashdumps _are_ interesting- yay, $5,000!- middleware and frameworks will always clash in useful and interesting ways?", "interesting django project. i was curious about comments regarding in comparison to taiga.arcamens is also a django project.", "coming from a django background and having a quick look, damn that is impressively nice.the nicest thing from django i've seen is but it seems more flashy than useful", "> for what it's worth, django models and doing good relational design solve a huge number of problems.i agree, but the main demand for something like this is going to be a client who wants to create their own forms on demand without touching model code.it is very much a hack-- the technical debt of it just gets kicked down the road for someone else to correct, the first of which is the unfortunate analyst who used to churn out weekly reports with a handful of sql statements but now has to run an entire etl pipeline/data science marathon to correct all the inconsistencies.", "my first instinct was to scream \"just use a cms\", but there are obvious advantages to this technique, so here are my thoughts to make it less hacky if someone ever intends to run that in production.- the most obvious one i don't see mentionned is that you should use a separate database than your main one for all the generated tables. pretty sure it would save on operational headaches.- it would probably be useful to generate all the python code that could be used for making migrations, if only for debugging purposes- understand early on which fields you want to use with which options. i wonder if foreignkeyfield would be possible. that would be a great feature, but probably bring headaches.- obviously, try to submit a pr to django for the migrations loader hack, maintaining monkey-patchs is troublesomeall in all, it's a pretty cool hack, but even with those modifications, i'd still be very wary to use that in production instead of battle-tested alternatives, unless you have a use-case that really warrants having full-blown sql schema for your dynamic data.edit: on second thought, i can think of a use case where using that in a cms would have saved me troubles (at least different tables for different models). when you have a production site receiving model a data (for example, your clients orders) and you want to edit model b data (for example, your site dynamic pages), you can't do that with eav all in a single table, but with using dynamic models, you could just copy the model b data, or even go with more complicated scripts.", "another way of describing this is:* django has facilities for mapping python classes to database tables* author uses metaprogramming to construct classes to match table definitions decided at runtime* author uses built-in schema migration tools to synchronize backendthere's nothing about this that wows me, although it does demonstrate knowledge of django internals and python metaprogramming. it doesn't impress me because this is the bread-and-butter of what django does.", "totally in sync with you. i used to work for zenefits, and if there's one technical reason i could point to for the company's failure to calculate accurate insurance rates (and eventually get a lot of support cases leading to lesser margins leading to an eventual failure in the insurance space), it was the blatant abuse of django models.", "there's this application i've been writing and re-writing my whole career: i call it \"some users design forms, other users fill out forms.\" it is hard to design the db as anything other than eav. (you can push more or less of it into json columns, but there are tradeoffs.)i have often wondered about pushing the customizability down a level though, like what the author does here, where each form creates a separate database table. it's too crazy for me, but it's tempting. and i have actually done it before where users' forms automatically generate individual tables in a separate flattened reporting database. it works really well for giving enterprise customers sql access to an olap view of their data, even if i wouldn't use it for my source-of-truth oltp structure. (some day i'm going to write a blog post about that.)even just for derived reporting tables, you quickly discover all kinds of limits in your database: reserved words, max columns per table, max columns per query, number of foreign keys pointing at a central table, etc. i haven't hit anything fatal though (with postgres).anyway, i'm excited to see that someone actually pulled this off, complete with django models and migrations, even if it's just for fun.", "it actually works pretty nicely. most of our apps are small and focused, and we nest apps within each other heavily.it's fairly common for example to see an app introduce some models, python apis to work with them, and business logic, and then to have a sub-app for the web api and bits relating to that, and a sub-app for the admin interfaces (we don't use the django admin).example:- orderscode_removed this means that working on our click and collect integration, one only needs to hold in their head the current app, and maybe some apis provided by the apps above it. it's relatively uncommon to import across apps on different branches of the tree, and when we do that's typically only to top-level apps containing the most core models, or for very explicit public apis provided to the whole site (which might be re-exported from an __init__.py up the tree anyway).i find it a pretty nice codebase to work on. we're hiring too", "how is it possible to have 380 django apps in a single codebase? that sounds insane. is that not absurdly complex to manage? i can't even imagine.", "i work on a large django codebase, and while this is a cool blog post, it's quite important once you reach a certain size that these things aren't actually done in practice.if you wanted to _fundamentally_ build your product around this concept that's fine, but django probably isn't the right framework, however no feature is worth the pain of this.for what it's worth, django models and doing good relational design solve a huge number of problems. we've got ~380 django apps and ~350 models and haven't yet needed dynamic models.", "you are right, i had only quickly skimmed the article on my phone earlier. its kind of similar, but moving it from the sql layer to the django layer in my opinion, but it does actually create database tables. the models are dynamic and in memory, (rather than in a file) which is at least as bad an idea as eav in my opinion. but cool as a blog post.", "> sometimes you want to gives the customer the ability to customize the app however they want and sometimes this is needed in order to do that.what's wrong with using a jsonfield with a different cerberus validator for each client, and then using a django form (and possibly some custom admin template code) to make it possible for the client to perform crud operations in the admin?i personally would still just build a react front end and do the crud operations via rest endpoints, but if you really want to use the django admin then that's a much better way to do it than monkey patching the migrations system.", "it's not really realistic to bring this into a large, pre-existing application (rest api) from our experience - which is admittedly limited.re-building the app around django cms would be the way to go - but being able to do this from scratch in an existing application is pretty nice.", "a real-world answer to the problem presented here seems to be django cms:", "well, the original article doesn't actually mention foreignkeys that's why i written may (it only has textfield and integerfield). of course nothing stops you from extending them; you'll need to of course add the model where you'll want to create an fk to.so the makefield model will have an optional field to denote the class to which you want to create the fk; probably an fk to contenttype would suffice for this field ( know i've written field and fk too many times, i hope it makes sense; if it doesn't tell me and i'll provide a more thorough example.", "no it's not eav. eav is an sql (anti) pattern where you have a table with varchar fields such as name, type and value. so you'll have tuples like (id, int, 99), (name, string, sera) or (enable, boolean, true). this makes it very difficult to do aggregates and you can't do any consistency checks from the db.what the article proposes is much better than this: a way to create models (ie tables in the database) dynamically. to make it more clear if you are not familiar with django, it'd be the same as if the create table sql was generated dynamically depending on the user selections.so in this case each model will be in its own table and the fields will have proper types. you may even be able to have referential consistency using a foreignkey field!", "it's suspiciously like you're asking me to shamelessly self promote", "i'd written a blog post describing more or less this 5 years ago:", "it is essentially eav isn't it? well integrated into django so it works with the admin and migrations.", "the last section on operational flexibility and the inability to change the event history raises a very good point.like most of the issues, the solution requires experience to know when you are at the goldilocks point (just right). this specific issue has a lot in common with managing database migrations in django or any other migration system.the ideal situation is to create migrations that can always be rolled back, but sometimes this is not possible to do operationally. for example, a schema change that restricts a field from nvarchar to integer can only be generically rolled back if all of the unconvertable data is persisted. this can be mitigated by structuring the database to avoid these dead-ends, and that really is only gained by hard-won experience.the problem with undoing operations via new events is the same thing -- unless you have foreknowledge of this kind of problem, it is very easy to accidentally create events that perform un-undoable actions. a very simple example of a problematic event would be something that modifies a foreign-key relationship -- let's say it's a digital asset in a game and you want the ability to transfer ownership of the item from one player to another.the simple solution is a event like setassetowner(asset_pk, player_pk). this would set the item's player foreign key field to the player's primary key. easy. however, you have lost knowledge of where the asset came from and cannot undo this operation. a better solution would be to make an event swapassetowner(asset_pk, owner_pk, recipient_pk). yes, the owner_pk is technically redundant, but it provides a check against someone trying to steal an item with a maliciously crafted setassetowner event that performs no checking. even better, this operation can be reverted by sending the same event with the owner and recipient arguments reversed. since these properties are part of the event message, they will be persisted in the event history and all of the information to undo the event is self-contained.", "unfortunately, most enterprise applications will have something like this, because they'll need to be customisable for individual companies. i've worked with a ca product years ago that had written their own sql engine for doing exactly that. i would have much preferred the django solution.", "to me it looks like a walkthrough how to set it up, rather than a guide.if i googled \"dynamic django models\", _this_ is what i would like to see.", "an alternative to this is to use a form. you can have a model that produces the form configuration (relations for each field in the form for example) and produce this form on request.then, when the form is saved, take the resulting dictionary and save it to a jsonfield in a 'result' model. if you want to re-display the form with the results, just create the form from the configuration model and add the data from the result model.i've had great results with this technique, and you can model any field except a foreign key. django forms provides the validation, and the backing storage is dynamic so you can change fields easily. it seems less fragile than creating models like this article proposes.", "this is extremely clever! something like this needs a deep understanding of django and python internals. the bullet points are written like they put it together under 10 minutes or so:d i love it!", "please take a look at in our team we have been using it for 3 years. it works great and serve as a very good example of a beautiful written, well tested angularjs single page app with python django powering the backend api. also look at event notification part and good quality responsive app, works great even on mobile phones. you can find a respiratory of designs where you can even see the svg source of design files for ui. only small subset of open source project have such level of work available publicly.", "i've made some contributions to django over the years. some code, a decent amount of documentation, and i like to think i've been useful in bureaucratic roles (i was the release manager for a while, i sit on the security team and technical board, i serve on the board of its sponsoring nonprofit, etc.). along the way, i've picked up pretty extensive knowledge of django, inside and out. and i've certainly made money as a result of that!but i can't imagine sitting down one day thinking \"you know, nobody else should be allowed to do what i did\". it's a big world with a lot of potential clients and employers out there. there's room for anyone who wants to get good with django to put that knowledge to use to make a living, and i don't see any justification for trying to stop them.if this were the standard sort of \"we trademarked the name, and you can't use it as the name of your product\" that a lot of larger open-source projects do (including django, fwiw), i'd be more sympathetic. but trying to forbid people offering consulting or hosted \"i set it it up for you\" type services? that's a massive grab of other people's knowledge and labor, and i can't support it even a little tiny bit.", "ditto, especially in combination with python/django, as used by nextdoor. ironically, they had already removed celery from their stack a few years prior.", "hiring is a difficult task that i'm currently in the middle of attempting, so harj's article is something i recognize. i'm not after a first dev, but i am part of a team that is after a dozen or so devs and i've now been day 1 on three different ventures.the problem is that the main piece of advice is correct but unuseful. indeed, you should look at people you've worked with. in some sense they've all interviewed with you already, so you know what it's like to work with them, you know how good they are at communicating, and you know their limitations.unfortunately, most people haven't worked with enough people to have more than one or two likely candidates for whatever they're thinking of doing. your homies are either not right for the role, unwilling to move from a position of comfort, or not willing to put your friendship on the line.the same is also the reason why your company cannot grow via connections of employees past some point, the r < 1 on that series and it will converge on some low number.where my problem is a bit different to the article is that before you have any devs, you have a really big problem identifying good devs. heck even hiring for devs outside your specialty is hard. if you can't do x, how are you going to find a good x? you will end up falling back on recommendations and reputation, and you'll pay up for a branded individual if one is around. not in itself terrible, but every penny counts early in a startup.i was talking to a shop who were after their first programmer a few months back, and they did the sensible sounding thing of bringing in a trusted friend from a faang to interview people. main issue with that is that person is thinking about how a megacorp hires people. mainly avoid guys who can't reverse a linked list, and stick the new guys into a process that already exists. but it's not quite the same things you care about as a day 1 startup.day 1 guys need energy. sad to say it, but this probably tilts against people who have kids. in my first day 1 jobs, i didn't have kids, i could wake up at 6 and code to 11 at night. or you do like my current firm, where i was also day 1, but let people work from home. then you suddenly have a very big carrot for experienced hires. the guys in the previous paragraph did the same.day 1 guys also need a high degree of autonomy. when you've got nothing, as in not even a chat about what stack you're using, day 1 guy needs to put down those foundations. this is a lot harder than you think. not only do you need to consider budget, you need to think about what a small team can do, you need to think about what imaginary future employees will want to work with, and you need a way to get from little team to big team where your hands aren't tied by your day 1 decisions. and you gotta balance current technical debt against future payments on that account.you also need to be broadly read. you can be highly specialized, but you need to have some idea of what's going on in the software world in general. chances are you will end up picking the most standard choice of everything that isn't your specialty, like django for a web framework or scikit for a bit of ml. but you need to have an idea about a huge variety of things to know what the landscape roughly looks like.so how do you find a person like that? well actually none of the methods other than \"network\" will actually check for these qualities. most people are specialists with a label that enables them to move to other jobs with similar titles (low latency c++ dev), and recruiters are on the lookout for the label. inbound and outreach are also not going to tell you how broad someone is, because everyone writes stuff on their cv to look specialised, with a bit of breadth to catch a few interviews. meetups, maybe, depends on how good you are at directing the conversation. a skill in itself.", "1. as others have covered, you need a market. find something that interests you, or you won't stick with it. for me, i manage an events guide for local bands and pubs to compile their free-to-the-public gig listings. it's taken various forms over the last 15 years or so, from mambo to joomla to wordpress to a facebook page, and i'm finally getting around to rewriting it as a standalone product using django, and it's only as part of this iteration that i'm monetising it is starting to look like a potential option.2. you may also need an audience. you need people to use your product, and that might mean you need some kind of free tier to lure them in. in my case, an events guide which doesn't list all the events people want to see is useless to my audience, and if the audience don't use it it's useless to my potential clients. that means i have to provide the basic service for free - any monetised features are worthless without it.3. for any skills you're lacking, learn them. if you outsource your front end work, you've got to pay somebody every time you want to change it and you can't reuse it anywhere. once you know what you want to do, learn how to do it by actually doing it.you're absolutely right that any money earned from your own pet project will be far more satisfying than your day job, but that's because it's that much harder to earn. if you start down the road with the specific intention of earning, that road will be paved with frustration. get an idea, develop it into a prototype, get some feedback, and then you can start looking at outsourcing some of the more polished parts that are still outside your capabilities.", "highly recommend #django on irc. wonderful community that would be willing to help you as long as you post code and full traceback:)", "nice to hear from you. i started learning django 2-3 months before and so far my journey is going well. i would love to help you on your learning journey. dm me on twitter @sidshringi", "buddy this is the first time i'm reading a post on django in hn since i've landed here. i've started learning django for some months and got stuck on creating and running my own project. stackoverflow and quora couldn't help...great of you to share this here. can i dm you for a mentorship's request on my learning journey?", "i wouldn't know without using it. that's where \"software using this library\" is a really useful bit of social proof. think of django; even without looking at the code you have a lot of evidence that it can conveniently solve a wide range of real problems.", "based on your previous comments you seem to be pro china and seem to carry long list of bad things about us, which is fine. but you will find very little support for any country which doesn't tolerate free speech. it's surprising that you don't want to see world news on hn, but your hn comments about us human rights issues are straight straight out of mainstream liberal news network.", "dreamhost is pretty close to self-hosting. i can ssh in. i can download all of the files in my wordpress installation, copy them elsewhere, dump my mysql db, copy that elsewhere and have it running on another machine. the only way it differs from a vm is that i don't have root.dreamhost actually does, iirc, allow me to get the same experience with a vm.really, i'd argue that anyone offering wordpress in such a way that you can easily download all of your data and put it somewhere else is fine on the self hosting axis.and lots of people do pay for hosting, but there are millions more who won't pay even $1/month.", "my dreamhost shared hosting wordpress is pretty turnkey. it's not the most user-friendly ui, but it really is as simple as \"register domain\" on one page, \"install wordpress\" on another, and then setup my admin account. after that, they keep the software up to date and email me to let me know when i need to click the link to upgrade the database (very infrequent).i'd imagine there are hosts that are more turnkey than that (wordpress.com, likely).i wonder if it's really the case that people just don't want to pay.", "i guess as linux got more popular, more people who didn't really know what they were doing joined in, usually on ubuntu. the quality of answers dropped as a result.i think a higher bar to entry often keeps things better quality (coming from the dev world i am thinking about django deployment versus php deployment). arch was too much of a pain for me to install last time i checked, and its going to be way too much effort for anyone relatively new to linux.", "this is a bit old (2013), but may be of interest for you: luck!edit: also, modern and maintained:", "thanks!looks like django-messages might be what i need (although they don't say if they support attachments).", "i've seen it plenty, e.g. django: \"this method is grossly inefficient and probably insecure, so it is unsuitable for production.\"", "i'm a freelancer. literally every job i've gotten has come from \"luck\". the trick has been increasing my \"luck surface area\" by putting myself out there.how i got each of my current clients:person in my college class gets a job and two years later contacts the computer science department at my college and asks if they \"know any freelancers.\" i had made it known to my professors that i was going into freelancing and they connected us. client for 3+ years.joined a coworking space and chatted with a guy. mentioned i do freelance work. built rapport. 3 weeks later i'm siting in the coworking space and he comes up to me and says \"i am getting a full time job and can't keep this client. do you want them?\" client for 3+ years.i was a teacher's assistant at a college class about software engineering. made friends with a student. 3 years later his friend was graduating and interested in freelance. the first student connected us. i offered to meet for coffee with the younger student, told him everything i know about freelancing. 3 months later he contacts me and says \"i decided not to freelance, but this client wants a site, do you want them?\" primary client for the first half of 2018.i discovered a podcast i enjoyed by a thought leader in the consulting space about how to find a niche. i sent him an email saying \"hey i liked your podcast. my niche is django development.\" later another person who does django work contacts this thought leader, he shows this person my website. this person joins my mailing list. i see that person has joined and so sent him an email saying hello what up. we connect over the fact that we both do django. 3 months later he says \"my primary client needs more help with a django site.\" this is how i got my current primary client.this doesn't really work as a short term strategy but the quality of clients compared to say upwork is night and day. provide value, make connections, get lucky.", "> didn't you just basically say that what is \"awful\" is subjective? you're basically saying \"maybe echo chambers are better\".yes, i did. instead of retweeting, you let the awfulness die out instead of getting more attention, i.e., don't let opinions escalate. awfulness here doesn't have to be what i consider to be awful. and i don't see what this has to do with \"maybe echo chambers are better\".now, i don't know whether that would be more efficient or not - it could, right?. neither of us know, so perhaps the mastodon experiment may teach us something.", "i promise you. if you ignore the churn and learn the fundamentals, your skills will have an order of magnitude longer shelf life.if you know js and web standards then anything on the frontend is just a new application of the same ideas. if you know a bit of networking and a bit of operating systems then web development in python/django/scala are all just interesting new ways to say basically the same thing.if you know the specs then you don't need to find out about technology by following 100 different blogs.occasionally there will be new fundamentals to learn but you'll be ready because you won't have a backlog of relearning framework x's new way of saying \"hello, world\".", "this is why i use django:)not one option, but at least 14:", "i got fairly proficient in ror some years ago. in that i understood most of the magic and was thinking on what is the best ways to design the program for readability / maintainability.then i got good at java + springthen i got good at react + reduxnow i gotta get good at python + django and the damn magic it does.next i gotta get good at scala.it is frustrating. and i feel that had i spent 10 years in any of those i could really make amazing things in each one. but instead i feel like a generalist. jack of all trades.and that's just the last 5 years. before that was dozens of java frameworks, knowing differences between 4 different databases and wielding sql like a master, and more.the worst parts are:- front-end engineers are looked down upon while i love coding in react + redux + es6js. wish it was typescript.- react changes damn near daily.- i really want to deeeeeeep dive in a tech but i feel lots of fomo that if i don't study a hot new tech i'm screwed. (except vue. vue is the same paradigm as backbone / ember)- i have a kid, time is limited to learn new languages.", "there are some use cases in web programming. for example, if a request handler (view, in django's terminology) is in turn calling out some external endpoints, you don't want those external requests to block other requests to your api. for things like those, async is actually quite nice.", "i had a similar experience. it made me understand how front-end javascript frameworks actually work (in general). the no-fluff approach taken by the framework meant that code was clear and descriptive docs helped (reminds me of django's docs sometimes). i wish there were more tutorials though.", "", "i think the 5% sale is more like pre-selling their oil, they will do it at it's highest value. they probably have 50/100 year plan to slowly sell rest of the 95% and move all that risk out of their country.at the end it will be investors in the rest of the world holding the bag instead of saudi people. saudis will buy stake in tesla/fb and emerging technologies with all that aramco $$.", "\"if you have anyone who can do a better job, please let me know. they can have the job. is there someone who can do the job better? they can have the reins right now\"being a leader he has to split his job and find competent people who specialize in that field to do that job. em seems to have problem trusting or delegating parts of job that he currently does.i don't follow his twitter that much, does he ever praise his vp's and let them have limelight with his massive followers?, all the major twitter news seems to be about \"him\" doing something. i know it's his personal twitter, but he uses it to represent tesla.", "one thing which would help would be corporate support. the django project itself gets some support, probably not enough, but many people forget how much of the value from django comes from the apps rather than the core framework.", "i've had this experience with a bunch of popular django-related projects recently, where they stop receiving regular pr review and releases. keeping up with django's release cycle then requires digging into the bug trackers and forks for common dependencies. it's totally understandable for that to happen, when even popular projects rely on the volunteer effort of one or two people.one model i'm curious about is \"a collaborative community to share the responsibility of maintaining python-based projects.\" not sure how well that works in practice, but it would be great for something like that to crack the maintainer-burnout problem.", "could i have a link to your django add-on?", "there are libraries for doing this, but it's ultimately up to each site/service to implement.i maintain an add-on for django that does this, for example, but i can't force people to go and use it, though i also maintain one of the more popular user-registration apps and i probably will find a way to enable it by default in there.", "tried the django tutorial and loved the framework.", "reminds me of a \"china\" grade replica based on django, from the commit message it's done alone by some not talented dude, cost far less than 6 months.", "what the quoted paragraph doesn't show is the hiring process, \"servant leaders\" will only work if you hired the right candidates and provided initial guidance on expectations. right candidates for the job at hand is _the_ hardest part.my current workplace hired junior level developers who came through with very limited coding skill and but talked their way into permanent positions. they quickly hired consultants to \"help\" them with projects, and settled to become requirement gatherers and use the consultants to code all their stuff.my point is, if you were to walk in as new manager in your group, kicking butt and firing people, and not be a servant leader, might work better.", "i just graduated this past december. while most of my college buddies were spending their time sleeping or 'enjoying school', i was asking myself the same question you are right now.i concluded that if i wanted to be one step ahead of other college students, i had to be somehow proficient in a popular programming language. to execute that i did two things during my free time: i chose to develop small projects in python and django. and, also looked for internships to gain some real life experience because i knew college wouldn't prepare me very well. thinking that way opened several doors for me after school (i graduated with several job offers).also, college time is a crucial period of your life that will structure and define most of your thinking process. so make sure you spend time working on that as well. what do i mean by that? make sure you are spending time working on your becoming a better version of yourself not only career wise but also personal. spend time exploring yourself finding out what you like and what you want as a person. i hope it helps, you are in a great path already.", "is em beyond his prime now?, he seems to be in the news for wrong reasons. drug abuse could be the simplest reason for all this odd behavior(\"pedo\", \"420\", and doubling down on those tweets), showing up at defcon while shit is hitting fan at tesla.", "openstax cms[0] is built with wagtail[1] (django based cms framework). this is a good example (live) project to sink my teeth into and learn more about wagtail. incidentally does anyone know of any good resources (books, tutorials) to go from beginner to advanced wagtail developer?code_removed", "we have a lot of django-based code similar tocode_removed would this turn into:code_removed?does is look shorter? - yes!. is it more readable? arguably yes. would i vote to see this feature in python? hell no! in most of cases, we can have an in-house \"maybe()\" function, likecode_removed there is no need to update the language syntax for that.from pep description:code_removed seriously? to me the \"if hi is none\" looks times more readable and easily comprehensible than \"hi??= len(a)\".finally, the zen of pythoncode_removed this case does not look neither special enough nor so much practical to me. could anyone please give a hint of where can one vote against this pep?", "i use python because i get things done quickly and relatively easily and i hardly ever use third party packages. i avoid subsystems, e.g. django, for many of the reasons pointed out in the article. in my experience, similar problems exist when using nodejs/npm.on that note, i think that the problem is that many packages out there have been hacked together rather than designed. the low threshold for becoming a python programmer means that the average quality gets reduced. which is a shame, because there are many exceptional packages out there, but they become statistical outliers amongst the mass of dross.", "this is certainly one \"drawback\", depending on your perspective, and certainly a cost more of an orm and how they tend to work than a runtime environment. you'd have a similar issue, for example, in go if you want to lazy load a property (however there you can't await a goroutine).long story short, this drawback tends to be primarily based on experience of the overall system. coming from traditional rails/django/etc will make these constructs seem awkward.", "for python there's marshmallow ( and django rest framework if you're using django ( both of these work as you described.", "fwiw pypy used to share this behaviour. it was clearly a bug, as it doesn't follow cpython convention.it's around since 2013 and was found in a unit test coverage improvement effort in feb. 2018.given that pypy is mostly used for hard-core math and scientific computations, how the hell this bug wasn't found earlier by a user?my bet is that zerodivisionerrors are very rare. do you even remember a zerodivisionerror in production code? i don't.1/0 is my dirty little trick to add a breakpoint when i'm too lazy to launch a debuger. why does this work? here again, because nobody never catch zerodivisionerrors, because they don't happen.so, what a fuss for such a tiny convention. granted, it breaks the math correctness, as do \u00b1infinity. cpu integer math is broken anyway. in what world does 2^31 - 1 + 1 == -2^31?i took a fairly large, used and old repository, django and i search for zerodivisionerror: what:- 4 occurrences in the tests- 3 occurences in the issues- last, but not least 1 occurrence in the code:code_removed", "the bug for the problem james found with the configuration of normandy ( mozilla's system for distributing shield studies, is now public at were bitten because django's allowed_hosts was set to accept anything and django's use_x_forwarded_host setting was true.", "definitely! you'll find retool supports much more than sql databases and django admin supports a tiny subset of retool use cases. for instance, most companies find that after a certain scale django admin apps need to be converted to custom code. retool is designed makes custom code unnecessary at any scale.", "wierd. maybe it's just me, but i felt that way for the first 2 days.i have made some really dynamic stuff (like 100 domains running off a single server with each of their data separate, and to add a new domain is a click away). i can't imagine doing that with other frameworks> get_attrwhat the fuck is that?also, you might be interested in webpy \u201cdjango lets you write web apps in django. turbogears lets you write web apps in turbogears. web.py lets you write web apps in python.\u201d \u2014 adam atlas", "> if we narrow the problemcold fusion shipped with a wizard to build web crud apps against sql databases, which worked, and you could then continue coding from. it wasn\u2019t bad, and came long before rails or django admin.this feels like democratizing that.", "there was freedom i feel ruby had that python didn't which allowed ruby to successfully go from 1.8 to 1.9;* ruby had better dependency management. python's only recently introduced pipenv which provides a standard approach for managing development and prod dependencies. virtualenv's been around for a while but didn't handle scope.* ruby wasn't used as extensively as python in stuff like system libs and start-up scripts so system packages weren't constrained in the same way.* ruby's ecosystem was more focused around web development. rails in particular was fairly early in adopting new versions of ruby within about 1 year of the release of ruby 1.9. django on the other hand was about 5 years before it had it's first python 3 compatible release.* \"microbenchmarks\" generally got better with ruby releases whereas python 3 seemed to have gotten worse from what i remember. i don't think microbenchmarks are terribly useful out of the context of an actual application but many people use them as indicators.* subjectively i think the ruby community was more committed to unit testing which made \"fearless upgrades\" a little more palatable.", "umm, i know plenty of people in the baltimore area who are pulling in that kind of money for rails and django apps.", "good to know. i haven't used flask recently, i have used express.js which is node.js's version of flask, and i really like how simple it is. most apps these days seem to have a rest (or graphql) backend and dynamic (often react.js) frontend. flask (and flask-restful) would probably be a better fit for this type of app than django.", "flask is great for smaller things where django is far too verbose. like single file webservers for basic stuff.its also for more complex stuff but then you have to grab additional libraries to do stuff like db management, migrations, serialization, etc.flask also has some, in my opinion, rather uncomfortablly unintuitive global scope stuff. where responses aren't passed into the view function, they're available on the imported flask object.", "django's dry suuuuuuuucks when you're getting started. it's basically all this magic that you can't understand without already knowing django.why does get_attr get called? oh because it begins with the word \"get\" and there's an attribute that defines a method field called \"attr\".i use django a lot and generally it's great. but i hate that you can't follow your code paths from start to finish on the surface. you have to know about how it works underneath. meaning you can't just be a python + web server expert. you have to also be a django expert. so i get non-django experts reviewing code and they have no clue why things work or break.just an opinion. not saying this is objectively wrong.", "can you explain what you mean about django?", "it is when you get to this part of python, that you achieve true nirvana.it's absolutely bonkers the extent to which you can be dynamic in this language.it's the very reason why django is so dry.", "hello, i'm a long time lurker at hn, and for obvious reasons cannot use my other handle. my partner and i built this in three weeks as a challenge to ourselves. it is is a form submission application with some cool capabilities like protected digital content downloads, custom webhooks, and a nice dashboard. one can point their contact/surveys/feedback forms to our endpoint and get nice visualizations, and integrations. we are both backend developers and the most challenging part for us was to learn and use vue/vuex and build a modern saas application. we are proud of what we've achieved in three weeks! hosted on aws, uses django + postgresqlwe would love to hear the community's critique. thanks!", "yes, django and django 2.0 (which only supports python 3) should work.", "does this means, django can be supported natively?", "django / zappawhich is basically aws lambda / gateway with minimal setup and extremely cheap.", "ah good, i was hoping for the \"hurdy hur hur ruby is slow so rails is slow crowd to show\"ruby \"going out of vogue\" has nothing to do with the authors problem. it wouldn't matter if the author was using trendynewframework.js\u2122, php, django or some go framework. the issue seems to be the terrible user experience that comes with using amp. i know i personally hate it and tend to drop off when i see it begin loading.also fwiw, there's plenty of slow spa's built on the latest and greatest, and there's plenty of fast rails sites (have you been to recently? it's like \ufe0f). rails is doing just fine.", "article says \"yes!\"> this new runtime allows you to take advantage of python's vibrant ecosystem of open-source libraries and frameworks. while the python 2 runtime only allowed the use of specific versions of whitelisted libraries, python 3 supports arbitrary third-party libraries, including those that rely on c code and native extensions. just add django 2.0, numpy, scikit-learn or your library of choice to a requirements.txt file. app engine will install these libraries in the cloud when you deploy your app.", "i think the answer to this right now is either: - dynamodb - aurora in my case i am going to go with aurora as i am deploying django applications with lambda", "remote: yes, onlywilling to relocate: notechnologies: python, django, django rest framework, tornado, elasticsearch, mongodb, redis, celery, rabbitmq, consul, selenium, scrappy/grab/beatifulsoup, vagrant, dockerr\u00e9sum\u00e9/cv: fedotkin.dmitry@gmail.comi am python developer with 7 years of experience. i developed all kinds of projects with it, from small sites to complex distributed services. i worked on a highload bigdata project, worked as a team lead, developed an app which is used by google, intel and nflpa and know how to deliver best quality product.you can also find some feedback from people i worked with there", "sounds a lot like me a year ago.for the past eight years i've been mostly working as a.net developer, with my last two roles being senior roles with some form of leadership. if i stuck with my last job i would've probably been in a leadership role at a large agency, but i wanted a change.i, too, would read hn most days, and would feel a hint of \"imposter syndrome\". it was great enough that i decided to teach myself python and django. working in another language when my life was strong-typed compiled languages felt odd, so instead of fighting the urge i decided to work somewhere that would hire me as something other than a c# dev.so, i joined a software house that does a bit of everything. since joining i've worked on a mixture of ruby, java, python, and node projects in the last six months, and there's opportunities to pick up pretty much anything that i feel i can roll with for a project.it's been tricky going from being experienced in one language to being a newbie in another. when things work the way you expect, new languages are fairly easy to pick up, but the pain points or differences will bring you back to the days when you were struggling with c#.i think imposter syndrome is more common in.net developers than other groups, mainly because the community is so secluded from others due to its heavy use of windows and its own tool set. also, there's the stigma of it being a big-business language, even though many.net devs will go their entire careers without working in an enterprise setting. from my experience, a.net developer is no less a developer than those in other languages, but i will say that it's very easy to be comfortable in a single stack. giving something else a try will reduce that comfort, and you might learn a few things that help in both stacks.so, in terms of missing it, it depends on what you feel like you're missing?", "i don't know where you're getting your information about python from. it's popularity has skyrocketed in recent years. search indeed's api for title:python and location:london. 412 python jobs compared with 278 for node.js. what's also interesting is that there are currently 35% more django jobs than rails in london whilst at angel.co they're about even.", "python is a great first language for the use cases you mentioned! we have great popular frameworks for web apps such as django and flask; and data analysis tools and frameworks like pandas, numpy, and airflow, amongst many others.", "\"...which would effectively let the electric-auto maker pay off that obligation in stock instead of cash.\"how does paying off the obligation with stock work?, whose shares would tesla assign the bond holder?, if it assigns shares after market closes and when market opens if it's below $360, won't the bond holders sue?", "seeking freelancer | boulder, co | remoteat uplift, we\u2019re on a mission to perfect our working lives all while learning, building, and enjoying our free time.we're looking for software engineers who want to create their own career path on their own terms. engineers who value the flexibility to work on several different projects along with the opportunity to keep learning.if you're a good communicator. if you're self-sufficient. if you're passionate about the work you do and have been looking for a new, exciting opportunity to grow, come work with us!technologiesyou are at least mid-level to senior in one or both of these:* react, react native* python (3+) / django (2+)bonuses:* freelance/project experience* familiar w/ graphql* familiar w/ heroku* familiar w/ aws* native ios or android experience* understanding of databases, sqlfor more info visit by email: work@uplift.agency", "hey there! love coding? secure code warrior is looking for fierce developers that can write clean and good code in scala play, c++, python django, ruby on rails, angular, angular js, swift, react, go, kotlin, for a new remote project we are just starting. the position is to create small applications for our training platform. we are in need of developers with at least 2 years of experience and a good level of english. are you interested? send your resume to: earevalo@securecodewarrior.com to evelyn ar\u00e9valo. (www.securecodewarrior.com)", "can this be used to transcribe voice data in real time?i am building a docker image which will eventually accept in-browser audio via websockets outputting transcription in real time without needing google webspeech. planned to use deepspeech but this looks promising given it's low resources.", "i guess i'll ask the elephant-in-the-room question again: why should i use it over django? what does it do better (for your opinion of better)?", "sandbox banking (yc w17) | software engineer | boston, ma | full-time | onsite | provides a universal adapter for banks. it helps institutions quickly and securely integrate new software from vendors and fintech startups. we're growing quickly, backed by y combinator, and possess enviable runway.our team is looking for a software engineer to help expand our core platform and ensure the success of new client deployments. applicants should want the opportunity to play a critical role in building an early stage product, enjoy working directly with customers, and be excited about financial technology.our stack is comprised of python, django, postgres, an assortment of aws services, and vue.js.please see to learn more.", "seeking work | lithuania, eu | remotei'm an expert python/django and javascript developer with 12 years of experience. i have a strong systems administration background.my github profile is and my blog is an experienced developer with* 12+ years in python* 12+ years in javascript* 12+ years in sql* 12+ years in linux server administration* 10 years in django* 6 years in django rest framework* 4 years in mongodb* 3 years in swift* 3 years in angularjsemail: michael.samoylov@gmail.com", "there are backdoor for smtp credentials in django projects:", "does this means, django can be supported natively?", "django / zappawhich is basically aws lambda / gateway with minimal setup and extremely cheap.", "ah good, i was hoping for the \"hurdy hur hur ruby is slow so rails is slow crowd to show\"ruby \"going out of vogue\" has nothing to do with the authors problem. it wouldn't matter if the author was using trendynewframework.js\u2122, php, django or some go framework. the issue seems to be the terrible user experience that comes with using amp. i know i personally hate it and tend to drop off when i see it begin loading.also fwiw, there's plenty of slow spa's built on the latest and greatest, and there's plenty of fast rails sites (have you been to recently? it's like \ufe0f). rails is doing just fine.", "article says \"yes!\"> this new runtime allows you to take advantage of python's vibrant ecosystem of open-source libraries and frameworks. while the python 2 runtime only allowed the use of specific versions of whitelisted libraries, python 3 supports arbitrary third-party libraries, including those that rely on c code and native extensions. just add django 2.0, numpy, scikit-learn or your library of choice to a requirements.txt file. app engine will install these libraries in the cloud when you deploy your app.", "i think the answer to this right now is either: - dynamodb - aurora in my case i am going to go with aurora as i am deploying django applications with lambda", "remote: yes, onlywilling to relocate: notechnologies: python, django, django rest framework, tornado, elasticsearch, mongodb, redis, celery, rabbitmq, consul, selenium, scrappy/grab/beatifulsoup, vagrant, dockerr\u00e9sum\u00e9/cv: fedotkin.dmitry@gmail.comi am python developer with 7 years of experience. i developed all kinds of projects with it, from small sites to complex distributed services. i worked on a highload bigdata project, worked as a team lead, developed an app which is used by google, intel and nflpa and know how to deliver best quality product.you can also find some feedback from people i worked with there", "sounds a lot like me a year ago.for the past eight years i've been mostly working as a.net developer, with my last two roles being senior roles with some form of leadership. if i stuck with my last job i would've probably been in a leadership role at a large agency, but i wanted a change.i, too, would read hn most days, and would feel a hint of \"imposter syndrome\". it was great enough that i decided to teach myself python and django. working in another language when my life was strong-typed compiled languages felt odd, so instead of fighting the urge i decided to work somewhere that would hire me as something other than a c# dev.so, i joined a software house that does a bit of everything. since joining i've worked on a mixture of ruby, java, python, and node projects in the last six months, and there's opportunities to pick up pretty much anything that i feel i can roll with for a project.it's been tricky going from being experienced in one language to being a newbie in another. when things work the way you expect, new languages are fairly easy to pick up, but the pain points or differences will bring you back to the days when you were struggling with c#.i think imposter syndrome is more common in.net developers than other groups, mainly because the community is so secluded from others due to its heavy use of windows and its own tool set. also, there's the stigma of it being a big-business language, even though many.net devs will go their entire careers without working in an enterprise setting. from my experience, a.net developer is no less a developer than those in other languages, but i will say that it's very easy to be comfortable in a single stack. giving something else a try will reduce that comfort, and you might learn a few things that help in both stacks.so, in terms of missing it, it depends on what you feel like you're missing?", "under \"unavailable features\" 4, and 5 are all pretty sore points. 2 would be as well if it weren't extremely likely that for any game you create roll some sort of reflection system. it would be a sore spot for small projects.3 - no access to classes and polymorphism is a bit of a downer. although i'm a big believer of data-oriented design, i think there are still many cases where modelling things as objects is the best way to go, especially for things like scene actors and game objects.4 - no built in threading (core.thread) puts a hamper on any sort of distributed updating or performance optimizations you'd want to do. i'd imagine the workaround is external multi-threaded dlls or something, but it sounds like a pain to manage and deal with in a workflow.5 - no dynamic arrays. this container is used abundantly in game development. it shows up 5 or more times for every heap/stack/queue. this may not be an issue if you want to write a special memory environment and your own containers, which is common in game development, but not having access to a standard one certainly hurts when it comes to smaller projects or graphics programming experiments.i may be somewhat off base here since what happened is that i read about those being missing and decided not to try it.another note is that a big thing i'm looking for is massively improved compile times, which is one of the biggest things jai looks to have over c++ in addition to its compiler hooks and #run.", "i don't know where you're getting your information about python from. it's popularity has skyrocketed in recent years. search indeed's api for title:python and location:london. 412 python jobs compared with 278 for node.js. what's also interesting is that there are currently 35% more django jobs than rails in london whilst at angel.co they're about even.", "python is a great first language for the use cases you mentioned! we have great popular frameworks for web apps such as django and flask; and data analysis tools and frameworks like pandas, numpy, and airflow, amongst many others.", "\"...which would effectively let the electric-auto maker pay off that obligation in stock instead of cash.\"how does paying off the obligation with stock work?, whose shares would tesla assign the bond holder?, if it assigns shares after market closes and when market opens if it's below $360, won't the bond holders sue?", "seeking freelancer | boulder, co | remoteat uplift, we\u2019re on a mission to perfect our working lives all while learning, building, and enjoying our free time.we're looking for software engineers who want to create their own career path on their own terms. engineers who value the flexibility to work on several different projects along with the opportunity to keep learning.if you're a good communicator. if you're self-sufficient. if you're passionate about the work you do and have been looking for a new, exciting opportunity to grow, come work with us!technologiesyou are at least mid-level to senior in one or both of these:* react, react native* python (3+) / django (2+)bonuses:* freelance/project experience* familiar w/ graphql* familiar w/ heroku* familiar w/ aws* native ios or android experience* understanding of databases, sqlfor more info visit by email: work@uplift.agency", "as noted later in the thread, this is specifically for people who are overseas at the time of the election and not broadly.that said, this system seems like a bizarre choice given the apparent security issues discussed in the thread.", "hey there! love coding? secure code warrior is looking for fierce developers that can write clean and good code in scala play, c++, python django, ruby on rails, angular, angular js, swift, react, go, kotlin, for a new remote project we are just starting. the position is to create small applications for our training platform. we are in need of developers with at least 2 years of experience and a good level of english. are you interested? send your resume to: earevalo@securecodewarrior.com to evelyn ar\u00e9valo. (www.securecodewarrior.com)", "can this be used to transcribe voice data in real time?i am building a docker image which will eventually accept in-browser audio via websockets outputting transcription in real time without needing google webspeech. planned to use deepspeech but this looks promising given it's low resources.", "i guess i'll ask the elephant-in-the-room question again: why should i use it over django? what does it do better (for your opinion of better)?", "sandbox banking (yc w17) | software engineer | boston, ma | full-time | onsite | provides a universal adapter for banks. it helps institutions quickly and securely integrate new software from vendors and fintech startups. we're growing quickly, backed by y combinator, and possess enviable runway.our team is looking for a software engineer to help expand our core platform and ensure the success of new client deployments. applicants should want the opportunity to play a critical role in building an early stage product, enjoy working directly with customers, and be excited about financial technology.our stack is comprised of python, django, postgres, an assortment of aws services, and vue.js.please see to learn more.", "seeking work | lithuania, eu | remotei'm an expert python/django and javascript developer with 12 years of experience. i have a strong systems administration background.my github profile is and my blog is an experienced developer with* 12+ years in python* 12+ years in javascript* 12+ years in sql* 12+ years in linux server administration* 10 years in django* 6 years in django rest framework* 4 years in mongodb* 3 years in swift* 3 years in angularjsemail: michael.samoylov@gmail.com", "there are backdoor for smtp credentials in django projects:", "elements interactive | python/django developer (medior to senior level positions) | barcelona, spain | full-time, onsite, visa (for highly experienced candidates with uni degree)elements interactive - we're a digital agency building web and mobile applications for a wide range of clients with hq in the netherlands. we have an international team of over 60 professionals (12 in barcelona office), all passionate about technology, learning and sharing our knowledge. currently looking to expand our team in bcn. check our current tech stack here info about us & our projects here (position + benefits info)", "hey tomp. of course you can. most of our source code for satnogs is actually python (and django) and there is a lot you can do with c++ too. check out our forums and don't hesitate to introduce yourself to the rest of the community feel free to also hang-around over our irc channels at the freenode server #satnogs matrix bridged here or #librespace matrix bridge", "dominant in developer/framework mindshare for five years.. damn hard to find a company actually using it in many markets for most of that time. at first it was not all that different from node's leadership of frontend thinking, except that it could be used in the browser..for a past python developer, trying out something like django a bit with converting a past project would be less work than react for a js developer and probably a good refresher.", "seeking work | new york, ny nyc | remote or onsite nyc full stack engineer with over 6 years experience delivering software. experienced working for startups and larger corporations in fast-paced environments. comfortable eliciting requirements from stakeholders, developing software specifications and implementing the software specified on time.experienced developing full solutions: frontend, backend, mobile, devops, sql database reporting, email marketing and conversion funnel optimization.i have developed software used by thousands of paying customers in javascript (react, react native, meteor, jquery, angular.js, node.js), python (django, flask), ruby (ruby on rails), mobile native languages (java, objective-c), go, sql (postgres, sqlite) and cloud providers (amazon web services, firebase, ansible, docker, kubernetes and terraform).experienced in the restaurant, healthcare (hipaa compliance), hospitality, cosmetic and e-commerce industries.interested in machine learning, deep learning (keras, tensorflow) and blockchain technologies. experienced in solidity.email harry@harrymoreno.com", "i think you're shooting yourself in the foot looking for 'web developer' jobs in the homeland of hipsters. of course all the postings are going to be for trendy technologies.look for more boring jobs that require web development skills, unless you're really stuck on the title.you know php. i did too, once. i made the mistake of taking on a magento project a decade ago, suffered through it, and i still get hounded by recruiters desperate for php developers who know magento. that fucking platform still powers 99% of the entire e-commerce space; version 2 was released recently and by many accounts it's even worse than v1, which means people who made the mistake of using it are going to need support for it. the demand for php developers is still very much there.you know python. you can get jobs knowing just that. there are lots of relaxed junior-level *-analyst positions in many domains requiring nothing more than scripting skills and a brain, which you clearly have. i see job postings all the time looking for django devs. lots of businesses need reporting-type stuff done, business analytics, etl, that sort of stuff. shady businesses always want web scrapers written.with 10+ years in web development, you might also want to take a shot at jobs involving web application security-- either securing or breaking it.just to put it in perspective-- my job title has nothing to do with web development, yet it is an incidentally significant portion of what i do. best job of my life, and i never would have found it looking for \"web developer\" jobs, since that's not what they thought they needed when they hired me.crawl linkedin, not craigslist. all you'll get from craigslist are couches, crabs, and people who want you to build out scalable pci-compliant e-commerce solutions with a full complement of product photography for their hobby business for $500, payable upon delivery. and when they sense your desperation, they'll withhold even that until you go away.best of luck to you.", "completely agree. most are horrible enterprisey java stuff. i currently use django-ca.", "the last time i checked, it didn't support django. migrations didn't work. don't know whether it works or not now.", "memorang ( | los angeles, ca | full-time | remote-ok | software engineering lead |# overview we're building the world's first content-agnostic study platform and exam marketplace from grade school through graduate school. our mission is to automate and innovate upon cognitive techniques and strategies to level the playing field in education, especially as it pertains to knowledge acquisition, retention, and mastery.the core of the platform is our data model that supports complex content, from art history to engineering certifications (think google knowledge graph). by unifying the crowdsourced community and premium content marketplace (for 3rd-party businesses) we aim to turn memorang into a lifelong learning platform for hundreds of career paths. think of the product as an education-focused chimera of anki, kaplan, dropbox, amazon, and squarespace.# traction 200k monthly learners (20x growth in 2 years), 30% of us med students, profitability (good unit economics), just raised $500k funding.# opportunity this is right up your alley if you: - want to own the tech stack and roadmap - want to lead/grow a team (i.e. tech lead/cto) - geek out on spaced repetition, cognitive science, and machine learning - like making immediate, positive impacts on users that empowers their future# stack python / django, node, redis, postgresql, react(js/native)i'm the founder and can't wait to hear from you: yermie@memorangapp.com", "seeking work: montevideo, uruguay. gmt -3. | remote only | full stack web developeri've been working remotely with django for around 6 years now, delivering web apps and mvps for startups.email: saizar.martin@gmail.comlinkedin: me a message, let's chat!", "location: montevideo, uruguay. gmt -3remote: yeswilling to relocate: notechnologies: python, django, javascript, mysql, postgresql, linux, dockerr\u00e9sum\u00e9/cv: | saizar.martin@gmail.com", "code_removed", "seeking freelancer | london, uk | local only | 6-month contract, \u00a3450-\u00a3500/day, starting immediately.bitstocks | is looking for experienced django developers to build a next-generation cryptocurrency trading platform.you will be working with the latest versions of django (2.1 at the time of this writing), django rest framework and python 3 as part of a team of 5.required skills:code_removed desirable skills:code_removed the interview process will be an initial phone call followed by a short (~30 minutes) take-home coding exercise and then a face-to-face interview.apply today at careers@bitstocks.com.", "dlang is also very nice if you like algol style languages. you can get productive in it pretty fast, just like in go, but it's expressive, it's garbage collected by default and you don't waste time fighting the compiler. also the code compiles as fast as go with dmd and ldc. i havent tried gdc.", "legalstart | full-stack software engineer | paris, france | full-time, onsite, visa, python/django rest framework, react, postgresql, rabbitmq, docker, awsbased in paris, legalstart is a leader in the european legal-tech space that aims at profoundly simplifying legal services, starting with making access to justice greatly easier, especially for businesses creators.since the launch of the site at the beginning of 2014, legalstart has experienced a very strong growth. in this context, we are looking for highly motivated developers to help us extend our product base and grow internationally.at legalstart, we strive to improve our technical skills, that means challenging the status quo (we shipped a small blockchain-based product in production), continuously improving our practices (we introduced haskell and reasonml in our codebase), staying close to the local community (hosting meetups, conferences)\u2026 also, legalstart engineers develop a strong ownership of the product itself, and we really value their personal growth.apply there if you feel up to the experience!* front-end developer: python developer:", "memrise gives people learning superpowers!we've got:* an impactful mission - memrise is an application helping our users achieve confident, real-world language skills & connect with new cultures.* exciting technical challenges for you to work on. we build for scalability & high availability; use machine learning powering real-world, user facing features; have big data to process and feed into our adaptive learning algorithms; and smooth, refined user interfaces to build that our users will adore.* funding - we just closed our series b at $15.5m!* a large user base - we now have about 40m users!* an awesome team - looking for:* mid-level and senior backend software engineers. we use python 3.6 / django / mysql / redis / celery running on kubernetes / aws.* ios software engineer. we use obj-c/swift & our app is regularly featured - and you might have spotted us at wwdc this year using coreml - senior data engineer. we use redshift, segment, looker, airflow and apache spark, all on aws.will you join us? apply at", "benzinga | detroit, mi | full-time | onsite | financial media company at our core, we're high-energy, focused on our users and our product. we reach over 2 million uniques and 200 million impressions / month.seeking people who love to code, design, move fast and get shit done: the hustlers of this world that know their stuff.* frontend engineers (react, redux, es6)* backend / ops engineers (go, kubernetes, python/django, java, mongodb, postgresql,...)* designer (ui/ux for our applications, modern web presence and brand consistency)apply at or mail me (bert@benzinga.com) with any questions.", "zoro | chicago, il | multiple positions | full-time | onsite | are hiring for software developers at zoro tools! zoro is an e-commerce business specializing in b2b/b2c sales of products that help build, clean and fix anything you can imagine. we sell over 2 million products with fast and often free shipping. in just over 6 years of existence, we have built a company of nearly 300 team members with annual revenue of over $500m! help us transition and build a stack that will help support out business as we grow from 2 million products to 10 million, $500m sales to $2b sales, and more!our stack: python/django, vuejs/es6/javascript, elasticsearch, mysql, rabbitmq, redis, docker, jenkins, aws, gitopen positions for our river north location:* frontend developer: full stack developer: qa engineer: are looking for proficient software developers with at least 2-3 years of experience. if you\u2019re interested or want to check us out, please visit if you'd like to email and apply directly, please reach out to itcareers@zoro.com and mention hacker news!", "i know some of the duo folks and they are serious security nerds and i don't think they would make this up. that said, i don't have any knowledge of the implementation. i did find this[1]:> duo push technology employs asymmetric encryption to sign and verify communications between duo's servers and a smartphone running the duo push appi'm thinking this is saying something like they sign the contents of the push notification with a key that the app knows and that the man in the middle wouldn't have. so, they're not just relying on the provider of the push notification service.[1]:", "seeking work - san francisco/nevada - remote okus & eu citizen. travel possible. open to relocation for short term projects.experienced software developer/manager with an extensive history in startups.proficient in:code_removed i've helped entrepreneurs develop their mvp, as well as large companies develop core features. provided services such include feature development, engineering management, product management, and software auditing.previous engagements include 2u, fuze, shift, getaround, codecademy, factset, drip.fm, and swiftstack, among others.", "there's an examples/django project in the distribution. i think they removed the gevent bridge from pypi for some reason, but you can still use the eventlet one. gevent is production quality and the concept of bridging them is sound, so hope someone will work on it.", "our front-end stacks include swift/objective-c, android java, react, and node.js. our back-end stacks include postgres/postgis, aws, django, and docker. we have extensive map building infrastructure based on openstreetmap and other open data and tools.", "> i assume you meant \"an empty string is user supplied an empty string as data\".i think so - it was a bit late. but it's the diff between intentional empty value and unknown/initial value.i still don't grok why django seems to want, by default, to ignore the concept of storing \"null\" in the database, and makes you jump to non-default configuration to do something which has value (seeing nulls vs empty strings means different things).", "bookmyscan | | cambridge / london, uk | remote (europe) | full-time | python/django/postgresql | senior full stack developer | \u00a340-\u00a350ki am the cto at bookmyscan, and we develop online booking systems for diagnostic scans. we have a number of exciting opportunities, and therefore need to expand the development team.i am looking for my first developer, reporting directly to me. we are using python, django and postgresql on the back-end, javascript and jquery on the front-end, all deployed on aws. as the first developer in a start-up, you will be involved with all aspects of the development process: specification, development, testing, release, support.ideally, the developer would work core-hours of 10-4.30 (uk time), with a brief stand-up at 10 each day. i have grown development teams successfully in previous start-ups, but i am still open to ideas for improvements.interview process consists of: short coding test (should take no more than 1 hour); 30-minute remote interview; 60-minute remote or face-to-face interview, depending on location. i have hired successfully from hacker news before.we have ambitious plans to grow quickly in an environment where data is sensitive, so any experience of scaling, security and robustness would be helpful. any experience of start-ups and medical information systems would also be useful, but is not essential.please apply by sending your c.v. to me, with a short paragraph about why you would be a good fit for the role. feel free to contact me with any questions. paul.redman at bookmyscan etc.", "no struggle. i regularly develop and test it against django master with loud warnings so i fix compatibility issues one at a time as they appear in django master. i also don't use any 3rd party libraries which means i can upgrade right away.in this cycle all i needed to tweak was something related to `use_required_attribute` on a form, and i did that back in march. i needed to add `renderer=none` to to my form field render() method, but i did that back when it was a warning in march 2017.", "nuvoair.com | full-stack engineer | fulltime | onsite | stockholm, swedenno visa sponsorship available. you must have permission to work in eu.we are a small but fast-moving funded (2017) digital health start-up changing the way healthcare is delivered. we combine hardware, software and data to improve lives of people suffering from respiratory conditions and to enable better clinical decisions.your key responsibilities are to build, test and maintain architecture. discover opportunities for data acquisition, and to assist scientists with data modeling, mining and deployment.your skill set and qualifications include: minimum 5 years of commercial software development/ python, django and flask frameworks and sql / strong linux command line a plus -- git/jenkins/docker/etc -- testing (unit and integration) / strong communication and documentation skills (fluent in english)what we offer:code_removed if interested reach out with an intro and cv/github/portfolio to sheraz.sharif@nuvoair.com", "totally agree. i've been using django since 0.96 and it's is so mature now. earlier they introduced so many new features... but it's now a very mature framework that doesn't really need any new features.", "juggle.jobs | multiple roles | london, uk | onsite (remote ok for exceptional candidates) | no visajuggle is a saas platform for the future of work. via our digital recruitment platform, we help businesses to find and support experienced flexible professionals. by creating and supporting a thriving professional flexible working ecosystem, we believe the future of work can be democratised. our aim is to help ensure 50% of business leaders are female by 2027.senior software engineer, full stack. our app is still small, but we want to scale it without compromising the build time and the app speed. we support mobile, tablet, and desktop modes (but not ie or other corporate bullshit requirement). our backend is using python 3, django, and django rest framework, and we\u2019re heavy on oop patterns (ever heard of the gang of four?). we\u2019re small and flexible enough to take on the giants like linkedin and outsmart them on data algorithms.salary \u00a355k \u2013 \u00a375k, share options.vp of engineering, tasks include running 1-on-1s with the engineers and providing mentorship, working with the product team to understand what is possible and manage timeframes, oversight of technical debt, technical architecture of the platform, interviewing potential new engineers.salary \u00a360k \u2013 \u00a390k, share options.we're currently a team of 3 developers (the whole company is ~10 people), i am one of them, and we're growing and in need of help. office is located in clerkenwell. we're family friendly, half of the team has young children. we have also weekly team lunch, gym membership, and annual ski trip to the alps.if interested, send me email to artjom@juggle.jobs", "i understand that it's played out (both as a general discussion, and as replies to your post) but php's shortcomings as a language are so blatant when working with any other okay general purpose language.community also goes a long way. back when i dealt in php (+whatever framework) and switched to django, the average competence of people i interacted with in conversations regarding the language / frameworks jumped up considerably. i like standing on the shoulders of giants.", "i develop many content-driven solutions using django and the conclusion i've come to is that everything is trash and if it's something for your use, stick to md.i've gone with ckeditor ( for all my new stuff, for what it's worth.", "> * ease of upgrading between versions. this is especially critical and important if you have long lived projects.this is such a big deal and i can't work out how the javascript community has been operating under its 'break everything in a week' model for so long with such high traction.django has a sane, predictable release schedule. django has lts releases with years of support. i work in an agency environment where applications can sit running for years without being touched, and when new work needs to be done - i can't have my entire dependency tree falling from under my feet (or arguably worse, abandoned) because people have decided that backwards compatibility doesn't mean anything.it's so so hard to not be cynical about this. the entire development world feels like it's more-so every day geared toward time-rich development teams pumping out software in a startup environment frothing over the next big thing. i have to account for every hour of my time, switching between / training other developers on new-hotness javascript frameworks is unjustifiable.", "seeking work - remote, short to medium term projects - zak.wilson@gmail.com i make software - mostly full-stack web development and http apis, but i'm adaptable. i have some interest in artificial intelligence and machine learning. i have a little experience making android apps, and my open-source android app ceilingbounce has happy users.i can do stuff that's harder than basic crud apps. stuff i know well: clojure, ruby (with or without rails), python, django, javascript, lua, postgresql, mysql, sass, responsive css.other stuff i've used for something non-trivial at least once: common lisp, scheme, java, sass, c, php, haskell, bash, perl, mongodb, mirah, android development with clojure. yes, i can probably pick up that language or tool you're using that nobody has ever heard of.github: public facing things i've worked on:", "while \"it's in python and not php\" immediately comes to mind, a less snarky answer is that django feels optimized for building bespoke content management systems. take some time to play around with the automatic admin generation.", "django rest framework (1) gives you the best of django + a restful api really, and is just another `pip install` and a few lines added to settings file.you still have some of the same performance issues as with any orm - but it makes setting up a django based restful api fairly trivial.some things i like about drf:- viewsets which allow restful read + crud ops on an existing django model.- easy to set up different serializers for a model view: flat, nested with child relations etc.- auto generated api docs in the browsable format of your choosing.1 -", "arachnys - senior engineers - london - we use 120tb+ of data coupled with extraordinary user experience to help banks manage know-your-customer checks and anti-money laundering (kyc/aml). it's what's perhaps most broken about banks and we're helping to fix it. our customers are tier-1 financial institutions and large multinationals. we are currently looking for senior engineers in london.we work predominantly with python, django, javascript, react, and docker. we are also moving towards exciting technologies like go, and graphql. our infrastructure is backed by kubernetes, hadoop, elasticsearch, terraform, and amazon web services. experience in any of these is a plus but not required, however, we are looking for strong python and/or react skills. we have two projects with over 1k stars on github (one just broke 4k we're always looking to open source more.our tight-knit team has a can-do mentality and isn't scared to use new tools when they are the right ones. we have a relentless focus on quality of delivery.drop me a line if any questions.email daniel@arachnys.com to apply, linking to your github or some other code that you think tells a good story about you.", "pure labs ( | product engineer | munich, germany | full timewe at pure labs are a small team of entrepreneurs building tech products that delight and make sense.pure labs has to working modes: retainer (\"agency/consulting-work\") & co-venturing (help founders build their tech products as part of their team)working this way, we built up a quite interesting & diverse client base as well as bootstrapped multiple companies (biggest one is currently a pre-series b).it's super important to us to not just work in the company (day-to-day), but _on_ the company. that's why our vision is to create an environment where people can be successful & most efficient building tech products - employees first.our tech stack is based on python/ django in the backends and react.js in the frontends. of course we do 100% peer reviews, high test coverage, ci, cd, deployments via docker - the usual.find out more about us at", "iirc, i had read that disqus uses django, and that they were one of the biggest django sites on the net, but that was a while earlier. not sure about now.update: just saw that hn user txcwpalpha said the same about disqus in sibling comment.", "fareharbor | san francisco, ca & amsterdam, nl | full time | onsitefareharbor is the world's leading software platform for the tours and activities industry. with more than 7,000 customers and $2 billion processed for our clients domestically, we are now taking our mission to provide excellent software to the global market.we have a very engineering-driven culture that values code quality, impact, and ownership. our stack is python/django/angular/postgres/aws.we are currently hiring for backend, full-stack, and product engineering roles in our san francisco and amsterdam offices.", "top hat | | toronto, on, canada | onsite full-timewe are looking for software engineers to join our team. we are hiring for a variety of development roles including: devops engineer, sr platform developer, sr android, ios, and a full-stack web (python, django, javascript, react.js/flux, aws, ansible; recently we\u2019ve been practicing continuous deployment on lambda). salary range based on experience from $80k to $120k.top hat helps professors make every lecture count by transforming mobile devices into powerful engagement tools, inside and outside the classroom. recently, top hat has been building out interactive textbooks and creating a way for professors to collaborate on authoring new content and sharing it through our marketplace. in summary, we have a great dev culture and some really cool problems to work on! here:", "pimes.com | 3rd software engineer / frontend expert | bogot\u00e1, colombia | full-time | onsite/remote | jobs@pimes.commission-driven, for-profit, online lender to small and medium sized businesses in developing markets.pimes (formerly include capital) accelerates the success of profitable small businesses led by motivated, capable and ethical entrepreneurs in select developing markets by providing access to innovative and comprehensive debt financing. at the same time, we offer our investors market returns and access to a new asset class. but we have our sights set on much more than lending in developing markets!our engineering team aims to be humble (i.e. no jerks) and disciplined, considering ideas, testing them (sometimes in production), and moving fast. as the third engineer you'll be expected to do it all: architecture, data modeling, frontend, product and ui design, even deploy ml models.our stack: aws, lambda, django, python, java, frontend is custom design with jquery (considering react for some apps), docker, fabric, terraform, packer, postgres, circleci, dynamodb, ci/cd, segment io for data pipeline.we are not considering any remote workers outside of north or south america currently.jobs@pimes.com", "another point: websockets. golang is pretty good and (they say) django kinda sucks. have you used django channels?", "artivest | new york | onsite | artivest.cowe are a tech-driven alternative investment platform that broadens access to and connects leading private funds to financial advisors and high net worth individuals.* vp of engineering | python, django, postgres, angular, architecture, strong tech and team leadership, mentorship* product manager | enterprise software, integrations, prototyping, ux / ui* client service and support associate - investment processing, document mapping, site configuration, client support* it help desk in la jolla, ca", "there's been some work to add type-hinting to django if that helps.check out:", "hey there - i lead twilio's documentation team. there's nothing worse than frustrating docs, i'm sorry ours are coming up short for you.i'd love to talk more about it and hear how we can serve you better. and it looks like you work with django a lot? so do i - maybe i can help if you've got a specific project in mind.my email is abaker@twilio.com - would love to talk more about all of this.", "i haven't used django to render html in at least 3 years.", "elation health | software engineer/lead & qa | remote & san francisco, ca & san diego / encinitas, ca | full timeat elation we make tools for physicians and their patients that improve the efficiency and fidelity of their relationship, and help to make the delivery of excellent, proactive healthcare possible. we've got a number of roles available in engineering, design, and sales. see them all here: i'm closely involved with trying to fill our positions in engineering. looking for eng leads, software developers, quality assurance analysts. our engineering team is about half based in our san francisco office and half remote (remote for us is pst +/- 3 hours). tech stack is aws/python/django/mysql/reactjs. we have a great team full of folks that really value working closely with product, customer-experience, and users. lots of interesting problems to solve! we're also looking to grow our footprint in north-san diego count, where i'm based.apply online or reach out to me directly if you have any questions or are curious! i'm always happy to chat with folks about healthcare, startups, whatever. contact info's in profile.", "remote (worldwide) - open source developer on open edx - python/django, javascript (opencraft - fully remote company incorporated in berlin)development specialized on the free software project open edx, used by many universities and companies to run online courses. see edx.org, stanford.edu or fun-mooc.fr for examples of open edx instances. we are 20 senior developers, all working remotely from europe, north & south america, asia & australia. the company is not affiliated with edx, but rather contributing and working with them on various projects. this is a full time position, were you would be able to work remotely from anywhere you want, as long as you have a good internet connection.: )the open edx platform is a large python/django codebase, with good code standards and architecture (a lot of the edx engineers come from mit). you would work on different clients contracts using the platform. the clients list/references include harvard, mit, edx themselves, the french government, and various startups & universities currently running their own instances, or looking to create one. tasks are very varied, from developing core platform features, custom exercises and tools for specific courses (xblocks), customizing and deploying instances, working fullstack, operating our service infrastructure, improving our hosting platform, etc. you won't get bored here.most of your work is published as free software (open edx is released under the agpl license, which requires clients to release modifications under the same license), and you would also contribute to the free software project, pushing most of your developments upstream through pull requests, contributing features, documentation or help on mailing-lists.you can read more about how we work in our handbook, at python/django, ansible, aws/openstack, debian/ubuntu, mysql, mongodb, postgresql, rabbitmq, redis, elasticsearch, js, html/css.nice to haves: terraform, vault, packer, prometheus, elk, docker, android/ios. we are building a modern infrastructure and having a strong devops presence on top of core software engineering skills is a big plus with us.interview process: a 30 minutes hangout with a (simple) coding exercise.to apply, fill this form:", "seeking work - remote highly experienced vp of engineering & crypto consultant.skills:* crypto/blockchain - building crypto infrastructure (multiple blockchains), customized libraries and apis, as well as front-end (metamask) solutions - highly motivated to continue working with this.* nodejs/meteor/sailsjs* serverless (going heavy on that one)* cloud technologies (aws/azure/gcp)* wordpress/codeigniter/yii/drupal (components, hacks, themes) - less motivated, unless truly cutting edge (or wp vip projects)* ci & unit testing - jenkins, mocha & karma for js, toast for php, as well as selenium* django (general python too) - to a lesser extentseeking: challenging projects. most recently worked extensively with serverless & aws apis, building cloud-related prototypes, before that worked as an angularjs specialist.example work: upon requestlocation: eucontact: dev (at) azdv.co", "seeking desmoines/remote c/c++ build engineering and static analysis* project management* qt mostly in automotive/agriculture sector* native builds for aws lambda* mathematical modeling (smt, combinatorial)* django", "location: eu (changes frequently)remote: yes!willing to relocate: maybetechnologies:* crypto/blockchain - building crypto infrastructure (multiple blockchains), customized libraries and apis, as well as front-end (metamask) solutions - highly motivated to continue working with this.* nodejs/meteor/sailsjs* serverless (going heavy on that one)* cloud technologies (aws/azure/gcp)* wordpress/codeigniter/yii/drupal (components, hacks, themes) - less motivated, unless truly cutting edge (or wp vip projects)* ci & unit testing - jenkins, mocha & karma for js, toast for php, as well as selenium* django (general python too) - to a lesser extentresume: upon requestemail: dev (at) azdv.colooking for challenging projects. most recently worked extensively with serverless & aws apis, building cloud-related prototypes, before that worked as an angularjs specialist.", "precious (yc w18) | san francisco, ca | onsite | uses ai to tell the story of your children growing up. our computer vision automatically finds the best photos of the kids on a parent's phone, and then builds the perfect digital album that is shared with family. our purpose is to make families happier and stronger.we are a venture-funded startup that just graduated from ycombinator, raised a seed round, and has significant traction.to learn more about who we are, our engineering culture, and whether this is the right place for you, read our key values profile: are our open roles:- senior ios engineer - 1st employee: machine learning engineer - 1st employee: senior backend engineer - 1st employee: stack: python, django, postgres, objective-c, swift, pytorch", "one of my first django projects was to \u201cbastardize\u201d its admin into a lead/opportunity management system for a mortgage broker, back in the version 0.96 days. i know that monkey-patching is now frowned upon and reguarded as \u201cthe work of the devil\u201d but it really helped me get the job done for that project in a pretty reasonable amount of time. i hope dynamic programming makes a come-back.", "can anyone recommend a framework like django except for a static language? i tried django and really liked what i saw, but i can't see myself using python for a large project.", "location: remote, willing to relocate remote: yeswilling to relocate: yestechnologies: python, django, mobile(ios, android), react, react-native, vuejs, docker, vagrant, ansible, aws, golang, r, hadoop, spark, tensorflow. currently learning blockchain concepts and smart contracts with solidityresume: sidmitra.del+hn@gmail.comportfolio:* airbase - coming soon. an app to manage hundreds of app subscriptions using virtual credit cards. - an app for freelancers and clients to work together.* - an app(with an sms bot) to send beautiful printed postcards to your loved ones.* - a platform for advertisers to work with youtube content creators.* - publishing platform where anyone can publish e-books, and soon printed books (print on demand) and online courses.* intuit cpaselect - an online marketplace for tax experts. [formerly teaspiller]*", "seeking work - remote/freelancepython/django/mobile/react/react-native/vuejs, with extensive experience building of web applications, e-commerce marketplaces. i've worked a lot aws, google cloud, docker and kubernetes. i have a research background in data analysis. i also have experience with numpy, pandas, scikit-learn, nltk, tensorflow and more recently solidity.some recent examples from my portfolio:* airbase - coming soon. an app to manage hundreds of app subscriptions using virtual credit cards. - an app for freelancers and clients to work together.* - an app(with an sms bot) to send beautiful printed postcards to your loved ones.* - a platform for advertisers to work with youtube content creators.* turbotax cpa select for intuit, to help select accountants. formerly teaspiller.com* - publishing platform(for print on demand) and online courses.you can look at sidmitra.del+hn@gmail.com", "lyte | | san francisco, ca | full-time, onsite | frontend (react.js) | backend (django, postgres)lyte is a post-primary ticketing platform for sold out events which means we\u2019ve partnered with some of the biggest names in the live entertainment industry to help eliminate the secondary market (scalping) and save fans money when buying tickets to sold out shows. we work directly with the promoters, artists, and venues as an extension of the primary box office, helping them control their events end-to-end.we're looking for:- senior backend engineers (python, django)- senior data engineers- product manageremail: engineering@lyte.com", "zeitgold | pm, eng, sales, marketing, cust. exp. and more | full-time | berlin and tel aviv | onsite\u2022 product: an innovative machine-human hybrid ai-based solution that automates complex small business workflows in accounting, bookkeeping, and payroll. in essence, a data platform for small businesses that collects, structures and manages all financial and administrative data streams. \u2022 why: zeitgold enables entrepreneurs to focus on what they are truly passionate about - their products and customers - and frees them from paperwork. we are saving small business owners 10 hours per week and creating clarity of mind. \u2022 \u20ac14m+ funding: battery ventures, hv holtzbrinck ventures, and a number of well-known business angels from germany, silicon valley, and israel. \u2022 stack: react web, react native (android and ios apps), python and django, graphql, broad usage of aws services, serverless architecture (aws lambda), docker containers. \u2022 values: startup mindset, valuing others, growth mindset, strong convictions loosely held, striving for excellence==founding team== founders of sumup and former members of israeli defense forces cybersecurity unit 8200.==contact== jobs@zeitgold.com | more info: colin roper, vp of product @ zeitgold", "i have some personal websites that still run on django 0.96. i also keep the source-code for them in svn and use trac 0.12 (i think) for pretty-viewing the code in the repository. it\u2019s nice seeing commits you made 11 or 12 years ago.", "> django has an inbuilt (and inferior) version of sqlalchemydjango has it's own orm with a different design philosophy that is optimised for a different use-case to sqlalchemy.django's orm is generally cleaner and more readable for the common case and requires less code to set up. it might be slightly less elegant for more complex cases but it's a trade off that's made me pretty happy on balance.", "pinterest uses django.", "we went the other way around and came up with and to integrate sqlalchemy with django as the project was already using sqlalchemy.", "code_removed i want to learn about crypto and am looking for an opportunity to work on some tool to serve the space. i'm particularly interested in creating a trading bot but open to other ideas as well. i'm good at tech (have shipped for kleiner perkins, worked in the obama wh, etc) but have little knowledge on crypto and trading strategies. i'm not interested in a fulltime role.", "you are not required to use django's templating engine. it works great with react, vue, angular, etc. if you use django rest framework as the intermediary.", "not true. django-rest-framework is so well adopted and widespread and it lets you very quickly put together a rest service. if you just want to talk json/xml/whatever with your client, it is easy. but the really cool thing about drf is how it simply generalizes some of the concepts that already existed in in django. if you started in django and learned about form and modelform, you can easily pick up drf serializers and modelserializers to get input validation.with django channels, you can also very easily break away from wsgi and have real time services, web sockets, all talking with your django code.there is no \"focus on older web paradigms\". django may have been slower to get things that other shiny js frameworks already have, but this is only because django had already successfully been used in projects of different sizes and it could not succumb to cadt.", "wanderjaunt | full-stack engineer, data scientist | san francisco | onsite | | provides home owners and travelers with better experiences for fairer prices. for homeowners, we take the hassle out of managing a short-term vacation rental. for travelers, we deliver the consistency and quality of a 5-star hotel at a sharing economy price.you\u2019ll be the fourth engineer on our rapidly growing team. help build out our new booking platform, pricing algorithms, inventory management, logistics for housekeeping and more! django on the backend and vue on the frontend. accepting talented engineers of all backgrounds with django experience especially appreciated!our team is currently tackling a few large technical problems including: - building our own listing platform - creating the tooling that allows our operations team to scale and manage a decentralized hotel - optimizing our pricing algorithms to better match supply and demand - building tooling to evaluate revenue potential of a homes on the short-term rental market prior to acquisitionto apply or for any questions, contact me (lead engineer) at chris<at>wanderjaunt<dot>com.", "pathai | front-end, back-end engineering | boston, ma | full-time | visa, onsite | is looking for back-end, front-end, and platform engineers to help lead and expand a platform that is already helping detect cancer faster and more accurately while paving the way toward personalized medicine.we're working with a modern stack using python/django/flask/drf, alongside a vue-powered front-end. services are containerized, and we do our best to have a great engineering environment alongside our regulatory and compliance efforts. we're a technology company working within healthcare, not a healthcare company trying to leverage technology.we're making some major decisions around the direction of the platform, so we're especially excited to bring on tech leads, but early- and mid-career developers who have great software engineering chops can find a great home here as well.work alongside a diverse set of expert technologists, computational biologists, and computer vision scientists \u2013 if you're intellectually curious, it's an amazing environment to be in.check out our open positions at", "i maintain a django ecommerce site that's been running constantly since july 12, 2007 (at launch it was running against r4984, basically 0.96). just upgraded it to 2.1 today.", "disagree. it's mostly a question of whether the orm was designed as a \"least-common denominator of common operations supported by some rdbmss\" (which is clearly the case for the django orm) or as an abstraction of sql concepts (i.e. a form of relational algebra). the former category generally fares poorly with complex queries or structures; the latter exceeds at them.", "i work with a lot of clients and for every project, it's django. i love how readable the code is. i've even had non-technical clients peer into the code and make correct observations.and it's been said already, but django admin is a crown jewel. i can't tell you how many clients have jumped with delight when they realize they get that functionality out of the box. it ends up turning into a great admin dashboard and pseudo analytics tool---atleast for the short term.if you're jumping on the graphql train, i'd encourage you to check out graphene. it's a django library that serves as a graphql provider. reasonably well documented and production ready, imo. if you're looking a django + graphql + react starter project, mbrochh's project [0] is a good place to start. it is slightly outdated but the core patterns are still reusable.[0] -", "pyramid is often forgotten. it's genuinely designed to be extended (vs. flask's approach of \"here you have a magic-global variable (that's magically working like a stack of dicts), go put some stuff into it\"); a good example would be renderers. in django it's still kinda awkward to use other/multiple templating engines; flask doesn't really help. pyramid on the other hand has a simple and extensible interface to support multiple templates and other renderers ( ). this is a common theme with pyramid. another is avoiding global state; they're quite successful at that (vs. \"i declare my entire app/blueprint within a function\"-flask and \"i don't know how this works, it's just like magic. i go to my model class and, bam, suddenly i'm connected to some database\"-django). django orm is awkward and not that good, but awkward to replace.", "location: edinburgh, ukremote: yeswilling to relocate: nor\u00e9sum\u00e9/cv: see sw@seanw.orgtechnologies: freelance full stack software developer with over 10 years experience including a phd in software verification offering:- web app development: javascript (node.js, typescript, angularjs, jquery), python (flask, django), java, php (wordpress).- mobile app development: android, ios, phonegap/cordova.- cloud hosting: creating scalable apps that run on heroku, aws and firebase.- seo: on-page audits with the technical expertise to deliver the required changes.- code quality: reducing defects in existing projects by integrating test suites, staging + development environments, continuous integration, planning boards and code reviews.portfolio and more information available at example project - website auditing tool, rated 4.9 out of 5 with 10k+ users: sw@seanw.org for more details.", "i have been using symfony since the 2-3 years because the product is build on symfony. now i like symfony, because i\u2019m not a big fan of php. anybody knows how django compares to symfony. i have glanced through django documentation few times and it look a little similiar. if somebody has used both frameworks, what are the main advantages of django over symfony?", "location: san diego, caremote: yeswilling to relocate: noemail: tim@arevej.mer\u00e9sum\u00e9/cv: react.js, javascript, python, django, postgresql, html, cssi'm a starting-out junior. but, i'm very passionate and i'm super motivated. i enjoy a good challenge and professional growth. i can become a net-positive asset on your team fairly quickly if i'm given a chance to!i've been published by freecodecamp: been learning to code for about a year. i blogged about some things ( and made quite a few learning projects ( +", "rover | seattle, wa | onsite | full-time | your rainy-day-dog-walkers. your every-day-belly-rubbers. your middle-of-the-night-pee-breakers. because we get it\u2014your dog is family. and when you can\u2019t be there, you can trust us keep your dog happy, healthy, and sweet as ever. but it\u2019s not just about dog love. rover is also an award-winning technology business committed to making pet care safe, easy, and affordable so that everyone can experience the unconditional love of a dog.to learn more about who we are, our engineering culture, and whether this is the right place for you, read our key values profile: of our 19 open positions:* engineering manager - mobile: engineering manager - on-demand dog walking: engineering manager - operational efficiency: it client engineer: senior frontend engineer - search and sustainable supply: senior it program manager: senior software engineer - android: senior software engineer - application security: senior software engineer - ios: senior software engineer - machine learning: stack: python, django, react, redux, mysql, postgres sql", "location: northern california, usaremote: yeswilling to relocate: maybetechnologies: web (rails, spring, some django, angular 2), mobile (android, some ios), ops (some experience with ci systems, distributed app deployments, ansible, aws), iotr\u00e9sum\u00e9/cv: michael@cognized.co~5 years professional experience, quick learner, effective collaborator.currently working remotely as a senior-level contractor on an android app for a high-end kitchen appliance manufacturer.", "a huge reason some people consider frameworks like django obsolete is because they are focused on an older web paradigm of constructing elaborate html pages on the server side and pushing it out and letting some basic extra js stuff augment it.that's what lead to things like server side html form definition and form handling code.after the emergence of things like react, angular, etc those \"html templating\" facilities get in the way because that stuff is baked into the react app and is focused on the client side, it may get server side rendered with nodejs. a modern fancy web application using react in 2018 doesn't need something like django forms or flask-wtf and those types of things conflict and overlap with things like react.the backend is turning more into a data/api/graphql service than \"get html\" service that was popular when these frameworks emerged.", "instagram uses it. i'd say they're pretty well-known.others: digitalocean, pinterest (used django at first, may have moved to flask by now, not sure), mozilla, disqus, robinhood, the washington post.", "at work because i have lately needed to roll web server/api/admin/client apps (embellished crud situations with some other serverside processing to generate user output) and for those my go to for dev speed, platform speed, familiarity, and a few other concerns i generally go with node/express/typescript and it's great to work with.however for my personal site i used django to give it a shot. once i wrapped my head around a couple of different paradigms it was quite nice to work with, though i probably haven't laid it out as well as i would a real product or tool. it was very easy to get a pretty basic blog set up.my only gripe might be on the blog end\u2014 it was kind of a pain to find a halfway-current compatible text editor for that purpose. but that isn't the end of the world for my own site. and of course, that's not an issue with django itself.", "i mean that's a general problem with all orms. i've been on django projects where we had to drop down and pass raw sql statements.on my current project we don't use an orm; just sql statements and we create classes to match the result set and map into them.", "there are not currently many well-known products that use it. (bitbucket cloud being the exception.)that's not the best of reasons; just because django is not used by google doesn't mean it isn't the perfect tool for you.", "thanks for mentioning. i was going to post that i see you did it already.such a heavy mega framework that small to big companies and individual relies on, we should support it.whoever sees this, please support django to reach its goal.", "django won't let you name a model field with a double underscore, i believe. not sure how this would work with a postgres json type column though, but it would probably throw an error.", "revfluence | backend & full stack engineer roles | onsite | full time | visa | san francisco, ca | $100k - $200k + generous equity + benefitsrevfluence ( is a profitable, series a funded enterprise saas platform that helps companies create high quality branded content by finding, connecting and coordinating with thousands of talented content creators and influencers. our platform aims to solve a greater challenge beyond influencer marketing with a novel, data-driven approach to making the process of collaborating with photographers, videographers, influencers and other content creators more seamless and scalable than ever before, while also providing the infrastructure to constantly learn and recommend the right piece of content to the right person through the right channel.this is a unique opportunity to join a fast growing startup with ambitious goals to make it possible for talented creators to earn a living doing what they love. we're a well-funded, 40+ person company but our core team of engineers is still quite small and looking to grow quickly, which means you can have the opportunity to take on ownership and make a big impact!we\u2019re looking for engineers with the ability and desire to build a great product who aren\u2019t afraid of learning new technologies. our current tech stack includes python, google app engine, django, postgres, and reactjs + typescript (currently migrating from angularjs). check out some of our job postings for more details! free to also send me an email with any questions! my name is suhaas, cto at revfluence, and you can reach me at sprasad@revfluence.com", "are there people going around saying that django is obsolete? i've seen a lot of people argue against using django in favor of ror or flask, but that's usually based on personal preference. i've never seen anyone say that it's \"obsolete\".", "a reminder to support these guys! 24% funded and they\u2019re only asking for $200k.:(", "my roommate in college built a site with 0.96 of django. it\u2019s still running.i think it\u2019s one of if not the longest running commercial django websites.", "location: austin, texasremote:yeswilling to relocate:yestechnologies: javascript, python, git, django, flask, noder\u00e9sum\u00e9/cv: check resumebilingual in spanish, after growing up in south america. comfortable operating and learning new hardware, devices, software, websites, able to type quickly and multitask. proficient with a lot of software. strong troubleshooting and diagnostic skills, experienced with customer support. creative, with a degree in graphic design. learning python and javascript, and looking for a company that could use my skills.", "tango with django is my favourite read but it\u2019s tutorial style.", "narmi (techstars nyc '17)| senior full stack engineer | new york, ny (nyc) | onsite | narmi is helping reinvent banking in the united states. we create a more accessible and useful financial ecosystem by powering the online banking, mobile banking, and open banking apis for the 10,000 credit unions and community banks in the united states. you'll be working on production software that has a real impact on the average american's life everyday. our software helps them save money on their bills, understand their financial story, protect their families and move money.narmi was founded by two georgetown university alums who previously worked as ceo and cto of a $18 million credit union and also at some of the largest banks in the world.even if you don't think you are an exact fit for one of our current openings, we'd still love to talk.we are always looking for well-rounded engineers to join our team in nyc. having expertise in python (django and django-rest-framework), vue.js, react native, ansbile, terraform, visual design/ui/ux, and/or security are all pluses!the interview process entails an intro call to get to know each other, followed by an in-person interview that includes a code pairing session.some keywords: * senior full stack engineer, senior full-stack engineer, senior full stack developer, senior full-stack developer * senior front end engineer, senior front-end engineer, senior front end developer, senior software engineer, senior product engineer * banking, finance, online banking, mobile banking, open banking apis, * new york city, new york, ny, nyc, manhattanyou can learn more on our website and apply via email: jobs @ our domain. make sure to mention you found us on hacker news. you can also apply via angellist[1] also please feel free to reach out directly to me chris @ our domain.[1]", "* no agencies or recruiters please *wildfish - a london based consultancy who work mainly with django.we're looking for a full stack developer to join us, ideally permanently but will consider freelance too. primarily you'll be working on our client sites maintaining and developing django web applications and mobile apis, but also working on some of our own products and open source projects ( in our organisation is technical, all of us working remotely, although it's handy if you're within distance of london for meetings occasionally. we're ideally looking for someone in the uk, but will possibly consider someone overseas with excellent english in a similar timezone. some of the things we use, which it would be good for you to know some of:- python/django [essential]- html/css/javascript [essential]- twitter bootstrap- react / react native- postgresql- ubuntu linux server admin- docker- aws, gce, kubernetesthe most important thing is that you must be passionate about your craft, and eager to share and learn with others who feel the same. you'll need to be able to work autonomously, so it's important that you're the sort of person who has attention to detail and can be self motivated.please email work@wildfish.com, including the salary or rate you're looking for, along with a list of 3 django apps you like to use in projects, and a link to any code you have available online. please also mention if you have any interest in cryptocurrency.thanks:)", "i don't disagree with your assessments of django limitations. it does however, seems like a poor choice for your specific problem.this is why the problem inform the solution, pick the framework (or lack of) that suits your problem best", "managed by q | | nyc | onsite | full-time | engineering managers, software engineers, product managers, product manager lead, engineering interns (summer 2019)managed by q is the platform for office management. we make it easy to run an office by connecting office managers to services, including cleaning, maintenance, administration, repairs, and more. we are invested in building good jobs and empowering others - though we run a gig economy platform, all of our operators are full w2 employees with benefits, stock options, pto, and more.we're looking for engineers and engineering managers who are interested in joining our ~22-person team of curious, empathetic, humble, and driven engineers. we're also hiring for experienced product managers!though we're mostly using django, node, and react on top of aws, we take a generalist approach to hiring. we\u2019re looking for smart people who are problem solvers and passionate about their craft - you don't already have to be an expert in our stack.i'm an engineer at mbq, feel free to email me directly at eseidohl@<our domain> if you have any questions!mbq in the news:", "for anyone thinking about picking up django and is worried about the framework being obsolete i encourage you to take a look.django is fantastic. i've worked with it for a number of years now and it can really help in the early stages of prototyping.things i especially like about django:* the built in admin letting you edit and view objects easily.* being able to use it without using the views. add django rest framework and you can model your domain with good rest practices.* migrations and works well with postgres.* that the team has thought a lot about web security and how to implement it. things like xss, csrf, cors, session timeouts, authentication are all there in django. other frameworks i need to pull in a library for each and pray that they work well together. i found this especially with flask and large projects it gets ridiculous how much i have to write from scratch.things that would make me not choose django:* if you have a graph style problem and need a graph database like neo4j. (even then i'd probably want some part relational)* if you accept lock in to someone else's platform like firebase and don't want to run your own servers.* raw speed is an issue and you are okay with development taking much longer. in that case you're looking at some of the golang frameworks and possibly node/express.", "if you want jwt, you can use -- that provides another authentication class, and you can then auth with `accept: bearer <jwt>`.if you don't need jwt (i'd probably leave it out next time round) then django rest framework comes with a simpler bearer token auth class (among others): to add - if you're asking specifically about sharing sessions between the js app and the django server-side form, i believe this is what you're looking for: i.e. you'll still need to pass the csrf token into the js app.", "tempo automation | full-stack software engineer | sf | full-time | onsite | operates a factory in sf to produce printed circuit boards extremely quickly - in doing so, we give our customers the physical equivalent of a fast compiler, enabling them to turn their designs into real products significantly faster than they could before. our customers build rockets, drones, medical devices, and much more - working at tempo means you can accelerate all of these industries at once. providing a system to produce circuit boards quickly and correctly means we're both a software shop and an advanced manufacturer. our software team is still pretty small (9 engineers) which means any new hires will still have an outsize impact on the direction of our technology, and on the company as a whole. we love hiring strong generalists [python experience highly preferred] who take initiative and act as part-time pms when they're working on projects. some projects you might work on: - offering real-time, automated manufacturing feedback based on certain parameters of our customers' designs. think linting for hardware.code_removed tech stack: python | django | react | redux | postgresql | awswe're also excited to be moving into a much larger factory (>4x the floor space) in soma in a couple months, which means you'll see that space evolve from nothing into an enormous, high-tech manufacturing complex. if you're interested, please apply at or send a note to austin [at] tempoautomation [dot] com.", "thank for the quick reply. now i need to understand how the \"__\" magic work; and i wonder what would django do if my key is \"animal__breed\".will it understand:code_removed but this is maybe questions i should rather ask on #django or stackoverflow.", "> django kind of infects your code because it won't run without an initializarltion stepmost people using django have built their apps as django apps so this is a \"non issue\".the worst way to use django is to try and fight against the way it was built. for your case specifically, it's probably not a good option.", "seeking work location: boulder/denver, colorado (co), usa and san francisco bay area, california (ca)remote: yestechnologies: javascript (react, native, vue, nodejs), graphql, python (django, flask, appengine)r\u00e9sum\u00e9/cv: hn@uplift.agency---------------we are product-minded engineers. build full-stack sites or native-mobile apps and take them to market.marius & paul are former engineers turned freelancers who started uplift to build amazing software and solve complex problems.as experienced consultants and former founders, we understand tech companies. running a business is hard. you have to wear many hats. let us wear the ones we're great at!we specialize in react, react native, graphql and django/python.we\u2019ve worked with companies like credit karma, clearcare, nerdwallet, mit, humble bundle (w11), flightcar (w13), mozilla and more.for more details, previous work, testimonials, please visit:", "django's version of that query (to me) looks a little neater too.code_removed", "the way i've always done it is to not log the user in to a django session. that way the spa is the thing which holds the authentication, be it jwt or any other kind of token.if any other site tries to post to the api on behalf of the current user they'll get a \"authentication credentials required\" message.", "you might have seen aldjemy already but i thought i might mention it - let's us use sqlalchemy queries in our django code without requiring redefining the models in an sqlalchemy manner. it's easy to put a wrapper around it to convert sqlalchemy results back into django model instances.i'm exploring using django channels to send data to visualisation spa's in realtime.", "thread (yc s12) | london, uk | onsite | mission is to help people to feel happier and more self-confident by making it easy to dress well. we do this using a combination of human stylists and powerful machine learning algorithms to recommend each guy the perfect things just for them\u2014in their size, budget, and style\u2014which they can then buy in one place.to learn more about who we are, our engineering culture, and whether this is the right place for you, read our key values profile: are our open roles:- data engineer: frontend engineer: software engineer: stack: some of the technologies we use to build thread include: python, django, reactjs, postgresql, redis, debian, docker, memcache, nginx, ansible, jenkins, gunicorn, luigi, pandas, scikit-learn, git.", "sure you can. see the documentation:", "energy efficient equity | los angeles, ca / orange county, ca | full-time | onsite, remote (us) | efficient equity (e3) provides financing to residential and commercial property owners for use on their energy efficient remodels, installations and upgrades. for example, we finance water efficiency products, solar products, hvac upgrades and a lot more.we\u2019re building out the data, infrastructure, tools, and applications to support our business and having fun doing it. you'll help design and develop the applications we use to take loan applications, approve them, pay contractors, issue bonds and much more.we use: python (django & celery), angular (considering react), postgresql, elasticsearch, aws.we're a team of 5 engineers and looking for more product, infrastructure, and data engineers. more details can be found at", "oracle | remoteksplice is the leading technology that allows administrators to patch the critical components of a linux system on the fly with zero downtime and zero disruption. we're looking for an experienced devops engineer to join our team. as a devops engineer, you would be responsible for automating the deployment, monitoring, and day-to-day management of ksplice's infrastructure for building and serving critical security \"hot fix\" updates for various flavors of the linux kernel and for user space applications. at any given point, this may involve ssh'ing into a machine, updating a configuration manifest, troubleshooting a running system, spinning up a docker registry, or providing guidance on the best deployment options for a new service.the oracle ksplice team is a remote team, so you must be comfortable interacting remotely and working autonomously. we are a small team that expects its members to be comfortable with self-directed work.more information about ksplice is available at and you can contact me by email at travis.jensen@oracle.com for more detailed specs. oracle is an equal opportunity employer.tech stack includes mysql, linux, python, django, puppet, ansible.", "the django orm has raw sql escape hatches (either fully raw sql database connections or model instance selections with sql), and if you do need the sqlalchemy query builder, slap in something like for the initialization stuff -- yes, that's true; whenever django models are being imported, you do need to have had `django.setup()` called.", "to django model users. can you query keys inside a json datatype(pgsql)[0] from the orm?for example in sqla you will do:code_removed with data being the json column and lastname a key in the column.[0]:", "this aspect has me looking at getting into django; what have the discussions on hn regarding asp.net core (the new open-source stuff) been like? i'm mainly in pre-core mvc and looking to move up to something i can deploy to any docker-hosting environment.", "as a counter point, i tried to use django for a data-visualisation project and ran into some problems. everything is built on models, which are kind of activerecord pattern. django has an inbuilt (and inferior) version of sqlalchemy, so that when you want to push sql past a certain point (define queries more complex than the api) you're pretty much stuck. now you have codebase with two different database libraries in it. you're probably using an spa so all the view stuff isn't helping, and django kind of infects your code because it won't run without an initializarltion step so if you have a module importing something that imports django, any time you use that it needs to initialize django itself. i don't think that these are mistakes, just choices that they made that make it very good for websites up to a certain (sql/data) complexity and very annoying afterwards.", "i have spent some time using vue.js and django as a backend and i have been pretty satisfied with the results! i will probably try react next just to make sure i am not missing anything. i tried using node as a backend but i couldn't find any framework on the level of django so i went back to it. there are some pretty decent boilerplates already to setup a django/vue website if you look for them.", "django is a fantastic boring[1] tool, and seeing boring updates like this is great.couldn't agree more", "seeking work -- gainesville, fl -- remote/freelancei am an experienced python developer, having used the language in all kinds of areas and situations, including web development (flask, django, pylons, google app engine, etc), gui development, database access (using ms sql server, mysql, and postgres), scripting, backend development, automated testing, web crawling/scraping, data extraction and parsing/etl, etc.i am looking for full-time or part-time work, either one is fine. if you are looking to get a small project done, or you have an existing project where some maintenance work needs to be done (perhaps on a regular basis), then i would love to hear from you.i am also available for technical writing (i kept a programming blog for many years, mostly about python).(for the record: although python is my main programming language, i am also interested in, and have worked with, many other programming languages, including c, d, delphi, go, c#/mono, ruby, ocaml, prolog, lisp, scheme, etc, on windows, mac os x and linux systems. i am also available to work on projects in these languages.)website: zephyrfalcon at gmail.com", "code_removed my wife and i are expecting soon and i'm prepping to be a sahd (stay at home dad). i'd prefer to have some income, however, so i'm looking for part-time remote work. i'd be happy to work for us as well as non-us companies, as long as the work is interesting.i have a good amount of experience with web dev and i could do that quite capably. i'd be excited to work on something in a different capacity - games or cli tools would be amazing - or a different language.", "it is worth noting that pyramid web framework is also awesome to use. i see it as a middle ground between django and flask. the scaffolds make some design decisions for project and you can pick from what you like the most. pyramid allows for extensible applications and never gets in your way.the most critical python infrastructure (pypi) is now built with it, if you haven't tried it give it a shot. it is one of most well thought out frameworks for python in my opinion.i've made a tutorial for it:", "gamer network | games media | brighton, uk | full-time onsite | backend web developer (python) posting: network is searching for backend web developers of all experience levels to join our experienced in-house platform team.the platform team is in the middle of an ambitious project to unify gamer network\u2019s award winning family of games sites on to a single common platform, utilising cutting edge technologies to equip the company with a strong foundation for the future. this is the opportunity for the right candidate to be instrumental in shaping that platform.our sites: eurogamer.net, rockpapershotgun.com, vg247.com, usgamer.net, gamesindustry.biz, egx.net and many more.role benefits: - work on a network of sites that serve billions of pageviews per year. - a relaxed office environment well located near the north laine area of brighton and a short walk to the beach. - passionate colleagues -- across games editorial, events and sales -- who are a pleasure to socialise with outside of the office. - flexible working. - the opportunity to attend company-wide retreats to help run our world-class egx games events in london and birmingham.technologies: python, django, asyncio, node.js, react js, rabbitmq, elasticsearch, web services, service oriented architectures, microservices.we are looking for a candidate that is able to quickly get up to speed with any web technology, but you\u2019ll have an advantage with experience in the technologies listed.email: careers@gamer-network.net", "not op either, but i've been using django rest framework with react.js, and i'm really enjoying it.", "techempower | full stack developer | los angeles area, california (near lax) | onsiteplease apply at is a custom software company. we help our clients understand their needs, plan solutions for them, and build software -- on time and on target. we're looking for good programmers interested in web development. if you're smart, motivated, and you want to work in a supportive environment, then let's talk.about- we're small, with 30 employees working in teams of 1-6. - we're friendly. our office is professional and collegiate, like a computer lab staffed by adults. - we're the authority on web framework performance ( don't expect new hires to have experience with all of these, but you'll learn about them every day.- languages: java, javascript, python, go, c#, ruby, php - web: jersey,.net core, react, django, node.js, go, servlets, jquery - mobile: ios, android, phonegap - data persistence: orm (hibernate, etc.), postgres, mysql, ms sql server, nosql.benefits- flexible schedules - food trucks on tuesday/thursday - lounge with two large tvs and a game collection", "are there any good reads on django for former rails devs? i'm learning django now and interested for the \"translation\".", "django is the only web framework where i see consistently positive discussions about it on hn.bravo django, and congratulations on another release!", "carta (formerly eshares) | onsite | full-time | | nyc - new york, ny, sf - san francisco, pa - palo alto, ca, sea - seattle, wacarta is building the network graph of asset ownership through corporate governance. we help 7,000+ privately and publicly held companies track who owns what. we're growing rapidly and are hiring across the board.---------------------------------------------senior+ full stack engineers---------------------------------------------required:* 4+ years professional software development experiencenice-to-have:* experience with python and django* experience with react* professional experience in finance, banking or exchanges (ach, wires, trading stocks, etc)* experience with financial information exchange (fix) protocol* experience writing unit testsdrop a note to robert.balousek+aug18 [at] carta [dot] com for more info.", "location: venezuelaremote: yeswilling to relocate: yestechnologies: python, django, javascript, html, css, git, docker, herokur\u00e9sum\u00e9/cv: see resume", "not op, but i've also been using django for (more than) my whole career and i use react on the frontend.if you're curious about the frontend path i took, it was roughly:* jquery with no framework* backbone (for a couple years)* backbone + marionette (for a couple more years)* angular (for about a week)* react (for the past few years)", "gambit research ltd ( | london, uk | onsite | \u00a340-80k + bonusgambit research specialises in creating and managing an automated betting service, via research, statistical analysis and the use of complex algorithms. we ingest and organise terabytes of market and event data from more than fifty sources and make the data available to our strategy teams in real time. we care deeply about speed, accuracy and availability.our flagship product, mollybet.com, presents the odds offered by many of the world's largest bookmakers and betting exchanges, and enables clients to bet with multiple operators with a single mouse-click or api request. molly is generally regarded as the best product in its class.we're always looking for clever, pragmatic, and autonomous individuals to join our team. we have a unique culture, where hierarchy and fancy job titles don't matter. instead our team is given the freedom to choose their own tools, work on projects they actually find interesting, and have totally flexible working hours. the technologies our team typically works with includes: linux, docker, kubernetes, ansible, c, c++, java, haskell, julia, go, javascript, angularjs, reactjs, django, postgresql, redis, apache spark, apache kafka, rabbitmq, celery, elasticsearch, logstash, kibana, graphite, sentry, git, and gitlab.we're currently recruiting for:- python developers- erlang developers- javascript (reactjs) developers- linux infrastructure engineers / sresvisit or send your cv over to careers@gambitresearch.com for more information.", "edited | engineering positions | london, uk | onsite | full-timewe\u2019re currently hiring for front-end, back-end, data scientists and devops engineers. our stack is primarily python & javascript, with frameworks like django/flask and react.js/d3. we aren\u2019t afraid to integrate new tech and like to keep exploring what\u2019s out there.we're an established startup, focused on doing important things for retail, the fourth biggest industry in the world, helping them reduce waste and be more efficient. we have a beautiful web app, used everyday by hundreds of people at topshop, saks fifth avenue, gap and more.our engineering team is a group of smart people from really varied backgrounds. we\u2019re solving diverse and interesting problems on a daily basis, like image analysis, big data visualisation and a load of other fun things that come with having a rapidly growing data set. we love good practices like extensive testing and continuous integration, and enjoy giving back to the community, so open source contributions are highly encouraged.our office is large and sociable; people eat lunch together every day and we have drinks and snacks in the office every friday, as well as team days out and all expenses paid trips abroad. there\u2019s a video on our jobs page of our most recent one: of the team has actually found and joined us through \u201cwho\u2019s hiring\u201d, so don't hesitate to get in touch, we're always happy to meet new people!see here for more details about current vacancies and to apply directly online:", "django fan here, if you're trying to use django with react you may be interested in this: wrote it for my own convenience but others may find it useful.", "i have seen a bastardized version of django admin used as a quite sophisticated dashboard. this new addition will make it even easier to hack together things like that in a very short time.", "i've been working with django for almost my whole career, since 1.1. it's a joy to use, and blows any other web framework i've used out of the water when it comes to actually just building stuff.django is a fantastic boring[1] tool, and seeing boring updates like this is great.1:", "read-only model views are a great addition to the django admin -- i've been watching that pr for a long time, glad to see it land.this will make it a lot easier to build internal admin dashboards that are safe to share with non-privileged users like support staff.", "stationhead | multiple positions: ios developer, backend engineer | onsite in brooklyn, ny | full-time | 100k - 140k + equityhi, i\u2019m andrew defranco, a senior engineer at stationhead. we\u2019re building a music-focused social network fighting back against algorithmically generated playlists and soulless corporate radio. we\u2019re creating a democratized platform people connect with their music, their favorite artists, and each other. one of our founders is an actual rockstar, and we have artists and industry executives lauding us as the future of music streaming.we are a small team of 5 developers working collaboratively in a diverse and inclusive workplace, and our dev team has a wide range of backgrounds\u2014including self-taught hackers and bootcamp grads. we're looking for some passionate people to help us grow onsite at our picturesque williamsburg, new york office. you'd be a great fit for our team as a...backend api engineer if you:code_removed contact: andrew@stationhead.comios developer if you:code_removed contact: cody@stationhead.combe sure to tell us your favorite band when you send us an email:)you can see our full job listings at", "congrats django team! this iteration doesn't add too much for my current workings with the framework but it matures it none-the-less. my usual project compositions utilize django, graphql, and react. i'm earnestly watching to hopefully work it's way into the near future releases.", "king & union | front-end developer and python developer | washington, dc | onsite full-timethe point: we are an information security/threat intelligence company. our goal is to make the threat intelligence process run more smoothly and help organizations share threat data better. our web app pulls threat information (both our own and via external apis) into a graph and enables real-time collaboration and sharing of the information on the graph. (if you're aware of the tools, think of combining google docs with a graph editor like maltego and mix in some process automation.)what we're looking for: we're looking for two positions: one a mid/advanced front-end developer for the front end of our web-based application; the other a mid/advanced back-end developer. the front-end is built with react/microcosm/material/vis.js, and it talks to our backend using a mix of rest and websockets. the back-end is built in python with django/django channels. ideally, the ui person we're looking for would be comfortable doing both the react programming side of things as well as the html/css/layout work, and the backend person would be comfortable with some golang/command line work. there would also be some design work as we roll out new features to the site and migrate data graph db in the near future.perks of the job: early round shares, competitive salary, 401k, & healthcare benefits. also, we work from home a lot and our focus is on getting the work done, not on face time.a bit about us: we are a pre-a-round startup. we have a working product and paying customers, so we're in a good spot financially. we are based in alexandria, va but as mentioned above, working from home is common. we tend to meet up in alexandria once a week.we encourage all who are interested to contact us. you can reach me at: aaron@kingandunion.com", "release notes here:", "i have spent some time using vue.js and django as a backend and i have been pretty satisfied with the results! i will probably try react next just to make sure i am not missing anything. i tried using node as a backend but i couldn't find any framework on the level of django so i went back to it. there are some pretty decent boilerplates already to setup a django/vue website if you look for them.", "django is a fantastic boring[1] tool, and seeing boring updates like this is great.couldn't agree more", "seeking work -- gainesville, fl -- remote/freelancei am an experienced python developer, having used the language in all kinds of areas and situations, including web development (flask, django, pylons, google app engine, etc), gui development, database access (using ms sql server, mysql, and postgres), scripting, backend development, automated testing, web crawling/scraping, data extraction and parsing/etl, etc.i am looking for full-time or part-time work, either one is fine. if you are looking to get a small project done, or you have an existing project where some maintenance work needs to be done (perhaps on a regular basis), then i would love to hear from you.i am also available for technical writing (i kept a programming blog for many years, mostly about python).(for the record: although python is my main programming language, i am also interested in, and have worked with, many other programming languages, including c, d, delphi, go, c#/mono, ruby, ocaml, prolog, lisp, scheme, etc, on windows, mac os x and linux systems. i am also available to work on projects in these languages.)website: zephyrfalcon at gmail.com", "code_removed my wife and i are expecting soon and i'm prepping to be a sahd (stay at home dad). i'd prefer to have some income, however, so i'm looking for part-time remote work. i'd be happy to work for us as well as non-us companies, as long as the work is interesting.i have a good amount of experience with web dev and i could do that quite capably. i'd be excited to work on something in a different capacity - games or cli tools would be amazing - or a different language.", "it is worth noting that pyramid web framework is also awesome to use. i see it as a middle ground between django and flask. the scaffolds make some design decisions for project and you can pick from what you like the most. pyramid allows for extensible applications and never gets in your way.the most critical python infrastructure (pypi) is now built with it, if you haven't tried it give it a shot. it is one of most well thought out frameworks for python in my opinion.i've made a tutorial for it:", "gamer network | games media | brighton, uk | full-time onsite | backend web developer (python) posting: network is searching for backend web developers of all experience levels to join our experienced in-house platform team.the platform team is in the middle of an ambitious project to unify gamer network\u2019s award winning family of games sites on to a single common platform, utilising cutting edge technologies to equip the company with a strong foundation for the future. this is the opportunity for the right candidate to be instrumental in shaping that platform.our sites: eurogamer.net, rockpapershotgun.com, vg247.com, usgamer.net, gamesindustry.biz, egx.net and many more.role benefits: - work on a network of sites that serve billions of pageviews per year. - a relaxed office environment well located near the north laine area of brighton and a short walk to the beach. - passionate colleagues -- across games editorial, events and sales -- who are a pleasure to socialise with outside of the office. - flexible working. - the opportunity to attend company-wide retreats to help run our world-class egx games events in london and birmingham.technologies: python, django, asyncio, node.js, react js, rabbitmq, elasticsearch, web services, service oriented architectures, microservices.we are looking for a candidate that is able to quickly get up to speed with any web technology, but you\u2019ll have an advantage with experience in the technologies listed.email: careers@gamer-network.net", "not op either, but i've been using django rest framework with react.js, and i'm really enjoying it.", "techempower | full stack developer | los angeles area, california (near lax) | onsiteplease apply at is a custom software company. we help our clients understand their needs, plan solutions for them, and build software -- on time and on target. we're looking for good programmers interested in web development. if you're smart, motivated, and you want to work in a supportive environment, then let's talk.about- we're small, with 30 employees working in teams of 1-6. - we're friendly. our office is professional and collegiate, like a computer lab staffed by adults. - we're the authority on web framework performance ( don't expect new hires to have experience with all of these, but you'll learn about them every day.- languages: java, javascript, python, go, c#, ruby, php - web: jersey,.net core, react, django, node.js, go, servlets, jquery - mobile: ios, android, phonegap - data persistence: orm (hibernate, etc.), postgres, mysql, ms sql server, nosql.benefits- flexible schedules - food trucks on tuesday/thursday - lounge with two large tvs and a game collection", "are there any good reads on django for former rails devs? i'm learning django now and interested for the \"translation\".", "django is the only web framework where i see consistently positive discussions about it on hn.bravo django, and congratulations on another release!", "carta (formerly eshares) | onsite | full-time | | nyc - new york, ny, sf - san francisco, pa - palo alto, ca, sea - seattle, wacarta is building the network graph of asset ownership through corporate governance. we help 7,000+ privately and publicly held companies track who owns what. we're growing rapidly and are hiring across the board.---------------------------------------------senior+ full stack engineers---------------------------------------------required:* 4+ years professional software development experiencenice-to-have:* experience with python and django* experience with react* professional experience in finance, banking or exchanges (ach, wires, trading stocks, etc)* experience with financial information exchange (fix) protocol* experience writing unit testsdrop a note to robert.balousek+aug18 [at] carta [dot] com for more info.", "location: venezuelaremote: yeswilling to relocate: yestechnologies: python, django, javascript, html, css, git, docker, herokur\u00e9sum\u00e9/cv: see resume", "not op, but i've also been using django for (more than) my whole career and i use react on the frontend.if you're curious about the frontend path i took, it was roughly:* jquery with no framework* backbone (for a couple years)* backbone + marionette (for a couple more years)* angular (for about a week)* react (for the past few years)", "gambit research ltd ( | london, uk | onsite | \u00a340-80k + bonusgambit research specialises in creating and managing an automated betting service, via research, statistical analysis and the use of complex algorithms. we ingest and organise terabytes of market and event data from more than fifty sources and make the data available to our strategy teams in real time. we care deeply about speed, accuracy and availability.our flagship product, mollybet.com, presents the odds offered by many of the world's largest bookmakers and betting exchanges, and enables clients to bet with multiple operators with a single mouse-click or api request. molly is generally regarded as the best product in its class.we're always looking for clever, pragmatic, and autonomous individuals to join our team. we have a unique culture, where hierarchy and fancy job titles don't matter. instead our team is given the freedom to choose their own tools, work on projects they actually find interesting, and have totally flexible working hours. the technologies our team typically works with includes: linux, docker, kubernetes, ansible, c, c++, java, haskell, julia, go, javascript, angularjs, reactjs, django, postgresql, redis, apache spark, apache kafka, rabbitmq, celery, elasticsearch, logstash, kibana, graphite, sentry, git, and gitlab.we're currently recruiting for:- python developers- erlang developers- javascript (reactjs) developers- linux infrastructure engineers / sresvisit or send your cv over to careers@gambitresearch.com for more information.", "edited | engineering positions | london, uk | onsite | full-timewe\u2019re currently hiring for front-end, back-end, data scientists and devops engineers. our stack is primarily python & javascript, with frameworks like django/flask and react.js/d3. we aren\u2019t afraid to integrate new tech and like to keep exploring what\u2019s out there.we're an established startup, focused on doing important things for retail, the fourth biggest industry in the world, helping them reduce waste and be more efficient. we have a beautiful web app, used everyday by hundreds of people at topshop, saks fifth avenue, gap and more.our engineering team is a group of smart people from really varied backgrounds. we\u2019re solving diverse and interesting problems on a daily basis, like image analysis, big data visualisation and a load of other fun things that come with having a rapidly growing data set. we love good practices like extensive testing and continuous integration, and enjoy giving back to the community, so open source contributions are highly encouraged.our office is large and sociable; people eat lunch together every day and we have drinks and snacks in the office every friday, as well as team days out and all expenses paid trips abroad. there\u2019s a video on our jobs page of our most recent one: of the team has actually found and joined us through \u201cwho\u2019s hiring\u201d, so don't hesitate to get in touch, we're always happy to meet new people!see here for more details about current vacancies and to apply directly online:", "django fan here, if you're trying to use django with react you may be interested in this: wrote it for my own convenience but others may find it useful.", "i have seen a bastardized version of django admin used as a quite sophisticated dashboard. this new addition will make it even easier to hack together things like that in a very short time.", "i've been working with django for almost my whole career, since 1.1. it's a joy to use, and blows any other web framework i've used out of the water when it comes to actually just building stuff.django is a fantastic boring[1] tool, and seeing boring updates like this is great.1:", "read-only model views are a great addition to the django admin -- i've been watching that pr for a long time, glad to see it land.this will make it a lot easier to build internal admin dashboards that are safe to share with non-privileged users like support staff.", "stationhead | multiple positions: ios developer, backend engineer | onsite in brooklyn, ny | full-time | 100k - 140k + equityhi, i\u2019m andrew defranco, a senior engineer at stationhead. we\u2019re building a music-focused social network fighting back against algorithmically generated playlists and soulless corporate radio. we\u2019re creating a democratized platform people connect with their music, their favorite artists, and each other. one of our founders is an actual rockstar, and we have artists and industry executives lauding us as the future of music streaming.we are a small team of 5 developers working collaboratively in a diverse and inclusive workplace, and our dev team has a wide range of backgrounds\u2014including self-taught hackers and bootcamp grads. we're looking for some passionate people to help us grow onsite at our picturesque williamsburg, new york office. you'd be a great fit for our team as a...backend api engineer if you:code_removed contact: andrew@stationhead.comios developer if you:code_removed contact: cody@stationhead.combe sure to tell us your favorite band when you send us an email:)you can see our full job listings at", "congrats django team! this iteration doesn't add too much for my current workings with the framework but it matures it none-the-less. my usual project compositions utilize django, graphql, and react. i'm earnestly watching to hopefully work it's way into the near future releases.", "king & union | front-end developer and python developer | washington, dc | onsite full-timethe point: we are an information security/threat intelligence company. our goal is to make the threat intelligence process run more smoothly and help organizations share threat data better. our web app pulls threat information (both our own and via external apis) into a graph and enables real-time collaboration and sharing of the information on the graph. (if you're aware of the tools, think of combining google docs with a graph editor like maltego and mix in some process automation.)what we're looking for: we're looking for two positions: one a mid/advanced front-end developer for the front end of our web-based application; the other a mid/advanced back-end developer. the front-end is built with react/microcosm/material/vis.js, and it talks to our backend using a mix of rest and websockets. the back-end is built in python with django/django channels. ideally, the ui person we're looking for would be comfortable doing both the react programming side of things as well as the html/css/layout work, and the backend person would be comfortable with some golang/command line work. there would also be some design work as we roll out new features to the site and migrate data graph db in the near future.perks of the job: early round shares, competitive salary, 401k, & healthcare benefits. also, we work from home a lot and our focus is on getting the work done, not on face time.a bit about us: we are a pre-a-round startup. we have a working product and paying customers, so we're in a good spot financially. we are based in alexandria, va but as mentioned above, working from home is common. we tend to meet up in alexandria once a week.we encourage all who are interested to contact us. you can reach me at: aaron@kingandunion.com", "release notes here:", "hey, i am a huge user of apache flink in personal and work projects. skimmed through your readme, but still have the following question.what are the advantages of using faust feature-wise or otherwise? are you guys planning on having feature parity with flink (triggers, evictors, process function equivalent, etc.)? i can definitely see its use in having better compatibility with ml/ai env and the other tools in python toolkit. but specifically regarding ml/ai, i can export those things into the jvm usually. and with regards with flask/django, i can use scala if that seemed like a lot! trust me very excited about this project!", "how does faust work with django? there\u2019s a mention on needing gevent or eventlet to bridge, but nothing about how you\u2019d integrate the two.i\u2019m assuming the entrypoint would need a django.setup, and then you\u2019d import the modules that had the faust tasks? a how-to in the docs would be very useful.i see in one of the other comments about acking due to an exception. this is one of the major issues with celery imo (at least before version 4 before the new setting was added). i\u2019d hope that exception acking would at least be configurable.", "looks similar to the project my team uses for kafka / kinesis stream processing in python / django projects:", "it's helpful feedback, and something we'd love to work towards some day. the short of it is because of citus architecture it does require multiple underlying nodes and there is some overhead that until you get to a larger scale citus doesn't necessarily make sense. if you've only got 10 gb of data a single node instance on rds should suit you just fine.we understand some of the costs of switching and have actively been working to build tools for you to plan to use something like citus, but then migrate when the time comes. libraries like activerecord-multi-tenant or django-multi-tenant ensure you're ready for citus and work perfectly well on a single node postgres database.then when the time comes, which could be at $100 of rds or $500 of rds or larger, we have citus warp [1] that allows you in a fully online way to replicate from rds directly into a citus cluster. using it we've had customers with > 4 tb of data cutover with less than a minute of impact to their database.i know that's not as simple as starting on citus and continuing to scale, so hopefully we can address this better in the future, but for now it's the best answer we have at the moment.[1].", "not having to use systems such as yarn/mesos was a big motivation for us. faust works well with any existing deployment systems (we currently use supervisor with ec2 instances) you may have and definitely made it easy for teams to start building/deploying apps. further since faust is a library, it can work with any existing python projects/tools - we use it both independently and alongside django.", "the macbook pro line was just refreshed 2 weeks ago. i wonder if people were holding off on buying a new machine because of the keyboard issues (if people knew about those) or just the knowledge that new machines were likely to come soon.", "i guess i'll ask the elephant-in-the-room question: what does it do better than django?", "no, i'm not smart, i'm just not ignorant. learning django isn't going to make you learn http spec for instance, you know what i'm saying? the same way, learning angular or vue.js will not make you understand how event bubbling or event delegation works. plenty of \"full stack\" front-end developers out there who know nothing about the dom.", "> oh my goodness, please no.you don't educate developers to good practices just by abstracting the hard things. you don't need to use react/angular/whatever to manage state the right way in a front-end application. you don't need a framework to make code maintainable or testable, or you're just saying front-end developers are so incompetent and undisciplined they need a framework. no they don't, just like one doesn't need a framework like rails or spring or django to write a server app.> react/angular/framework-whatever are glorious angels protecting us from the tyranny of half-baked, poorly thought out approaches to frontend development.no they are not, they are making the developer ignorant of the underlying dom architecture.", "i don't know anything about laravel but i've been working with rails since 2006 and with django since 2016. django has little to do with rails. it's much more similar to java struts from 2005 (when i left it for rails), form objects and template tags among the other nuisances. no xml thanks god, but a weak deployment story (no capistrano or mina, i built my own tool). i'd pick django over struts without thinking (i don't do java anymore, even with morr modern frameworks), but i pick rails over django any time customers give me the choice. django (and struts) are optimized for large projects at the cost of developer time but very few projects grow even to medium sized. django has a decent admin tool. that's the only advantage i can think it has over rails for the typical project i do. i also worked with phoenix (elixir) in the last 12 months. it's kind of midway between rails and django in terms of framework and language complexity.", "unfortunately sails is nowhere near as good as rails. which is kind of strange given the size of the javascript community, and the fact that php has laravel and python has django, both of which are comparable to rails.amusingly given all the php hate, if you want a faster rails-like framework, laravel might be your best bet.", "i won\u2019t dispute that php is an objectively terribly-designed language and has many fundamental and unfixable flaws throughout its implementations and throughout the language itself.i\u2019ll also agree that the popularity argument is completely facile (bots cloning old wp stacks to create seo spam does not make you popular, that spam being responsive does not make you the biggest mobile app language, etc), the people making those arguments know it, and they continue to say these things anyway...but, why do you think it\u2019s impossible to write good software in php? how long has it been since you\u2019ve written something big with it?i would agree that it\u2019s unlikely for a php project to result in good software, especially if it\u2019s big and has had many contributors.but in 2018, php has typing, it has packagist and composer, its community has agreed on a standards org and is rapidly adopting those standards. the ecosystem offers tons of solid open source libs and frameworks. php has all the language constructs you need to organize your code and scale it to multiple devs (namespaces, encapsulation, etc).facebook is still using php as it\u2019s primary language (as hack, which is basically php7 with some differing notation).laravel is directly competing with rails and django and is easily in the same league.so why can\u2019t good (web-based) software be written in php in 2018?", "one point: chalice is non-portable if you outgrow lambda and want to rehost, whereas zappa is just django.", "it really depends on the programming languages that you're comfortable with. the biggest one that i personally would suggest is the.net ecosystem. you can use xamarin to build your mobile apps, asp.net/asp.net core to build your web application/rest api, and a lot of the things that you're looking for can easily be added using nugets (.nets package manager) all by knowing c#. if you like single page applications look into which is a pretty new spa framework (still in early testing/concept) using c#/web assembly on the front end. like i said personally.net is one of my favorite stacks. the other is django which is also a great framework for building web apps/apis. recently i've been playing around with a web ecosystem in golang called buffalo which seems pretty promising if you like go.", "serverless is great, but i am really loving zappa for python flask and django development with lambda and api gateway.deployed our first production tool with it and it's been working great.", "we're using prettier for formatting our javascript and i totally agree with you that the right answer here is to \"stop thinking about formatting\" and just let the tools deal with it.", "i worked at a company in 2002 that used tuplespaces for managing distribution of searches to worker machines. it worked really well! i don't remember us ever having trouble with that part of our system.", "i'm working in a django's queryset port to ruby on rails: really miss django and its way of making queries and i think it could be a good add-on for rails.", "i'm not sure i can give away the sauce yet for the actual ibrary, but the stack it creates is multiple react frontends with a django api only backend that are all deployed to aws. the aws stack consists of rds, lambda functions for backend, s3 for media and react applications. the deployments are automated at literally every step; from aws creation, github configs to repo creation, travisci deployments. and yes! it is intended for dogfooding. the problem came about when i kept having to write very similar infrastructure over and over for new start ups", "i think the excitement around using javascript as a server runtime has peaked. if you search for node/express on google trends, you'll notice the interest leveled off about a year ago. this matches up with my own personal experience - engineers seem more willing to weigh the tradeoffs associated with using javascript on the server vs. using other frameworks like flask, ruby on rails, django, or saas offerings like firebase and google app engine. there's a lot more maturity there than there was a few years ago.i doubt that javascript on the web client is going anywhere. while wasm is interesting, it's still not really ready for prime time. these days if you're a frontend web engineer, you're forced to use javascript or a transpiles-to-javascript language.the interest in javascript as a mobile runtime is still exploding. searches for react native have only been increasing over the years and shows no signs of slowing down. compare this to ios swift, which is trending down in popularity.if you're wondering whether the javascript ecosystem is still a useful one to learn, i wholeheartedly believe it's not going anywhere for the foreseeable future.", "jsonfield is specific to postgresql [1]. if you're working in django and are bound to some other vendor, rdms-agnostic solution is handy.[1]", "come to think of it, several years ago i had to migrate a website from wordpress (i think it was wordpress) to django. the wordpress database schema was nothing but eav tables: every damn thing had all of its attributes listed in a separate table, and object retrieval traversed several tables each time.i suppose this was necessary or at least useful for a general-use web framework like wordpress, where no one knows what kinds of attributes various users will want to create, and therefore table _columns_ are stored as table _data_, and no one ever has to do any migration.but it was dog-slow. the switch to django halved the number of tables in the site, and the whole thing went about three times as fast (plenty of other reasons for that, though).granted, now i have to do django migrations rather than wordpress web-console manipulation, but as someone said in a different post, django migrations aren't that hard these days.", "this is very useful if you want to ship new features without constantly changing db tables by adding new fields to models.example scenario:- year 0: ship v1.0 of software with eav table in place- year 1: a few months later you need to store some extra attributes for a feature, so you change the code to look for these attributes if they are available, and ship updates v1.1, v1.2, v1.2.3-experimenta, etc. none of which require db migrations.like @lsaferite says, this is not super efficient as it requires an extra db lookup when retrieving each object, but hey... features! (and less stressful software updates, since migrations will never break the system)using an eav table also allows you to ship special features only for specific clients (e.g. special integrations that apply to only certain users or custom builds).- year 2: when shipping v2.0 you can convert all the attributes from successful feature experiments into \"real\" model attributes (field) and ship the v2.0 data model, possibly still keeping the eav table around for v2.1, v2.2, etc.i think it's a nice pattern since it puts all the \"db migration risk\" into a few big chunks (less upgrade paths to test), but these days django migrations have gotten so civilized that there is less need for this...", "last year i was looking for a tool where one team could provide chat support to customers - of course the customers should have their own space, in tulip this would be organizations. zulip comes with some good ui ideas for a chat system, the multi-organization experience was not so great.unfortunately it was not possible to have users take part in several organizations - so each support team member would need to have one account in each organization - that gets messy really quick.i do not think that this is a very edgy use case, but it is an indicator of some underlying design limitation. having users limited to 'org' does not seem to make sense - instead it is obvious that one wants to have users and groups and some sane way to fine-tune rw permissions and visibility between groups and objects that groups create.i was wondering if such an obvious limitation in the basic design was somehow induced by the use of django. a programmer with some db design experience would have spotted that quirk in a very early stage. i understand that django traps new users into these kind of constructs with its obscure db layer - this is the microsoft principle - 'hiding complexity' in the end leads to hiding knowledge and makes people produce problematic results.it is a good example of how the use of a framework can destroy a good software idea. hopefully some people with good db knowledge can fork the frontend and build a better backend for zulip - obviously elixir would be a good fit with its soft-realtime channels for this kind of communication software.zulip is still good enough for more simplistic use cases, but you could use any php chat system out there without the incredible installation and maintenance overhead that python brings in - absurd over-complication seems to be another symptom of the framework disease, people just do not seem to know that they are in the 'absurd zone' because they have never seen how it can be done in a much easier way.the tools you use make up your view of the world, so you can not understand what people with other tools are even talking about as long as you do not try them. a good lesson for every developer to stay open-minded and not let productivity pressure eat your learning and research time.", "if you use a framework like laravel it probably covers most things.you could easily write a massively insecure application in core python, but things like zulip use django which shields you from most of it.", "tried to convert some non-techie business types to using zulip. was really difficult to get them to understand streams and threading. perhaps the project just needed more political will and buy-in, but ultimately the instance on do ended up a ghost town. to be fair, these users don't use any of the alternatives, either.i was super excited to find out that it's built using django. it wasn't too hard to get running on vm using the install instructions.edit: one downside with a self-hosted instance and the android app was that you need to send zulip (the company/org) copies of your app secret to enable push notifications. when we were demoing, the way to do this was through an email(!) which seemed poor security, but it seems things have changed since then and there is now a django management command to achieve this.", "are there any on the list here that are best for learning algorithms in a manner similar to a course curriculum and has explanations? i'm asking from a self-taught web dev (django) perspective where i have holes in my knowledge. some algo books i have so far seem too mathy. while not afraid of math, i understand it better when coding them out myself.i wish projecteuler would provide more hints/explanations. adventofcode problems are fun but are random (not like a curriculum). other websites are competitive programming focused which i'm not sure is comp-sci enough (correct me if i'm wrong).", "i'd like to switch to zotero, but i've been using mendeley for a good 5 years, and built a decent workflow around it. i was wondering if anyone here took the leap and made the switch, and could perhaps point out some of the biggest differences between both tools?", "same. they are not only very patient, but provide migration documentation and helpers.it's also amazing how long they stayed at 0.96 despite being very stable. then 1.x for a long time too.it has a cost though: django has a hard time going async since it breaks everything.all in all, the python community has a good culture for this. even the 2 to 3 migration was given more than a decade to proceed.yet, i feel like we still get a lot of complains, while in js or ruby land you can break things regularly and fans scream it's fine.", "brilliant!ckeditor is an highly under-rated drop-in solution for web sites and applications that is lodash of embedded text editing.if your application requires a decent text tool and you aren't using ckeditor you're doin' it wrong...", "paywall at new scientist? weak tea...", "django is my gold standard for this. they have great deprecation policies where they deprecate something in the same release that they add alternatives (allowing for you to fix things up before upgrading django), they document these changes liberally and offer alternatives, make good use of the warnings system (meaning you can run tests in \"deprecated functions not allowed\" mode to catch stuff), and generally are careful.i'm still shocked at the number of projects that make breaking changes without first releasing a \"support both versions\" release that lets people test their changes easily. especially frustrating when you have really basic environment variable renames that could support the deprecated name as a one-liner so easily.give people the space to upgrade please!", "currently 25 myself, though i turn 26 tomorrow (well, 2 and half hours, now). i'm in a job (secondary mathematics teacher) i don't hate, but don't love. really, i wish i could get over my fears. fear of failure, but mostly fear of my student loans. i want to move and work abroad, specifically ireland, and i feel that going back to school would be the best way to get a job (mostly because it would give me time and an easy path to network) since all my technical skills are self-taught (i've built a few websites using python, django/flask, and javascript/varying frameworks as well as some unpublished/unpolished android apps).as i said, i'm afraid of my loans more than anything, and the fact that i'll have to take out more loans to do this, unless i wait even longer... at which point i then worry about age issues with hiring, etc.really, i just needed to vent; definitely not in the best place of my life currently, and maybe someone here will have some good encouragement/advice or be able to at least sympathize.", "not yet. i'm writing a django library for webauthn support (i.e. logins without usernames or passwords), but no browser supports that yet, that i can see. they only support the second-factor mode, not the first-factor.", "i find this pretty nice in d. you add unittest{} blocks which you compile into or out of your binary with a compiler flag. if you add some appropriately formatted comments, ddoc also turns those into docstrings with the test as example usage.", "as others have said, maybe doing tricky cs-heavy coding puzzles and applying to the companies that screen for them is not the way to go. lots of companies just need someone who knows their way around particular language and web framework. how about building out an idea for a website in rails or django and putting it on heroku? go to meetups, show it to people, network, and get advice. not a sure thing but definitely an alternative strategy to consider. best of luck!", "looks very nice, like how it's organized. but the cheatsheets i was intersted in aren't complete. namely, i'd love to use a more complete bulma cheet sheet, likewise, if you ever get around to adding django, that'd be phenomenal too! anyway, great looking site, good job.", "i've completely separated it out. except for some authentication pages, it's all json apis. django project does not have any frontend assets of vue/vuex", "i made this project as a django exercise, so feel free to give comments, suggestions etc.", "very good question! python have a couple of tools to handle concurrency and parallelism, but it's a mess.for i/o bound programs, you can use threading (in stdlib). for cpu bound, you can use multiprocessing (also in stdlib). but these have huge overhead, (e.g starting a python thread costs 32kb memory minimum.) and there are multiple solutions in the stdlib like threadpoolexecutor and processpoolexecutor in concurrent.futures beside the threading and multiprocessing modules...if you want to write async code, there is tornado with callbacks, tornado with the new async stuff, asyncio (tulip for python2), the new async/await from 3.5 which is very immature. the async part of the ecosystem is like a totally separate whole new world, you can't really mix and match or pick parts from the other, however, there are brave folks like andrew godwin how tries to make django async with not moderate success.for web frameworks, there are a ton of servers which might fit you, but they are mostly very complex to set up or reason about like greenlets, pre-forked web servers and stuff.i have 5 years experience with python, using it every day and once i tried to write a custom ssh server and it took 1-2 weeks to grasp tornado fully, then i tried the same with go and with learning the language itself, it took me about 2 weekends and my server was up and running!tl;dr: you can write concurrent code with python but it's a mess and you will probably have a hard time.", "i have never got serious about python until very recently(i mean about one week), the more i dive into it the more i am convinced yes python is the future in the sense it does the below:code_removed the only missing area i can see, is that it is not designed for html/css/js frontend, so you have to use javascript there.yes, python could be the future of programming.", "react + django hosted on heroku. why? because i'm most the productive with it.", "i wish there was more information out there about what some more people are doing with vuex that wasn't trivial \"how to put api data in store\". so, thanks for your contribution to putting a bit more advanced vuex tips out there. but, i'm mostly happy with vuex (been using it since v1), and v2 actually fixed 90% of my annoyances with using it. i essentially use just use namespaced modules as database tables (so modules just store specific types of records), or a simple k-v module that will get used for components that need one for simple caching, and sometimes as a poor mans genserver as a way to track shared state for multiple short-lived components. i try to keep any data more than a few children need in it, so i don't have to keep passing data all around. really if the data isn't specific to a component (e.g. is this button showing?) i'll usually put it in vuex somewhere.however, one thing i think is being heavily underutilized is the plugin api. i got sick of writing boilerplate code for different api endpoints/modules, i thought i'd give making a plugin a try to take care of it for me, and now i'm super annoyed i had been just ignoring it before. i was able to get rid of all my boilerplate code, now if i need to add a new endpoint/module i just have to pass the type name and the root endpoint it can be reached at, and because i'm following the jsonapi spec, the responses to things are then able to find the rest of the way around the api programmatically through actions. i then setup a few proxy's, so that when you get a record from the store, you can fetch relations data from it's module by just accessing it's name like you would on a rails/django setup `record.child` will lookup the childs module in the store and pull fetch it if it has been loaded. now that i don't have to put up with my biggest annoyance, there really isn't anything i'm particularly unhappy with about using it.but, it did get me thinking about what kinda cool (if only as a proof-of-concept) things you could make with the plugin api. so, to get a little more familiar with it, i recently spent a day or so making a generic queue plugin that will create arbitrary queue modules, as well a prioritized queues, and uses proxy's to provide an api for easily working with them. i don't see any real need or use cases for it, except for why i made it, which is my next poc plugin -- a background processor (e.g. sidekiq/celery) using webworkers and vuex as the queue/bus -- and even then that's not going to particularly useful for most people. it just seems like a neat idea to play with.my queue plugin in is (as of now) on github[1] if you want to take a look for whatever reason. the documentation is pretty sparse, and likely not 100% accurate, but it was working the last time i was working on it (also the first time... one of these days).i also plan to eventually rip the jsonapi plugin i made out of the app and open source it too, as i could see a few people getting some use out of it.[1]", "anyone knows of similar kits/packages to laravel (php) and railskits (ror)?something that will let you focus on creating the part that's unique to your project rather than having to build everything (or a lot) from scratch? (rails/django/etc are not enough).", "is there a guide on the internet that would help me figure out how to use vue with django? i tried a couple last month but they were poorly structured or didn't explain enough about what they were doing, and since i'm not great at javascript i gave up..", "python, django/wagtailcms, react+redux, redis and redisq, postgres, kafka, docker + compose for local dev. visual studio code.tempted to learn a 2nd language well, thinking go but curious about the experience of kotlin + intellij", "i haven't done an official count (comments plus the site) but a very strong showing for full stack rails or django, and when people do stick in a front end it is usually react or vue.", "django, postgres rds on elastic beanstalk, with some sns use.vue+vuex on the front end.gitlab ci/cd for deploymentextremely fast dev/deployment turnaround time with django and beanstalk.vue/vuex is simple enough for me to understand and build spa", "my pet peeve with jedi is, that it doesn't support autocompletion for type libraries, that are not parsable python code. for example, anything from gi.repository (i.e. entire gtk) is then without autocomplete.jetbrains ides do support it: you have to manually generate the symbol cache for the first time, but the ide knows your intent and maintains it for you, and for you as the user, autocomplete just works.another thing that jetbrains has better, is weighing the importance of symbols that are offered: open a random django project, try to define a model and see, where the autocomplete makes better sense.", "have you tried graphene? [1] i haven't, but have read its documentation a lot, and it looks quite powerful.i'm not happy that it introduces yet another data object library, but at least it's possible to build plugins for existing ones -- sqlalchemy and django are already there, and it would be nice to add ones for attrs, schematics and of course the 3.7 native data classes.regarding the popularity of rest -- even if it wasn't intended for crud originally, it fits perfectly with that paradigm, and i think this is why many people were able to implement it easily when they started using it.[1]", "in my opinion node is better if you have experience, express is so bare ones that you are going to write almost all of you functionalities.i am also kind of a beginner but i could not stand the way the node ecosystem is spread apart. do not let others fool you about how npm is a chaos. the problem is the bare boned node ecosystem.i literally spend hours reading the documentation of passport js for account creation because it did not make sense to me, it implied that you knew how to do some validation, then i had to choose the hashing algorithm of storing passwords, setup the email verification system and even roles and i was about to implement everything by hand. when read about other frameworks like hapi and feathers. checked them did not really offered that much and ditched js for backed for good.if i want to do everything from ground i would better choose phoenix (erlang web framework) at least app would be real multithreaded by default.i am really frustrated but do not get me wrong node is beautiful, middleware idea is incredible but you are alone. but there is not even a way to exclude middleware from routes unless you do a hack as a middleware.in my opinion node has advanced greatly by the advancing of js itself, but once you start to program you are kind of alone. you are better using rails (not my favorite does a lot of magic) or some python tech (i am using django btw).", "last year around this time i tried to implement a bare bones graqhql api with django. i kept having to write boilerplate code to get it working.i quickly learned why django rest framework is the defacto standard... the tooling is just uncomparibly better", "i've tried django! it really does lots of batteries included. it was going to be my go-to if i wasn't going no-code. thanks!", "this is a project that i've been working on as a side project for the past 4 months. hedphones is using django and bulma along with the spotify api. it's been an idea rolling around in my head for a while now and i'm excited to finally get it out there. i've opened space for 50 beta testers.i wrote a blog post to explain what hedphones is all about: if you want a quick rundown, you can read the faq: you can skip all that and go straight to the beta signup form: me know what you think!", "nick schrock here, one of the graphql co-creators. i agree with a lot of the criticism in terms of the difficulty of implementing graphql backends. i think there's a big opportunity for folks to build vertically integrated toolkits that deal with n+1 issues, integrate dataloader natively and so forth. good versions of these would deal with a lot of issues described here in greenfield graphql backends. i talked about this at the graphql europe keynote last month ( greenfield implements are typically stacked on orms like django and ror, and the impedance mismatch is real. personally i abide by the dictum that orms are \"vietnam of computer programming\" and should be avoided at all costs for anything that will grow beyond a small app. graphql was not originally implemented on top of an orm, but instead an object model built on key-value + edge store internal to facebook.in terms of other criticisms in this thread:1) exceptions: the default behavior in graphql-js (mimicked in other language implementations) of swallowing native exceptions by default was probably a mistake in hindsight. whenever i've played with graphql using different toolsets the first thing i change is to add a wrapper function which checks for errors and then rethrows the initial exception that caused the graphql error for use in testing and ci/cd contexts.2. caching: personally i've always been confused about the concern with leveraging caching. while a clever hack, with any real app with any sort of even mildly dynamic behavior you don't want to do this. staleness will be interpreted, rightly, as bugs by your users. if you want to replicate the behavior the most straightforward way would be to use persisted queries (described here combined with http gets. with persisted queries you can encode the entire request in the query string, which should get you the caching you want.3. docs: quite confused about this one. while particular implementations of graphql can be problematic the documentation of the core language (which i am not responsible for) is superb. see and", "ruby has multi line lambdas and code blocks. python doesn't. however we can't pass a function as argument (actually a method but it could be a def in a module). we can pass a symbol with the name of the fuction. we can pass the function in python.i write very few classes in python. i tend to write modules and import them. it's what i do in elixir, obviously.however i don't write much ruby code outside rails and rails is definitely object oriented and directs the developer to write oo code. instead the most popular web framework for python, django, is almost anarchy, anything will do.", "another django/graphene shop here. i'm really enjoying the transition. my one complaint is with deep queries. if the query asks for a very nested objects, the amount of db fetches can become large and then you get a performance hit. with rest you generally know the performance of your queries since the schema is static. how do people solve the n + 1 issue here?", "yes, our team has migrated to graphql and it has been great, both on the front and backend.we have a django app on the backend and have used django rest framework for our rest api. that was a great experience, but had some limitations. we've written our new graphql api with the help of graphene and it has been awesome. everything is very declarative and exploring the api schema couldn't be easier using graphiql.implementing it on the frontend has been great too. yes, you do have to specify what fields you want, but having complete control is worth the extra boilerplate. i'd recommend it heartily.", "python (django) support is good (appart from subscription), but not as out of the box as nodejs indeed", "i'd like to add that correctly designed resolvers allow you: - to control very easily who can fetch what where it's fetched (permissions) - to fetch nested data when you need it without writing serializers - to help your frontend team find what they are looking for without asking the backend team everytime - mutations are a huge plus when it comes to standardization of your api toofyi we're using it in production over a django backend (which comes with some drawbacks, since subscriptions == pushed updates are not perfectly implemented) with our react/apollo apps (web and native) and in my opinion the overhead lies surprisingly more in the frontend side (writing data connectors is longer, but way more explicit, than using rest queries returning json)than on the backend (where you just declare resolvers, a thing you don't even need to do in nodejs) and handle permissions.", "mostly, note: i'm using python/django/graphene server side and apollo client side.i love how flexible it is for client developers and because the great client side libraries it helps to eliminate a ton of boiler plate code on the client side.my biggest complaint has been \"lost\" exceptions and caching.because it's possible for an exception to be thrown server side on one field while the other ones succeed i've been plagued with hard to monitor/find errors. i ended up writing a shim to parse the response in an attempt to get more insight into #errors / fields (this has also been really helpful for monitoring slow queries in new relic since all requests go to the same endpoint which breaks a ton of apm monitoring).my other issue has been around caching, in apollo there are ways to say \"don't use the cache for this request\", but it's not to give an object a cache ttl. my app allows users to search for events that are happening near them right now, and i've run into several issues where apollo decided that an event from yesterday should be added to a result. it happened frequently enough even with queries that included times as an argument that i ended up basically implementing a \"middleware\" between what apollo gives back and the component, which felt really ugly.", "wouldn't just a discourse forum suffice? or a phpbb instanceit would be a good way starting off, a subreddit would work too. might as well start building the community todaythen you can build whatever stack you want for more fine tuned features (django, rails, etc)", "flask is great, but as this is his first web project he wont have any own opinions. therefore django might be the better choice as he has all the batteries (orm, backend dashboard, user registration,...) already included.", "can not recommend flask enough, just for sheer simplicity. really puts the fun back into making a web app and getting that mvp deployed.flask's eco-system is great, but not as extensive as django's imo. and flask itself is definitely more bare-bones, which means there's less crud, but sometimes that crud comes in handy.flask and django share quite a few similarities though. so worst case if you find yourself wanting things from django's eco-system, you can go from flask to django without too much hassle (relatively speaking). don't know why you would, or expect you will, but nice to know it wouldn't require a full re-write.", "if i were in your position, i'd choose django or laravel. i'm really not a fan of php but laravel has a lot of dummy proof features and it's super fast and easy to get pretty serious projects built.django and laravel both have very excellent, detailed documentation as well.good luck! sounds like a fun project. i hope you post it on here so i can check it out when it's done!", "it always puzzled me why so many perl devs moved to python when ruby is a much closer fit. sysadmin tools can't be the reason because ruby led the way with chef and puppet. perl was my first real programming language back in 2002 and \"programming perl\" was my bible. larry wall is a wonderful gentle giant of a leader but unfortunately the community imploded over never-ending debates about oop and mop then there was the 15-year perl 6 energy drain. if perl had established a web framework to compete with rails and django it might have survived but catalyst is an ugly beast and mojolicious somehow never gained the momentum required despite being a much better option for web development.", "good timing, i am using my own ai (keras + tensorflow) stack to predict in-game hackers on ark survival evolved with an aws ec2 instance. here's some background on the fully open-sourced stack: with docs i would love some players, but i'm still load testing how many players the game server can use + make real time predictions without impacting the game. reach out if you want to try it out!", "this is an amazing telescope and the work they are doing with it is equally amazing, but that article blows goats, from the point where they suggest the telescope provides radio wavelengths by which the imaging is performed, to the point where they conflate distance to remote objects with simple resolution of the frustrum, at the conclusion of the article.disclaimer: i am an amateur armchair astronomer/astrophysicist and i know better than that drivel.", "hrm, really cool but what is the licensing?", "meh.", "this is a very vertical search algorithm; it is useful only for indexing and searching cities as shown.", "i did that route.my experience in my environment:sysadmin/support is a very different gang from the dev group.so i started with simple scripts (before cfengine/puppet).later i did some coding to hibernate machines using mfc. after i started using python to generate inventories and to admin the whole university i used to work.then the first site on django. after another one in django.later a project in django.then some consulting.and then a big one project in django being consumed for a lot of customers.now if i get my code from firsts projects i think:\"serious.. this code sucks look this...\"my suggestion:1. accept that your code will be bad; 2. accept that it will not be \"smart\"; 3. once people ask for more features you will understand \"why\" there are design patterns and best practices; 4. once you are making money, you will understand the need for git, ci/ cd, testing.sure you can learn about it first, but you really understand when you are on the field battle.so today i have 2 cvs one for sysadmin/devops and other for developer as people have a hard time understanding that i can do both very well.e.g., today i finished a feature for a customer crm python system, and later i set up an asterisk pbx on cloud and a postfix setup.keep learning, practicing, and it will compound over yearsps. by doing well i mean: i am not updating my linkedin for 3 years as someone may do a tempting offer... i admit i afraid of the right proposal and say goodbye to some customers.", "google keep", "i work with a django app on postgres, and i'm not sure how i would migrate that to graphql. how things play out in terms of django specific tables? what about relationships between tables? we mostly use the django app to expose rest apis, which deal with making complex queries using querysets to postgres. moving this to graphql mean that all the business logic that sits on the rest apis need to be moved to the frontend?", "openerp is not django based iirc, but they basically thought the same thing and went at it with some good success.", "that is one hell of a django app.", "i have not yet seen a sap software that could not be replaced with a homemade django/rails web app (90% crud) and some external api integrations to other services that may exist in the company such hr, invoicing etc.of course, at the fraction of the the cost of the sap solution.", "look at all what django does.it has one dependancy.no, there are 2 reasons for this dependency creep:- the fact js has a so few features and such a little stdlib. so everyone has to rewrite even basic stuff.- the community culture toward stability, maintenance and future proofing is almost inexistent in js.too many js devs have only ever coded in js. this give them have a very twisted, unbalanced view of programming.", "to be honest it is usually what you mentioned and if any obvious indexes were missed on the table.after that it is generally a more formal investigation. recently a coworker massively (like more than 100x) improved a vendor's product when he found, using an automated tool, that there was a huge area for improvement in the generation of links on a particular page. you might have seen syntax likecode_removed in djangoorcode_removed in mvc. well this app had to do something similar, but at the scale it was now doing it, its analogous method was far too slow and was really taking up the most time on the page.", "plotly's got one great feature: dash apps, that's it.it's true bokeh can take a bit of work to get it to look like plotly, but i don't need to pay for it.i think that's a more 'scalable' feature of bokeh.it's just too damn bad that bokeh doesn't have something like dash. i've tried holoviews, bokeh apps, they just need so much more work. and its integration with flask/django is just not there yet.hopefully future versions of bokeh will get this fixed.", "i've been using echo[0] and sqlx[1]. i like it because it's performant and idiomatic.it is minimalist compared to rails or django, but appropriately designed for the go world where you roll your own on top of tightly scoped libraries.[0]:", "nobody has mentioned beego [1]. you can write a decent web-application using core golang language. yet, coding large applications require many features, like session handling, db connection, and so on. instead of composing these from independent sources, you can use beego which comes bundled with all of these.if you are aware of python ecosystem beego is like django (though beego doesn't have an admin module).i have been using beego for couple of years now for my personal projects. i'm happy with it. it has almost all the features required for a web-application framework. it has good documentation too.just yesterday i released a side-project sheet2buffer[2], coded in beego as backend and react as front-end.if you are interested, i also wrote an introductory post about beego[3].[1]: [2]: [3]:", "web frameworks aside what's really missing an orm. i'll get excoriated for even suggesting that i shouldn't just use sqlx or whatever but using django/python makes me hate using go for web backends.", "i've been using go for quite a long time (since before the 1.0 release); i've never heard of iris before.it looks interesting, but appears to be an \"all in\" approach. i gather that folks who like django may like this a lot, but for me personally it rubs me the wrong way.this may be due to my \"anti-framework\" mindset, but in my experience a lot of other go developers have this same mindset. ymmv", "most important issues in any society which is going back and forth between 2 parties are subjective, gun control, abortion, illegal aliens etc. each party tries to insults other party's stance on very complicated subjective feelings, or at least that's what i see on news networks and late night shows(which are mostly liberal).", "fanaticism - subjective word associated with being in the wrong, and can be subjectively used to accuse the other party when they don't agree with your groups solutions on most important issues.ny times selling liberalism is akin to google giving away \"free\" os.", "> why do you feel confident you can easily find other remote jobs with the same pay / benefits / work responsibilities / career opportunities / etc., if your current role goes bad?i'm not the parent poster, but having moved to a rural area in january i've already experienced this. i spent a couple of days identifying target companies, and another couple getting my resume together and writing decent cover letters. after three weeks i was well into the interview process with five companies, and had an acceptable offer in hand after six.> maybe if you\u2019re willing to compromise on everything else, then you can quickly switch to another remote job in an emergency.that's part of the \"trick\" here - you have to be proactive in making sure you don't encounter an \"emergency\" like that. my goal is to have six months' of expenses in accessible cash, so if i did have to find other employment i'd not be desperate.my recent layoff came at the worst possible time for me; i'd just drained my savings to come up with a down payment on a house and move. because of this, i had to use a bit of credit to keep from having a major disruption for my wife and kids - but it was a \"worst case situation\" for which i had explicitly planned. it sucked but it was doable, and we went into it knowing exactly how long we could hold out and what actions we'd have to take if things didn't go the way we wanted.expenses living in a rural area a much lower than a city. for instance - my two-bedroom apartment in charlottesville, va was $1,860/month. my five-bedroom home on a half acre in harrison, ar is $850/month on a 30-year fixed-rate mortgage. my utilities are less than half of what they were. the only exception is internet access, which was included in my rent in charlottesville and for which i now pay $180/month.food... a gallon of milk here is $1.85. our groceries are less than half what they were.> but it seems very suspect to set your life up with that risk and the possible requirement of that severe sort of compromise if you\u2019re very desperate for a single specific perk.there is risk in anything.i wouldn't consider remote working a \"perk\" for me. it's merely a job requirement. does it limit my options? sure! so does my not wanting to work certain technologies, or on certain types of teams, or for companies in certain industries. i find that requiring remote work is less limiting than many of the other requirements i have for a job.finally, i'll say that it has been my experience that getting a remote job is much easier when you already have a remote job. i've found that it mirrors my experience with getting a job as a developer at all - i tried for a couple of years to get my first \"development\" job and failed. what i did manage to get was a position as \"intranet administrator\" that was mostly just managing policy changes and updating a static website. after working there for a while and sharing some utilities i'd written for my own use, suddenly other departments wanted to hire me for other jobs where they needed a \"tech person\". eventually i ended up writing an \"enterprise reporting platform\" (which was really just a simple django website with ad integration that generated some simple charts from sql queries), which in turn finally gave me a title that sounded sufficiently like a developer (\"sr. analyst, systems & performance support\") that it was accepted implicitly by my next employer.at the end of the day - yeah, plan for the risk, but it's a risk that's both smaller and easier to offset through planning than you might think.", "java itself is pretty fast and wonderful, at-least the modern versions. it\u2019s the libraries and the ecosystem. java folks typically over engineered things with layers and layers of abstraction in the name of \u201centerprise\u201d.writing a web app in django/express vs tomcat/jboss you\u2019d feel the pain. it would take forever to start, chew an insane amount of memory and nodejs runs circles around it.there aren\u2019t that many things where java is a great usecase. if you want serious perf, then you\u2019d go c/c++/rust. perf with nicer abstractions would be go. dynamic languages? javascript and python.yes android uses java heavily but even google got sued left and right by google. oracle simply gives java a really bad rep.java is still heavily used by banks and enterprisy companies but i\u2019d bet c# has equal penetration. c# is just designed much nicer, it\u2019s like java but a great user experience and similar perf. with.net being os, i\u2019d bet on c# to have bright future. ms invests a lot more into it than oracle into java.so to answer your question if you should learn java. absolutely go build a simple android app or a simple cli app. i wouldn\u2019t count on it being the only tool in the toolbox.if you have limited time and you want to make a choice on what to learn. i\u2019d say javascript and python. those are in good demand nowadays.", "> it's a lot harder to write \"nasty\" sql than \"nasty\" jsthat may be true (though, when it comes to dealing with more complex reporting functions and per-database-implementation differences/quirks outside of the realm of ansi sql it may not be).however, it misses the point. most engineers that struggle with sql struggle with it because it's hidden from them partially (they're composing queries from snippets/query builders that come from other code, and never get to see the schema directly since it's hidden behind migrators and management interfaces) or completely (orms). because the actual queries being run on actual schemas are less obvious, people do the wrong thing a lot.that's not to say that abstractions on top of sql are always bad--perhaps they're over/mis-used, but having worked on massive codebases where every dev's interaction with the database was \"write a query in text or with a select().where().from()-type thin wrapper\" and codebases that were 100% django orm, i can say with confidence that neither approach scales well absent big investments in correctness and rdbms education.", ">you know what's really slow? creating joins in code.ahh, you have combined two separate points into a new point that i didn't make and took it out of context. as i mentioned, i was writing queries for analytics software. this software needed fresh data once per day. there was no requirement for speed. i was referring to speed of development, not speed of the query.as for the other point, yes joins are slow, and yes, multiple queries can scale better, even if they are not the fastest when you time them in an isolated one-off scenario. multiple queries are simpler in code and scale better. nobody is using joins at scale and every large company that started their scaling journey in a sql database started by performing multiple queries on a distributed database.then there is the argument that \"well you won't be operating at that scale\". then in that case, you don't have to worry about the minute differences between a single network call and multiple calls. there are so many approaches and realities that make your argument just a theoretical argument rather than a practical one. there is caching, denormalizing, and then there is the fact that people use a vast array of languages from slow as hell like python and upwards.as for joins in code in particular, they are slower than in a database that is often written in c++ sure. it depends on the specific situation as to how fast things need to be. did you know that many orms join in code? this is because of all the redundant data that the join creates. so you have to factor in whether the larger amount of data is slower to send than smaller data in multiple network calls.from django:however, to avoid the much larger result set that would result from joining across a \u2018many\u2019 relationship, select_related is limited to single-valued relationships - foreign key and one-to-one.prefetch_related, on the other hand, does a separate lookup for each relationship, and does the \u2018joining\u2019 in python.", "you must be independently wealthy to not worry about a $150k+ outlay for school.i obtained a cs degree, worked in tech for several years, and decided to attend law school to study ip like you\u2019re intending. i attended one of best schools for ip, and worked writing patents. despite a great law firm and clients, the work was not stimulating and a net drain on society. i left to start my own company in tech again.my work as a core django developer during school was more fulfilling intellectually and professionally.studying law will not bring the prestige you\u2019re seeking. i didn\u2019t listen to the lawyers who told me that either.", "forth reborn?", "they actively reject ideas like package signing.when i was django's release manager, i started our tradition of ensuring that every single package we put on pypi was also accompanied by us publishing signed checksums of the file.so. django signs its packages. now, what good does that do you? how do you know my key (or, these days, tim's or carlton's keys, since they roll the releases) is authorized to release django?\"just support package signing\" is one of those things that sounds super easy. and in fact, pypi technically supports it -- you can upload a detached signature along with your package!but you don't \"just\" support signing. signatures, absent a gigantic infrastructure of key management, indicating whose keys are trusted for what purposes and by whom, are basically useless. so when someone says \"just support package signing\", they don't really mean \"just let us upload signatures!\" what they really mean is \"develop and maintain that web-of-trust infrastructure for me\", but they don't like to acknowledge that's what the request really is.why are there no incidents where installing an apt-get package stole credentialsbecause debian grants package-releasing privileges only to a tiny group of people who are vetted before they get to release. systems like npm and pypi, by design, let anyone who wants to sign up and start publishing packages. that's a deliberate tradeoff, and one that comes with both risk (you'll get some bad actors) and reward (you'll get a larger and richer ecosystem of things being published).i eagerly await your next set of soundbites that have come up, and been rebutted, in every single discussion of npm and pypi that's come up on hn in the past five years.", "> exactly. docker files are worse than war files in pretty much every way.they focus at far too low level a problem.> the problem is that testing isn't cheap. this is where microservices and containers and the all this craziness will fall down. now you've got dozens and dozens of applications all running with their own application servers, jdbc drivers, and their own jdk. this is a combinatoric explosion in your testing surface.i fail to see how this more difficult from 95% of existing enterprise systems that run various jdk versions, various websphere versions, jdbc drivers etc.the difference with containers is that vendoring your dependencies makes all that explicit. whether you choose to stay on old versions is a mistake you can still make (and will make if you leave container creation and patching in the hands of dev teams).that said, since when does any organization build horizontal testing libraries, like, \"test x version of jdbc\", so they can standardize on a single driver across all projects? it's never done. projects are all over the place with their dependencies unless there is institutionalized forcing through maven repos or what not to block the download of old/insecure versions.there is no combinatorial problem here, each test suite needs to unit test the individual service and then test the api contract of the service. if you let your dependencies decay you're accepting major security and maintenance risk, but you were in the war file world too.> the true value of the application server approach is that it forced applications to conform to a clear contract. once your application conformed to this contract it could be thrown over the wall into a full-time ops organization that could transparently deploy, monitor and manage the app.lol, i really think you're exaggerating. i've worked with weblogic, websphere, iis, jboss, tomcat, django, rails, node, you name it over the years, and while some orgs got close in the java world, this was mostly a pipe dream that never happened in any cost effective manner as a standard practice.> the container madness will come to an end. people will realize that giving developers the keys to the kingdom and total freedom over their application is a terrible idea. (and smart developers don't want total freedom.)this i agree with. it's all far too low level.this really was docker, inc.'s fault imo, their marketing message was to empower developers to get ops out of the way by building these containers that would magically just be run as opaque lego blocks. that was the hype everyone on hn was drooling over in 2013. turns out it's not quite that simple.", "we run django with django-rest-framework in production to provide our frontend app with the json api it needs -- it has some gotchas and isn't perfect, but is a treat to work with when you want to split time between front and back work.", "django went through this years ago; jacob and adrian, who were the \"bdfls\" of the project at the start, stepped down.the current governance model is mostly around consensus on the dev list. there's a \"technical board\" elected every release cycle from among the committers, to act as a tie-breaker when needed, and with veto power over deps (django's equivalent of peps) and adding new committers. i don't know of a case where that veto power has ever been exercised, fwiw.", "yep. i got into it a week or so after ditching fb.the mastodon.social instance is in ten or twelve different languages, is noisy, organic, and actually has a pretty good vibe about it.", "o.o", "when i first started getting into programming (was not a cs major in college) everybody said to start learning python first.i started digging in and a lot of concepts were easy to grasp and i learned quite a bit until i started doing front-end work and i stopped working with it.this year, my buddy who got me into it originally, suggested i look at django and i've been having fun with that in the past few months. made me think about picking python back up and working with it again as the front-end scene is just so crazy right now.", "inspired by i'm trying to figure out what gets me most excited about what dirt and tcrs could enable.for me, it's actually not data easily verifiable as true or false, but more for \"wisdom of the crowds\" type of knowledge\u2014things that you couldn't put up on a source like wikipedia. these tend to be lists or recommendations that contain some subjectivity, but also tend to coalesce around a mostly-agreed upon set of answers from a trusted set of sources.in the centralized world, we usually rely upon institutions like the michelin guide to develop a fair set of criteria, but we ultimately as end users trust that institution's \"objectivity\" and judge whether we think that list is valuable. sometimes when i research, i informally end up creating lists of lists and combining them ad-hoc if i can't tell which of them is more trusted. these lists also tend to end up being static or only updated once or twice a year and can fall horribly out of date.i think tcr incentives could potentially be really interesting as an alternative to these lists which rely on the institution's brand. for example, i think quora answer wikis (like this one: and general consensus for recommendations in forums for questions like \"which cities should i visit in thailand if i'm looking for nightlife and places to hike?\" or \"which rest framework library should i use for a django project?\" it'd be amazing if dirt could balance the incentives for community members to contribute to this type of data and keep them as living lists, with all changes and updates maintained through a community with the right checks and balances and incentives.from the medium post: >if the data is correct, it is freely shared. if the data is incorrect, anyone can challenge the data and earn tokens for identifying these inaccurate facts. our protocol and platform makes it economically irrational for misinformation to persist in a data set.i think the more interesting data would be data that's on a gray scale, e.g. using the above coffee shop in san francisco example, obviously if john doe tries to get his burger joint on the list as a growth hack even though they don't serve coffee, that should easily be verified as misinformation. but what if a coffee shop just closed for business, or moved to mill valley but thinks they should still be on the list, or just switched beans and raised the prices so that everyone agrees that it no longer deserves to be on the list?disclaimer: i know most of the team working on dirt, and i don't know very much about tcrs.", "i was thinking about python3/perl6 as he was talking and glad when he brought it up.it's important to note, the world has transitioned to python3. django removed the py2 comparability imports a while ago and the python3 wall of superpowers stopped updating a while back when it was over 90% green.for most devs, all new python code that's green field is py3. there is still a lot of py2, yes.. a lot in commercial/closed apps that have embed python in there, along with scientific applications. but i think that will change eventually too.perl6 is the opposite end of the spectrum. massive perl codebases will always be perl5. i don't see any enterprise people going to perl6. if you're like booking.com and still using perl for everything, you code is probably so decrepit, old and lacking meaningful testing you should just burn your entire company to the ground so your devs are no longer in miserable agony.he has a point with python3: it is a large community. even with that large community, and even with how small many of the syntax changes were, it took a long time to get to py3! scala is nowhere near as big.scala needs to move carefully with scala3, so that scala3 is more like python3 and doesn't end up like perl6.", "as someone who has done a lot of data processing in journalism, i've found the engineering issues aren't usually about scale, but involve the harder problems around data cleaning/wrangling/updating. particularly interoperability with opaque government systems, and transformation/delivery to a variety of users, including ones with a high variation in technical skill (i.e. journalists), and an extremely picky tolerance for public-facing errors in the finished product.i started propublica's dollars for docs [0], and the initial project involved <1m rows. gathering the data involved writing scrapers for more than a dozen independent sources (i.e. drug companies) using whatever format they felt like publishing (html, pdf, flash applet). this data had to be extracted and collated without error for the public-facing website, as mistakenly listing a doctor had a very high chance of legal action. hardest part by far was distributing the data and coordinating the research among reporters and interns internally, and also with about 10 different newsrooms. i had to work with outside investigative journalists who, when emailed a csv text file, thought i had attached a broken excel file.today, the d4d has millions of records, and the government now its own website [1] for the official dissemination of the standardized data. i have a few shell scripts that can download the official raw data -- about ~30gb of text when unzipped -- and import it into a sqlite db in about 20 minutes. the data for the first d4d investigation probably could've fit in a single google sheet, but it still took months to properly wrangle. but the computational bottleneck wasn't the size of data.one of other tricky issues is that data management isn't easy in a newsroom. devops is not only not a traditional priority, but anyone working with data has to do it fairly fast, and they have to move on almost immediately to another project/domain when done. there's not a lot of incentive or resources to get past a collection of hacky scripts, so it's really cool (to several-years-ago me) to see a guide about how to get things started in a more proper, maintainable way.[0] for a more technical detailed example of newsroom data issues, check out adrian holovaty's (creator of django) 3-part essay, \"sane data updates are harder than you think\", which details the etl process for chicago crime data: a great write-up by jeremy merrill, who helped overhaul the d4d project after i left. unlike me, jeremy was a proper engineer:", "it's a reference to the sci-fi book the three body problem by liu cixin[1]. in that ta mysterious game about an alien planet where its population can be dehydrated to survive harsh conditions which could last millenia, and then re-hydrated when the conditions are right.although i think the terms hydrate-dehydrate are not unheard of in tech stacks for example in a django rest framework called tastypie to denote serialization-deserialization of data.[1]", "n-dimension.com | full stack / front-end developer | richmond hill / toronto area | full-timewant to help contribute to the cyber security of north american critical infrastructure?n-dimension is a team of analysts and engineers working to secure it and ot networks, with a subscription managed security product. we need help turning sensor telemetry in to actionable intelligence in real time, and building research tools for our analysts and customers' teams to hunt and eliminate threats.our client product is built on python (django) and javascript (a few light frameworks, with new development in react). our tooling includes docker, ansible, aws, celery, rabbitmq, redis, bamboo, and more. we have", "holy cow! there's a whole category for them. how did i miss that?", "i agree about the search engine.i'm a big fan of dash, but dash is currently built around documentation rather than cheat sheets. if someone loaded up dash with a bunch of cheat sheets, that would be really handy.", "oh, thanks for mentioning this. this phrasing is mostly a rookie developer trap!we're all so used to iso standards that we assume they are politically neutral. that's why everyone starts their weekend project with the iso 3166 country list that includes \"taiwan, province of china\" [1] [2] [3].this list is crap. it follows un country names, and the un is not a neutral entity. it isn't even logical that \"hong kong\" can stand on its own in the list, but taiwan has to be suffixed with \"province of china\". as far as i know, no major website uses this list unmodified. (the airlines that recently bowed to prc pressure now call it \"taiwan, china\").if you see the \"province of china\" label on a website, you should refer its developer to the unicode cldr data: cldr data is the actual industry standard, and tries to be as neutral as possible.[1] [2] [3]", "the same project using an sms modem, kannel and django and a repository of modems that can send sms on linux is here:p", "yeah, no.dildos have been around for a very, very long time.", "junior full stack web dev looking for full time in chicago at a software company with a team >= 5 people. have about 1 year professional experience, many years of hobbyist experience.code_removed", "orm are one of those kind of libs where very few ones are great.python has lots of them, and only sqlalchemy can be considered of high quality.not that django's orm, peewee or eloquent don't get the job done.but they only cover 80% of the use cases. sqla gets you to 95%, and you bridge the five remaining percents with raw sql injected in the proper places for those rare projects where the extra is important.the cost of it is that it's a harder to use orm, and a more verbose one. which is why i generally use to make things easier.what's more, orm for languages like c++ or rust have it extra hard as they are used from a low level tech while sql is quite high level and easy to manipulate. it's hence attractive to use it directly.if you use php, ruby or python, sql doesn't seem that big of a gain anymore for the simple operations.now diesel is quite young, and the rust ecosystem has proven to be moving not only fast, but generally in a sane direction, so i wouldn't count it out just yet.however, i've yet to find an even acceptable js orm. not only do they fail to provide any decent operation beyond simple ones, but they have such poor introspection capabilities that they can't be used to create an ecosystem around them.which is, after all, __the main point of an orm__. avoiding to write sql is definitively not the most important feature of an orm. the critical one is having a common api you can build upon to create form generators, auth systems, data validation units, serializers, automatic ui, etc.without this, the case for using an orm is way weaker.", "i agree that it's simplistic, but it captures the fact that organizations need money to survive. yes, companies offering \"free\" products have to serve two masters: the ones who use the product, and the ones who pay the bills. for many, the temptation will be strong to maximize profits as far as possible without completely losing the users. facebook has been in the news a lot because of this very thing.i think the core of this statement really is that if the users and funders of a product are the same, their interests are much better aligned.", "what politics does the django web framework subscribe to?", "looking at hashed health (particularly their what we do on the enterprise tab of website) they appear more like a blockchain consultancy.what is the product they are selling?", "from a quick look at the sagefy code, it seems you've written your own web framework, including your own database layer. was there a particular reason you didn't use a framework like django?", "top hat | | toronto, on, canada | onsite full-time\u2028we are looking for software engineers to join our team. we are hiring for a variety of development roles including: devops engineer, sr platform developer, sr android, ios, and a full-stack web (python, django, javascript, react.js/flux, aws, ansible; recently we\u2019ve been practicing continuous deployment on lambda). salary range based on experience from $80k to $120k.top hat helps professors make every lecture count by transforming mobile devices into powerful engagement tools, inside and outside the classroom. recently, top hat has been building out interactive textbooks and creating a way for professors to collaborate on authoring new content and sharing it through our marketplace. in summary, we have a great dev culture and some really cool problems to work on! here: are hosting an open house at our toronto hq july 24th at 6pm. join us! password: summer", "legalstart | full-stack software engineer | paris, france | full-time, onsite, visa, rest framework, react, postgresql, rabbitmq, docker, awsbased in paris, legalstart is a leader in the european legal-tech space that aims at revolutionising legal services, starting with making access to justice greatly easier, especially for businesses creators.since the launch of the site at the beginning of 2014, legalstart has experienced a very strong growth. in this context, we are looking for highly motivated developers to help us extend our product base and grow internationally.at legalstart, we strive to improve our technical skills, that means challenging the status quo (we shipped a small blockchain-based product in production), continuously improving our practices (we introduced haskell in our codebase for algorithms prototyping), staying close to the local community (hosting meetups, conferences)\u2026 also, legalstart engineers develop a strong ownership of the product itself, and we really value their personal growth.apply there if you feel up to the experience!* front-end developer: python developer:", "density | | syracuse + nyc + san francisco | on-site or remote | full-time | $100k-$130k + equity | backend engineer== what we builddensity combines a powerful people counter, a modern api, a dedication to privacy, and a sensor-as-a-service business model. the system\u2019s self-installable sensors can be added above any relevant door or entryway. users then access always-on people count through our real-time api, allowing them to measure and understand their physical space.== backend engineer ===- lead backend development on internal and customer facing projects, utilizing python and django- build apis and data delivery mechanisms for applications such as web dashboards, alerting & health systems, mobile applications, and third party integrations- contribute to frontend application development using es6, react, and redux- react to customer needs and feedback through tight-looped, iterative development- contribute to open source initiatives- document and teach best practices across our stack== apply ==", "pretty much everything you listed made solid progress during obama's tenure. i think people are concerned about the current direction.sessions rescinded an obama-era rule on marijuana enforcement[1].it's entirely likely that abortion will be outlawed in 20 states within 18 months.income and wealth inequality continued to rise during obama's tenure and last year's tax cut shows no sign of that stopping. one could argue that the inequality is natural in a liberal environment, but one can also argue that the rules are stacked in favor of the wealthy.quite a few states are making it harder for people to vote, especially those who have lower incomes or belong to minority groups.partisan gerrymandering (by both parties!) subvert the will of the people.finally, false attacks on legitimate press as \"fake news\" and baldfaced lying by government representatives subvert the press's ability to be a watchdog on the government. that said, the press still has its constitutional freedom, so i don't want to overstate this point.regarding prison population which \"has been declining for about eight years\" and the us's broad support for ending minimum sentencing... that applied under obama. that does not apply so much under the current attorney general[2].i think there is good reason to believe that the us is becoming less liberal (in the liberal democracy sense) since january 2017.(also, to be totally clear, i'm not saying it's anything like the dictatorship that has arisen in china today!)[1]: [2]:", "one of the goals of the zine is to get people up to speed with what they need to know to learn programming--good to have a goal while you're learning, right?when setting up python (and really most languages), you end up needing things like sudo.really it was one of the missing pieces of content that beginners needed to get into tracy's other books like", "i've used java/c/c++/ada/perl/go and most recently python all professionally in one aspect or another. i settled on python.so being a professional python/django coder, i was aware of all these issues. and yet, those issues do not seem to stop the python train from moving forward.a couple of issues to note in his article: everything he says is true, but the conclusions are mostly false.1. optimizing databases and data access are the number one scalability issue. it's the hardest thing going from a monolith to a microservice architecture. goroutines, threads, etc. don't solve that for you.2. threads are terrible in any language (except erlang maybe), and reliable code cannot be used with primitive thread constructs. goroutines are good enough, sure. also python asyncio. but not threads. i've seen production systems that no one could debug, because 3000 threads ran amok, thread deadlocks, race conditions, etc. and you can't unit test threaded code effectively either.3. all software has multiple build systems. c/c++ and autotools, cmake, scons, waf. java and ant or maven or gradle or whatever. go is sane for the most part, until you get to dependency management -- goglide, govendor, etc.4. strongly typed, statically typed systems (java, c++) usually aren't. usually people rely upon that as a crutch to think they don't have to worry about types, until they see nullpointerexceptions (java) or segfault (c/c++) in production.5. python code is only as reliable as the person who wrote it. but that's true of c/java/c++ etc. people have to understand where the pitfalls of a language are, and that's usually documented in coding standards or style guides.", "for the sake of adding to my own discussion, my issues (specific to aws) were:1. installing dependencies became complicated. when chalice worked, it was great. certain dependencies (in my case lxml) required a precompiled bundle that someone had thankfully already taken care of packaging.2. visibility into the process was poor. it felt hard to get into the system and really introspect it once it was deployed.3. i felt pushed to other \"serverless\" solutions within aws that i wasn't comfortable with. i understand the inherent vendor lock-in with the current serverless offerings, but i felt like i was doubly locked in when e.g. the \"best\" choice for a db was amazon dynamo.4. current serverless frameworks feel very minimal. i'm a big fan of both django (batteries included) and express (bring everything on your own). the tech that is out there now feels like express, except that there isn't a lot of extensions to layer on top. you sort of have to cobble your own together still.5. lack of best practices. i just didn't see a ton of thought leadership on how to do things the right way in a serverless environment. i might have just missed this though.----overall, i've come away impressed but i feel like building something entirely on serverless isn't quite as fleshed out as it needs to be yet. i think it's very close though.", "the main problems addressed in my opinion:- code duplication between server and client side- added complication threw data transmission between server and client (rest/json)i think, both problems can be addressed by:- having (a single) code that works both on server and client-side- having transparent transport mechanisms for information between client and server.i am sure, i could implement such a thing for python/django, using the already existing tools. but i am not sure, if such a thing would be appreciated by the community.what do you think?", "i wonder how the argument changes if you know you need an api for your mobile application that's almost identical in features to the web page.if you go the \"rails/django way\" with server side rendered templates and, say, a bit of jquery for fancy stuff -- you'll end up duplicating lots of code for the api (validation, routing, maybe even business logic).anyone got experience with swapping your models/controllers for an api while keeping the rest of django's/rails' niceties? (authentication/sessions, django's forms system, csrf, etc.)otoh having django/rails merely as a template system you probably could also go for very simple, self-contained client-rendered js pages (e.g..vue files). not much difference there i guess?", "karma | chennai | onsite | full-time | is a live trivia game show where more than thousands of people gather every day to play the game show live and win a cash prize. karma combines some of the winning formulas of traditional tv quiz shows \u2013 an energetic presenter and scheduled programming at the same time every day \u2013 with the fast-paced interactivity of a mobile game. altogether, the online game show will be a mix of entertainment, skill, and creativity. every viewer becomes a contestant, competing for a cash prize.we are looking for a team of passionate engineers in various fields to join our engineering team and help build, scale the live game show which is played by thousands of people across the world.here are our open roles:- software engineer - ios: software engineer - android: software engineer - backend: devops engineer - platform engineering: stack: ios: swift & objective-c. android: java. backend: python, django, aws, celery, redis, cassandra. devops: python, aws, ansible/puppet, cassandra, kubernetes/dockers, jenkins/travis ci etc.", "i think you've missed the article's point:> i don't like front end dev. because it's not as mature as back endno, he says don't do fe and be when the tools for back end-only (well, rails is full stack, actually) are so useful and productive. and in the rest of your comment you seem to forget that a front end is completely useless without a back end.> you are ror or django or asp.net dev and you love what you do? as long as you find jobs keep doing this, don't bother with full stack fluff.rails is the \"full stack fluff\".> spa and ssr will likely be the standard in the futurehow, exactly? what serves your spa? and who is using \"serverless\" for anything other than querying other backends (eg slack bots) or accessing aws services? i mean, sure, it's nice to not have to stand up a server to resize images coming from s3 but it's hardly going to replace, well, servers. you couldn't implement even the simplest crud app.", "like others comments, kudos to the authors.i'm an spa lover ( angular, vue ), but still most of the points raised here a coherent from a back end perspective.that said, a lot of the arguments are basically summed up as:\"i don't like front end dev. because it's not as mature as back end\".i will not lie on this point, js is a fast evolving ecosystem that sometimes has issues to stabilize. hence, there is a lot of marketing and self promotion mixed with frameworks sometimes ( growth hacking ) pushing for unnecessary tech that dies a few days after they have leaved the github trending page.for beginners, when a framework reach a certain threshold ( github stars most of the time) they feel like they should hurry and use the framework to stay relevant while most of the time they don't need to and the tech is just fluff.my point here is very simple, you are ror or django or asp.net dev and you love what you do? as long as you find jobs keep doing this, don't bother with full stack fluff.now that said, i can only encourage the author to do the angular or vue tutorial to discover something different. rails is great ( it's empowering a lot of website github, airbnb etc... ) but spa are different and when used properly it's hard to go back, the experience is delightful.most importantly we are getting closer to the serverless era where backend will be completly different from what it is compared as now, and spa and ssr will likely be the standard in the future.", "for the sake of adding to my own discussion, my issues (specific to aws) were:1. installing dependencies became complicated. when chalice worked, it was great. certain dependencies (in my case lxml) required a precompiled bundle that someone had thankfully already taken care of packaging.2. visibility into the process was poor. it felt hard to get into the system and really introspect it once it was deployed.3. i felt pushed to other \"serverless\" solutions within aws that i wasn't comfortable with. i understand the inherent vendor lock-in with the current serverless offerings, but i felt like i was doubly locked in when e.g. the \"best\" choice for a db was amazon dynamo.4. current serverless frameworks feel very minimal. i'm a big fan of both django (batteries included) and express (bring everything on your own). the tech that is out there now feels like express, except that there isn't a lot of extensions to layer on top. you sort of have to cobble your own together still.5. lack of best practices. i just didn't see a ton of thought leadership on how to do things the right way in a serverless environment. i might have just missed this though.----overall, i've come away impressed but i feel like building something entirely on serverless isn't quite as fleshed out as it needs to be yet. i think it's very close though.", "the main problems addressed in my opinion:- code duplication between server and client side- added complication threw data transmission between server and client (rest/json)i think, both problems can be addressed by:- having (a single) code that works both on server and client-side- having transparent transport mechanisms for information between client and server.i am sure, i could implement such a thing for python/django, using the already existing tools. but i am not sure, if such a thing would be appreciated by the community.what do you think?", "i wonder how the argument changes if you know you need an api for your mobile application that's almost identical in features to the web page.if you go the \"rails/django way\" with server side rendered templates and, say, a bit of jquery for fancy stuff -- you'll end up duplicating lots of code for the api (validation, routing, maybe even business logic).anyone got experience with swapping your models/controllers for an api while keeping the rest of django's/rails' niceties? (authentication/sessions, django's forms system, csrf, etc.)otoh having django/rails merely as a template system you probably could also go for very simple, self-contained client-rendered js pages (e.g..vue files). not much difference there i guess?", "karma | chennai | onsite | full-time | is a live trivia game show where more than thousands of people gather every day to play the game show live and win a cash prize. karma combines some of the winning formulas of traditional tv quiz shows \u2013 an energetic presenter and scheduled programming at the same time every day \u2013 with the fast-paced interactivity of a mobile game. altogether, the online game show will be a mix of entertainment, skill, and creativity. every viewer becomes a contestant, competing for a cash prize.we are looking for a team of passionate engineers in various fields to join our engineering team and help build, scale the live game show which is played by thousands of people across the world.here are our open roles:- software engineer - ios: software engineer - android: software engineer - backend: devops engineer - platform engineering: stack: ios: swift & objective-c. android: java. backend: python, django, aws, celery, redis, cassandra. devops: python, aws, ansible/puppet, cassandra, kubernetes/dockers, jenkins/travis ci etc.", "i think you've missed the article's point:> i don't like front end dev. because it's not as mature as back endno, he says don't do fe and be when the tools for back end-only (well, rails is full stack, actually) are so useful and productive. and in the rest of your comment you seem to forget that a front end is completely useless without a back end.> you are ror or django or asp.net dev and you love what you do? as long as you find jobs keep doing this, don't bother with full stack fluff.rails is the \"full stack fluff\".> spa and ssr will likely be the standard in the futurehow, exactly? what serves your spa? and who is using \"serverless\" for anything other than querying other backends (eg slack bots) or accessing aws services? i mean, sure, it's nice to not have to stand up a server to resize images coming from s3 but it's hardly going to replace, well, servers. you couldn't implement even the simplest crud app.", "like others comments, kudos to the authors.i'm an spa lover ( angular, vue ), but still most of the points raised here a coherent from a back end perspective.that said, a lot of the arguments are basically summed up as:\"i don't like front end dev. because it's not as mature as back end\".i will not lie on this point, js is a fast evolving ecosystem that sometimes has issues to stabilize. hence, there is a lot of marketing and self promotion mixed with frameworks sometimes ( growth hacking ) pushing for unnecessary tech that dies a few days after they have leaved the github trending page.for beginners, when a framework reach a certain threshold ( github stars most of the time) they feel like they should hurry and use the framework to stay relevant while most of the time they don't need to and the tech is just fluff.my point here is very simple, you are ror or django or asp.net dev and you love what you do? as long as you find jobs keep doing this, don't bother with full stack fluff.now that said, i can only encourage the author to do the angular or vue tutorial to discover something different. rails is great ( it's empowering a lot of website github, airbnb etc... ) but spa are different and when used properly it's hard to go back, the experience is delightful.most importantly we are getting closer to the serverless era where backend will be completly different from what it is compared as now, and spa and ssr will likely be the standard in the future.", "what problem does this solve?", "ok, to be explicit: react ecosystem vs angular. the difference between to two is how to separate the concerns - inside on large package or into an ecosystem.i work primarily in django. i could have given the same comparison of django vs flask. the pedant would say flask doesn't have an orm, and would be correct.given the context of this article and hn in general i thought the shorthand referring to react generally would be understood.", "first reaction, very nice, i spent about a year on vuejs but i missed the structure of django. this looks promising, only had a quick look, will write something small to get a feel for it. heard of svelt quite recently through recommendation", "i use a script to get an idea of demand in relation to othersw3m -dump | tr '[:space:]' '[ n]' | tr '[:upper:]' '[:lower:]' | grep -v \"^ s$\" | tr -cd '[[:alnum:]] n' | sort | uniq -c | sort -nbr > july.jobs.2018you can grep for the fields you are interested to have an idea. this is the data i grabbed on the 2nd around 14:00estcode_removed", "sandbox banking (yc w17) | software engineer | boston, ma | full-time | onsite | provides a universal adapter for banks. it helps institutions quickly and securely integrate new software from vendors and fintech startups. we're growing quickly, backed by y combinator, and possess enviable runway.our team is looking for a software engineer to help expand our core platform and ensure the success of new client deployments. applicants should want the opportunity to play a critical role in building an early stage product, enjoy working directly with customers, and be excited about financial technology.our stack is comprised of python, django, postgres, an assortment of aws services, and vue.js.please see to learn more.", "seeking work | iran | full-stack engineer and ui/ux designer13 years of experience in different areas of computers and trying to get out of iran.remote: ok (payment: bitcoin or some other popular crypto-currency)relocation: ok (extremely preferred)tech: python, django, html5, css3, javascript, mysql, ubuntu, jquery, apache2cms: wordpress, joomla, prestashop, vbulletin, ipboardcss frameworks: twitter bootstrap, zurb foundation, semantic ui, ui kitother: browser extensionsoftware: adobe cc (photoshop, illustrator, after effects)looking jobs for: web developer, ui / ux designer, motion graphic, managerial positionspreferably: senior and higher positionsresume: gerdoo1397@gmail.com", "location: hamedan, iranremote: yeswilling to relocate: yestechnologies: python, django, html5, css3, javascript, mysql, ubuntu, jquery, apache2, wordpress, joomla, prestashop, vbulletin, ipboard, twitter bootstrap, zurb foundation, semantic ui, ui kit, browser extension, adobe cc (photoshop, illustrator, after effects, etc.)r\u00e9sum\u00e9/cv: gerdoo1397@gmail.comlooking jobs for: web developer, ui / ux designer, motion graphic, managerial positionspreferably: senior and higher positions", "location: nycremote: yeswilling to relocate: for the right opportunitytechnologies: pencil, paper, illustrator, photoshop, indesign, lightroom, sketch, html, css, git, python, django, hugo, wordpress, bash shellr\u00e9sum\u00e9/cv: simon@simongriffee.com", "seeking work | new york, ny nyc | remote or onsite nyc full stack engineer with over 6 years experience delivering software. experienced working for startups and larger corporations in fast-paced environments.comfortable eliciting requirements from stakeholders, developing software specifications as a team lead and implementing the software specified on time.experienced developing full solutions: frontend, backend, mobile, devops, sql database reporting, email marketing and conversion funnel optimization.i have developed software used by thousands of paying customers in javascript (react, react native, meteor, jquery, angular.js, node.js), python (django, flask), ruby (ruby on rails), mobile native languages (java, objective-c), go, sql (postgres, sqlite) and cloud providers (amazon web services, firebase, ansible, terraform).worked in the restaurant, healthcare (hipaa compliance), hospitality, cosmetic and e-commerce industries.interested in machine learning, deep learning (keras, tensorflow) and blockchain technologies. experienced in solidity.email harry@harrymoreno.com", "ditched chrome for waterfox (", "elements interactive | python/django developer (medior to senior level positions) | barcelona, spain | full-time, onsite, visa (only for senior candidates)elements interactive - we're a digital agency building web and mobile applications for a wide range of clients with hq in the netherlands. we have an international team of over 60 professionals (12 in barcelona office), all passionate about technology, learning and sharing our knowledge. currently looking to expand the team in bcn.check our current tech stack here info about us & our projects here", "> i want to learn javascript as my next language.welcome!> i have been observing js community for some time and it seems like there is too much noise out there with dozens of frameworks and language variations (e.g. coffeescript, typescript, jsx, etc).yeah, this is a double edged sword. people are always looking to build the next best solution, which is great for you as a consumer, but it's also terrible for you, because decision fatigue sucks and your decisions can feel like they're outdated in months, not years. just make an informed decision when you go out to pick something and stick to it as long as it works for you.one thing to know is that a lot of this is caused by the challenges of trying to hit the moving target that is web browsers. my biggest piece of advice for cutting through the bullshit is to find your root problem, then pick the handful of tools that actually solve it. don't just use something because everyone else is using it; no need for cargo cult mentality.> i plan to go through mozilla's js docs and vue tutorial, but not sure if it is enough to get up to speed with the modern js ecosystem.go through the mdn js docs, build fundamentals. read through some library code like jquery or a utility library like lodash to get a flavor of some interesting things that come up when building a frontend library.> which resources would you recommend?roadmapy resources:- ponyfoo has some great es6 resources as well> which framework should i stick with?find what works for you. just try to avoid things that have so much tooling you get paralyzed looking at how it works instead of doing something interesting to you. if you start with react use create-react-app to figure out the fundamentals. i'm sure there are equivalents to create-react-app that correspond to create-<library>-app nowadays.> what are some things that you wish you had known before getting into js? note: i am comfortable with python (including flask/django), java, html and css, so picking up js as a language won't be a problem. interested in your thoughts.- learn about the different environments that js is run in and how this can impact certain things like module definitions, e.g. why is there amd, umd and commonjs?- learn about functional programming in the context of js. it's a nice mixture between the two. learn when to use one with the other.- understand the inheritance model, prototypical inheritance isn't that bad, just get it out of the way.- understand the runtime and event loop. this will inform you why you'll see things like callbacks, promises, generators and now async/await. here's a fundamental breakdown of the event loop: learn about the browser lifecycle- invest in learning the chrome dev tools or ff dev tools, they're both wonderful and will save you hours", "seeking work | full stack developer | remote 4+ years building web appsi am experienced software developer having experience in node,angular,python,django,mongo and other technologiesspecialties: javascript (es6+), nodejs, angular,pythonemail:abdurleo91@gmail.comfiverr:", "mysql is usually shambles still. i am pretty sure that django defaulted to myisam until later than that. or maybe it's that most installs were not on the most recent version until well after the 2010 release. i have had some really crappy problems to fix because of tables being a mix of myisam and innodb, tables being locked because one type has a foreign key to another.then there are the default string settings....agree with you on crappy devs essentially doing nosql in the application layer though. i am starting to hate this industry, where chasing the new trend is becoming more valuable than learning to do things well.", "> writing a web application? not sure it really matters much if you use python/django, ruby/rails, java/spring. just use what you (or the developers) are most comfortable with.it might matter if you used cobol, though. or even c++.", "i am a full-stack developer with 2 years of experience developing web and enterprise applications. my main working environment is a linux and i will be comfortable with working on any other unix-like operating systems. i also would like to learn new technologies and use it in daily basis.location: chicago, ilremote: nowilling to relocate: yestechnologies: python, django, mysql, postgresql, mongodb, javascript, typescript, angular, nodejs, html, css, git, linux/unixr\u00e9sum\u00e9/cv: the.ganzorig25@gmail.comgithub: website:", "i think it does and it doesn't. it really depends on what your end goal is. writing a web application? not sure it really matters much if you use python/django, ruby/rails, java/spring. just use what you (or the developers) are most comfortable with. trying to make a game engine for aaa games? yeah your not going to get away with ruby or python.", "i used to have what was basically a spider trap on my website while learning django. the truth is that every bot that found it hammered my site with tens of thousands of requests per day (even googlebot). i don't think it stopped until i blocked the page in robots.txt", "not really. gimp is still an image editor.django is your gui/imaging framework and libraries if you\u2019re going to make that comparison.", "agreed. django gives you the tools to build applications, wordpress is a point and click setup for most people. the users are extremely different audiences.", "huh. django cms actually looks pretty nice.", "i'm thinking \"django cms\", not just django - sorry. colleague of mine has been doing a lot of work in django cms the last year and i conflate the two sometimes:)", "jekyll is closer to wordpress but django is a library / framework so photoshop to c++ is kinda close, but a little too far.", "current location: delhi, indiaremote: nowilling to relocate: yespreferred location: germany, netherlandscurrent role: full stack developertechnologies:- python (django, flask, celery)- javascript (angular, vue.js)- postgresql, redis, mongo, elasticsearch- aws, gae, heroku- hands on experience with c++ and go-langlinkedin: infinite.ravi@gmail.com", "jekyll or django, or a hybrid?", "seeking work | seattle (remote preferred, travel ok)hi there! i'm a polyglot web programmer with a specialty in scientific data visualization. i have 6 years of industry experience writing code for games, desktop apps, and phone apps. as a freelancer, i've worked with clients on data dashboards and apis, bringing products to market as well as just making proof-of-concepts.previous projects i've shipped include graph visualizations of pharma data, custom data dashboard charts, interactive maps, and react native and electron apps. i have dual degrees in cs and studio art, spent several years at the university of washington working on nsf-funded serious games in microbiology, and cut my teeth writing simulations of complex systems for umich and sandia labs.my latest projects have used d3.js a lot, and for quick visualizations and analysis i'll use python, pandas and jupyter. i'm friendly, communicative, have opinions both on design aesthetics as well as tools, and am happy to advocate for what i think would be best for a project. happy to expand on previous projects and chat about yours.most-used tools:* javascript stack: node.js, es6, react, d3.js, react native, electron* python stack(s): django, pandas, matplotlib, scikit, sklearn, basemapalso used: c# /.net framework, javagmail: rowan.copleygithub: github.com/dovinmu", "byrd ( | berlin | full-time | onsite | junior qa/support engineerbyrd is a logistics startup \u200bwhich aims to make shipping a simple and effortless experience\u200b. we help commercial online businesses ship their products around the world by offering easy access to professional logistics at competitive prices.we are looking for a junior qa/support engineer to join our team in berlinwhat you will do:code_removed what we are looking for:code_removed please send a letter of application in either english or german to \u200b>> career [at] getbyrd [dot] com << and include any links to public repos and projects. we'd love to see what you've been working on!find the full job description here:", "revfluence | backend & full stack engineer roles | onsite | full time | visa | san francisco, ca | $100k - $200k + generous equity + benefitsrevfluence ( is a profitable, series a funded enterprise saas platform that helps companies create high quality branded content by finding, connecting and coordinating with thousands of talented content creators and influencers. our platform aims to solve a greater challenge beyond influencer marketing with a novel, data-driven approach to making the process of collaborating with photographers, videographers, influencers and other content creators more seamless and scalable than ever before, while also providing the infrastructure to constantly learn and recommend the right piece of content to the right person through the right channel.this is a unique opportunity to join a fast growing startup with ambitious goals to make it possible for talented creators to earn a living doing what they love. we're a well-funded, 40+ person company but our core team of engineers is still quite small and looking to grow quickly, which means you can have the opportunity to take on ownership and make a big impact!we\u2019re looking for engineers with the ability and desire to build a great product who aren\u2019t afraid of learning new technologies. our current tech stack includes python, google app engine, django, postgres, and reactjs + typescript (currently migrating from angularjs). check out some of our job postings for more details! free to also send me an email with any questions! my name is suhaas, cto at revfluence, and you can reach me at sprasad@revfluence.com", "techempower | full stack developer | los angeles area, california (near lax) | onsiteplease apply at is a custom software company. we help our clients understand their needs, plan solutions for them, and build software -- on time and on target. we're looking for good programmers interested in web development. if you're smart, motivated, and you want to work in a supportive environment, then let's talk.about- we're small, with 30 employees working in teams of 1-6. - we're friendly. our office is professional and collegiate, like a computer lab staffed by adults. - we're the authority on web framework performance ( don't expect new hires to have experience with all of these, but you'll learn about them every day.- languages: java, javascript, python, go, c#, ruby, php - web: jersey,.net core, react, django, node.js, go, servlets, jquery - mobile: ios, android, phonegap - data persistence: orm (hibernate, etc.), postgres, mysql, ms sql server, nosql.benefits- flexible schedules - food trucks on tuesday/thursday - lounge with two large tvs and a game collection", "the black tux | los angeles, ca (santa monica) | full-time | onsitesaving the world one tuxedo rental at a time! just kidding.. but we do make men look and feel their best at their most important moments, and there's something to be said for that!tuxedo rental is easy. wrong! it's a complicated service--and we're committed to providing the best rental experience, and save you from ever having to set foot in a men\u2019s wearhouse again. just take a gander at these beautifully suited men: back to business--our core business model is proven and we\u2019re poised to take over men\u2019s formalwear market, which is why we\u2019re expanding our tech and product teams to take on much greater challenges.---- tech -----manager (see levels below) \u2014 you\u2019re a staff engineer who\u2019s transitioned to managing development teams. you get computers, and you get people. you are a mentor, recruiter, inspirer, listener--you put people first, and you understand developers because you are one! make no bones about it--you\u2019re stepping into a growing development team taking on new challenges while burning down the technical debt of a startup.head of engineering: engineering manager: assurance engineer (mid-level or higher) \u2014 you\u2019re a seasoned automator, experienced with selenium. you\u2019re ready to bring automation coverage of a customer facing website from 50% to 100%--okay, maybe 100% is unrealistic... or maybe it\u2019s not! (hahaha... okay, let\u2019s say from \u201cgood\u201d to \u201camazing\u201d.) oh, and you\u2019re excited by the prospect of standing up automation for internal tooling. engineer (junior) \u2014 you have 2+ years of experience. you\u2019re ready to help speed up our our ci/cd pipeline and migrate it from codeship to jenkins. you\u2019re excited by the expansion of our docker/aws environment and migration from ecs to kubernetes (which is almost complete!). engineer (full stack or back-end, mid-level or higher) \u2014 your mission if you choose to accept it: split an aging monolithic django application into discrete services written in python or javascript (or another language if i could have my way! shakes fist). along the way, you redesign apis, build service infrastructure, remodel databases, and revise business processes to support new and unannounced products and services. impossible?... i think not!lead: senior: mid: product ---user experience designer \u2014 product manager, business operations \u2014 product manager, growth \u2014 you\u2019re hired here, you\u2019ll be working under the wonderful thad hwang, previously director of product management at lyft, now chief product officer at the black tux. also, you can bring your dog into work, eat free lunches on friday, participate in the outstanding events we plan (like dodgers games, party buses to arcades, escape rooms, etc.), as well as enjoy the outside air-conditioning provided by our very own pacific ocean.and my name\u2019s guy, and i\u2019ve been working at the black tux for 2.5 years as a growth engineer. if you have any questions at all, email me professionally at guy@theblacktux.com or personally at me@mattguy.me.", "wanderjaunt | full-stack engineer | san francisco | onsite | | provides home owners and travelers with better experiences for fairer prices. for homeowners, we take the hassle out of managing a short-term vacation rental. for travelers, we deliver the consistency and quality of a 5-star hotel at a sharing economy price.you\u2019ll be the fourth engineer on our rapidly growing team. help build out our new booking platform, pricing algorithms, inventory management, logistics for housekeeping and more! django on the backend and vue on the frontend. accepting talented engineers of all backgrounds with django experience especially appreciated!to apply or for any questions, contact me (lead engineer) at chris<at>wanderjaunt<dot>com.", "zigway | several roles | yangon, myanmar | onsite or remote, full-time | $20k-45k + equity | is an early stage fintech social enterprise. we help low income families break free of debt traps and poverty through access to finance.we're looking to fill two positions:- a tech lead to take over the role of cto, to be the link between the tech team and the rest of the company, and shape the future of the product, and the company. onsite- a senior react/react native developer for our mobile & web apps. 3-5 years coding experience, at least a couple of apps under your belt, but mostly a strong desire to use your skills to help our fight against poverty. (remote or onsite)tech stack: python/django, react, react-native, reduxremote work or relocate to myanmar if you like tropical weather:) (we can help with visas) drop me a line at laurent@zigway.co", "in a word: arch", "broad institute | cambridge, ma | software engineer | full-time | onsiteour team is building open-source tools that allows researchers and clinicians to efficiently explore, search, and analyse large genomic datasets. these tools significantly accelerate the pace of diagnosis for thousands of families affected by rare genetic conditions.based at the broad institute of mit and harvard, we are a multidisciplinary team of engineers, clinicians, and computational biologists - we have an opening for a full-stack software engineer with experience in service-based architectures and an interest in user interface design and data visualization. we are using react, redux, and d3, python and django, postgresql, elasticsearch, google cloud platform, and kubernetes. knowledge of genetics or biology is not required.please send your resume or questions to weisburd@broadinstitute.org", "peopledoc| software engineer & site reliability enginner, engineering manager | paris | remote | full-timeour tech stack: python/django, java, scala, javascript/ember.js, postgresql, rabbit mq, redis, openstack, ansiblepeopledoc is making the difficult job of hr easier through our cloud based hr service delivery platform the peopledoc's dna is technology. our r&d team is composed by more than 80 high-skilled people dedicated in delivering good code and being really active in the opensource community.the team is completely autonomous and has all latitude to make its own choice. we believe in micro-service approach and zero down time deployment.", "nstack | london | full time, interns | onsite, remotenstack provides an interface for analysts to build data science workflows in the cloud from a library of reusable predictive models. our product powers predictions for millions of users each month, and our customers range from e-commerce businesses to f250 companies.we\u2019re primarily based in central london, but have a mixed remote and onsite team. we\u2019re funded by top-tier infrastructure investors from the west coast, and the founders are both technical and ex-yc / phd. salaries are competitive and include stock options.we\u2019re a tech heavy team with a flat structure and friendly atmosphere. we\u2019re big believers in self-organising teams within an agile environment that put a heavy focus on creating user value first.our tech stack: kotlin / java 8, python 3, numpy/scipy, django, typescript & react, apache big data projects, linux & kuberneteswe\u2019re hiring for the following roles:- frontend developer (onsite) - we are looking for someone to lead the development of the front-end, developing on our existing workflow builder. we are open-minded in terms of technologies, but would be most comfortable architecting the product using react and typescript along with modern css ui libraries, so experience with these would be ideal. this will be a flexible role with a really unique scope for ownership and growth.- devops engineer (onsite / remote) - we\u2019re developing the nstack paas to run on top of kubernetes and many google cloud services, and are looking for a devops engineer with a focus on data engineering, ci/cd and deployment. the core nstack platform runs on the jvm using many tools from the apache big data stack, along with large amounts of python. we\u2019re also heavy users of linux containerisation, and nstack workflows are distributed on kubernetes.- data scientist (onsite) - we\u2019re looking for an amazing data scientist to join our current data team to build reusable data-driven components and applications on the nstack platform. ideally you\u2019d have experience working as a data scientist in a team using python (pandas, sklearn, numpy). knowledge of the big data world (e.g. hadoop, spark, etc.), alongside an understanding of cloud and data infrastructure would be a bonus, as would experience with bayesian statistical models and automl systems.- data science intern (onsite) - to join our growing data science team as described abovewe\u2019re looking at a range of positions and experience levels - whether you\u2019ve just left uni or been hacking for 20 years, if you\u2019re interested please get in touch. any questions please comment, dm, reach out on email (jobs at nstack dot com) or at cheers!", "comes down to another issue discussed in the article: extremely high power and current density, which require another greal deal of engineering to cool down and make sure things don't vaporize, melt or simply break down.", "\"instantiating an object from a name in a string. like instantiate a 'foo' when you have a string variable that contains 'foo'. i can't remember the syntax even though i looked it up two days ago,..\"python doesn't have specific syntax for that. it can be as simple as:code_removed that assumes \"foo\" is in your global namespace. if you don't care about security then you can do:code_removed if you care about security then you might not want to allow arbitrary objects, like \"os.unlink\" to be referenced. there are third-party packages which provide different models of how to get objects, like django's \"import_string\" at weird sort-of typing of variables. variables have types,\"variables have only one type, \"reference to python object\". an expression like 'var = \"hey \" + var' may change the type of the value that var references, just like how 'var = var * 234.567' may change the type of the value that var references from an integer/long to a float, or \"var = var * \"hey\"', if var == 2, causes var to be a reference to the string \"heyhey\".\".iteritems(). really\"this was for a transition phase. it no longer exists in python 3, where items() returns an iterator instead of a list.\"super(classname, self).__init__(argument). wut?\"in python 3 this is: \"super().__init__(argument)\", as in:code_removed \"but it's still just like any other 20+ year old language in wide spread use - crufty, idiosyncratic in many respects\"a reason for the oft-bemoaned backwards-incompatible changes to python 3 was to remove some of the crufty, idiosyncratic language features that you rightly pointed out. you are still using python 2.7, so cannot take advantage of those changes.", "zeitgold | pm, eng, and more | full-time | berlin and tel aviv | onsite\u2022 product: an innovative machine-human hybrid ai-based solution that automates complex small business workflows in accounting, bookkeeping, and payroll. in essence, a data platform for small businesses that collects, structures and manages all financial and administrative data streams.\u2022 why: zeitgold enables entrepreneurs to focus on what they are truly passionate about - their products and customers - and frees them from paperwork. we are saving small business owners 10 hours per week and creating clarity of mind.\u2022 \u20ac14m+ funding: battery ventures, hv holtzbrinck ventures, and a number of well-known business angels from germany, silicon valley, and israel.\u2022 stack: react web, react native (android and ios apps), python and django, graphql, broad usage of aws services, serverless architecture (aws lambda), docker containers.\u2022 values: startup mindset, valuing others, growth mindset, strong convictions loosely held, striving for excellence==founding team==founders of sumup and former members of israeli defense forces cybersecurity unit 8200.==contact==jobs@zeitgold.com | more info: colin roper, vp of product @ zeitgold", "seeking work - remote only. (based in tel-aviv.)hi, i'm ram, a freelance web developer with six years of experience building web applications for startups.my expertise is in taking your idea and building it from scratch to the point where it's a fully-functional web app that serves paying users.technologies used: python, django, heroku, git.more information:", "seeking work - remote or bristol, uk.hi, i'm an experienced (7 years) full-stack developer with a passion for startups.my skills and experiences include:* python (django, flask, celery)* javascript (angular, redux, react, electron, es6, typescript)* datastores (postgres, elasticsearch, redis, kafka)* devops (aws, docker, coreos)i've helped build systems that store billions of data points, run millions of jobs daily and process thousands of messages a second. beyond just development, i love consulting with start-ups. i have experience across the startup life cycle. from the earliest stages of a first hire to the later stages with millions in annual recurring revenue and profitable.if you'd like to work together or want to talk my email is c@meronmaske.com.github:", "location: eu (changes frequently)remote: yes!willing to relocate: maybetechnologies:* crypto/blockchain - building crypto infrastructure (multiple blockchains), customized libraries and apis, as well as front-end (metamask) solutions - highly motivated to continue working with this.* nodejs/meteor/sailsjs* serverless (going heavy on that one)* cloud technologies (aws/azure/gcp)* wordpress/codeigniter/yii/drupal (components, hacks, themes) - less motivated, unless truly cutting edge (or wp vip projects)* ci & unit testing - jenkins, mocha & karma for js, toast for php, as well as selenium* django (general python too) - to a lesser extentresume: upon requestemail: dev (at) azdv.colooking for challenging projects. most recently worked extensively with serverless & aws apis, building cloud-related prototypes, before that worked as an angularjs specialist.", "seeking work - remote highly experienced vp of engineering & lead web developer. skills:* crypto/blockchain - building crypto infrastructure (multiple blockchains), customized libraries and apis, as well as front-end (metamask) solutions - highly motivated to continue working with this.* nodejs/meteor/sailsjs* serverless (going heavy on that one)* cloud technologies (aws/azure/gcp)* wordpress/codeigniter/yii/drupal (components, hacks, themes) - less motivated, unless truly cutting edge (or wp vip projects)* ci & unit testing - jenkins, mocha & karma for js, toast for php, as well as selenium* django (general python too) - to a lesser extentseeking: challenging projects. most recently worked extensively with serverless & aws apis, building cloud-related prototypes, before that worked as an angularjs specialist.example work: upon requestlocation: eucontact: dev (at) azdv.co", "guts tickets | frontend/backend/blockchain devs | amsterdam, the netherlands | onsite \u20ac35k-\u20ac60k p.a. depending on experience, part-time/full-time, esop/token plan available.guts tickets is hiring developers: frontend, backend, blockchain & everything in between.guts tickets is a ticketing platform & service that puts an end to disgraceful secondary ticket prices and ticket fraud. do you want to be part of the ticketing revolution? we prefer onsite team-members at the moment. we're located at the top floor of pakhuis de zwijger, in amsterdam with a beautiful view over the water and inner city.we're hiring frontend, backend & blockchain developers.our (current) tech-stack:backend: python / django / rest api / golangblockchain: ethereum / solidity / cryptofrontend: vue.js / ember.js / react native (yes, we do them all)we're looking for anyone who does & loves any of the following. overlapping skills or full-stack is a big plus:frontend js development (senior/medior/junior): javascript, vue.js, emberjs, tests, html, css/sass/postcss, bootstrapbackend development (medior/junior): python 3.5+, django rest api, golang, postgresqlblockchain development (medior/senior): ethereum, solidity, smart contractsdevops: gitlab, ci/cd, awswe tend to work agile: scrum / kanban, and create our workflow based on the team (members) instead of forcing it on you.competitive salary based on experience: part-time or full-time is negotiable. esop (sars) or token plan are negotiable. employee-based conference, hardware and training budget is available.perks: ps4 pro and 4k tv gaming-battles, ping-pong tournaments, friday-afternoon bbq/drinks on roof terrace (looking over amsterdam), committed team-members from all over the world (all on-site), meetups & lightning talks, access to \"fill in whatever you want\" events & conferences.got guts? join our team and send your cv to jobs (at) guts.tickets (soliciting is not appreciated).check out and for more info.", "location: santa clara, caremote: yes but not preferredwilling to relocate: notechnologies: python, ruby, javascript, django, ruby on rails, mean stack, more on my resumer\u00e9sum\u00e9/cv: daviddjf@gmail.comjust completed a coding bootcamp in full-stack web development, though i do have previous tech experience and my degree is in computer engineering. my preference is more for back-end development, and i am a very fast learner and am particularly good at troubleshooting/debugging.", "seeking work location: boulder/denver, colorado (co), usa and san francisco bay area, california (ca)remote: yestechnologies: javascript (react, native, vue, nodejs), graphql, python (django, flask, appengine)r\u00e9sum\u00e9/cv: hn@uplift.agency---------------we are product-minded engineers. build full-stack sites or native-mobile apps and take them to market.marius & paul are former engineers turned freelancers who started uplift to build amazing software and solve complex problems.as experienced consultants and former founders, we understand tech companies. running a business is hard. you have to wear many hats. let us wear the ones we're great at!we specialize in react, react native, graphql and django/python.we\u2019ve worked with companies like credit karma, clearcare, nerdwallet, mit, humble bundle (w11), flightcar (w13), mozilla and more.for more details, previous work, testimonials, please visit:", "memrise | software engineers, data scientists, designers, product manager | london uk | full-time, onsite, visa sponsorship and relocation available | memrise gives people learning superpowers. we aim to help anyone achieve confident, real-world language skills in just a few short months; our product is innovative and fun, and it delivers the goods.last year, we won the \"app of the year 2017\" at the google play awards. with near zero marketing spend we've grown organically to tens of millions of users, and we're already profitable with a team of 55 (comprising 37 nationalities).engineering-wise, we are a small but very ambitious team and value generalists that like working end-to-end, across the stack, owning their services in production. we have unique and interesting problems to solve in scalability, big data, machine learning, and interface design.we are expanding and looking to fill the following roles immediately:* senior software engineer - backend* senior software engineer - web* senior ios engineer* senior android engineer* engineering manager - mobilewe use python 3.6 / django / mysql running on kubernetes for the backend and react/redux on the frontend. the ios and android apps are regularly featured native apps written in obj-c/swift and java.we are also hiring data scientists, marketers, designers, and product managers.if you're interested in any of these jobs - or if you are just awesome and think we'd be a good place to show off your talents - please apply at you don't see a specific role on the jobs page that you fit, please apply for the \"speculative application\".", "umbrella | brooklyn, nyc | full-time | full stack engineer | makes it easy and affordable for seniors stay at home by connecting them to umbrella neighbors who want to give back with everyday tasks and home maintenance. umbrella neighbors are often recent retirees who want to give back and stay active. we are pioneering a new kind of purposeful work, while serving those most in need and addressing a large market.we're a small, diverse, fast-moving, mission-oriented startup. our stack is python/django/react native. to apply email sam [at] askumbrella.com", "artory | (senior) python/devops/full-stack engineer | berlin, germany | full-time | onsite, visa | is building the world's largest repository of data for the art world. transparency and integrity is paramount in gaining the trust of the market and becoming the go-to resource for artwork-related information. artory combines modern cryptography with blockchain technology to record significant events in the lifecycle of artworks and collectibles. we are transforming the market entrance experience for art buyers, and create additional assurance for everyone dealing with artworks.tech stack: python, django, javascript, react, docker, awsplease apply at:", "seeking work / remote / based in los angelesdesigner + developeri have over 10 years of experience as a graphic designer and web developer. i create websites, brand identities and marketing material for a variety of companies including startups, agencies and non-profit organizations. in addition to my design skills, i have thorough knowledge of full-stack web development.design: websites, mobile apps, logos, banner ads, marketing material, advertising, billboards, trade show displays, packaging, 3d modeling, photo retouchingdevelopment: html, css, less, javascript, angular, jquery, node, php, django, mysql, bootstrap, foundation, rest apis, contentful, webhook, wordpress, modx, git, grunt/gulp, static site generatorsportfolio: stevesunderland[at]gmail.com", "lyte | | san francisco, ca | full-time, onsite | frontend (react.js) | backend (django, postgres)lyte is a post-primary ticketing platform for sold out events which means we\u2019ve partnered with some of the biggest names in the live entertainment industry to help eliminate the secondary market (scalping) and save fans money when buying tickets to sold out shows. we work directly with the promoters, artists, and venues as an extension of the primary box office, helping them control their events end-to-end.we're looking for:- full-stack engineers- senior backend engineers (python, django)- data scientist (pandas, python)- senior data engineers- product manager- customer support- operations analystemail: engineering@lyte.com", "lumen5 | engineering frontend, backend, machine learning, javascript | vancouver, bc | fulltime, onsite | a small startup (9 people so far) that is growing quickly! we're writing software that uses machine learning to convert text content to video. we've found that what we're building is very attractive to marketing teams from lots of different organizations and we've got tons of interesting nlp, artificial intelligence, video rendering, and web scaling technical challenges. we're hiring a few different positions:senior frontend engineer (react, redux): backend engineer (django, elasticsearch, postgres, kubernetes): ml engineer (tensorflow, natural language processing): javascript developer (js architecture, webgl, canvas):", "crowdjustice | london, uk | software developers | onsite | full-time | is an early-stage, vc-backed, tech-for-good company that's changing the way people access the legal system with a mission to make the law available to everyone. we\u2019re using technology to solve a huge social problem and building a business at the same time. since launch in 2015 we have helped important legal cases raise millions in funding, seen claimants get their cases to the supreme court, given communities a voice \u2013 and we\u2019ve been featured in the guardian, ft, bbc, techcrunch, nyt and more.we are looking for both backend and frontend developers to join our lean team in central london: crowdjustice platform backend is written in python, django and postgres, with the front-end in javascript, html and sass \u2013 though you don't need experience in any of these.interview process: 20-30 minute phone/hangouts chat about the role (no surprise tech questions); a 1.5 hour on-site interview where we'll discuss the technical task, pair program some work and talk about your future at crowdjustice; if successful, a fair offer and the chance to join a well funded startup early on its mission to increase access to justice!if you have any questions send them across to: gavin ~a-t~ crowdjustice.com", "uplift financial (inbcubating at cogo labs) | front-end engineer | cambridge/boston, ma | onsite, full-time, visathe world of consumer finance is complex and poorly understood. uplift financial simplifies the process of making better financial decisions. today, our focus is helping consumers find credit products that actually help them get on the right track - no payday loans here. as we grow, we'll be adding new product categories until we're a trusted advisor for every decision in our users' financial lives.we're looking for a front-end engineer to help us build and optimize elegant and usable interfaces to connect our users to these products. our sites are built with django (python) on the back-end and, for now, fairly simple html/css/js up front. if you have strong opinions about how we could make things better, we want to hear from you.we're housed in cogo labs, an incubator with 10+ years' experience building businesses on the web, including everquote (ipo), autotegrity (acquired, adp), and courseadvisor (acquired, wapo). cogo's founders were early investors in other boston success stories like tripadvisor and cargurus. learn more at www.cogolabs.comreach me directly at derek@cogolabs.com to learn more - looking forward to talking!", "we're looking for front-end and full-stack developers. our typical toolset includes: react, redux, webpack, django, python, redis, postgres, docker, linux, and aws. we value passion, pragmatism, discipline and testing until you\u2019re confident. we also believe communication and empathy are core competencies for people who build technology.canvas was founded in 2015 to rebuild the technology infrastructure for primary care providers. this includes core medical record technology as well as patient-facing and insurer-facing products. canvas is backed by top venture firms and is headquartered in san francisco.apply here", "seeking work - remote, short to medium term projects - zak.wilson@gmail.com i make software - mostly full-stack web development and http apis, but i'm adaptable. i have some interest in artificial intelligence and machine learning. i have a little experience making android apps, and my open-source android app ceilingbounce has happy users.i can do stuff that's harder than basic crud apps. stuff i know well: clojure, ruby (with or without rails), python, django, javascript, lua, postgresql, mysql, sass, responsive css.other stuff i've used for something non-trivial at least once: common lisp, scheme, java, sass, c, php, haskell, bash, perl, mongodb, mirah, android development with clojure. yes, i can probably pick up that language or tool you're using that nobody has ever heard of.github: public facing things i've worked on:", "hire an esquire | web developer roles | pittsburgh, pa | full time | onsite | looking for strong frontend, backend, and full-stack web developers to help us build the next iteration of our spa. the ideal candidate will be detail-oriented and have a penchant for testing, refactoring, and writing high-quality code using the latest industry-standard best practices.you will be working with the product team located in downtown pittsburgh, pa. this role will be interfacing heavily with the cto and ux designer to design, build, and test new features for our application.our stack:backend:code_removed frontend:code_removed currently hiring:* full stack developer: backend developer: frontend developer: be sure to mention hn in your application!", "narmi (techstars nyc '17)| senior full stack engineer | new york, ny (nyc) | onsite | narmi is helping reinvent banking in the united states. we create a more accessible and useful financial ecosystem by powering the online banking, mobile banking, and open banking apis for the 10,000 credit unions and community banks in the united states.you'll be working on production software that has a real impact on the average american's life everyday. our software helps them save money on their bills, understand their financial story, protect their families and move money.narmi was founded by two georgetown university alums who previously worked as ceo and cto of a $18 million credit union and also at some of the largest banks in the world.even if you don't think you are an exact fit for one of our current openings, we'd still love to talk.we are always looking for well-rounded engineers to join our team in nyc. having expertise in python (django and django-rest-framework), vue.js, react native, ansbile, terraform, visual design/ui/ux, and/or security are all pluses!the interview process entails an intro call to get to know each other, followed by an in-person interview that includes a code pairing session.some keywords: * senior full stack engineer, senior full-stack engineer, senior full stack developer, senior full-stack developer * senior front end engineer, senior front-end engineer, senior front end developer, senior software engineer, senior product engineer * banking, finance, online banking, mobile banking, open banking apis, * new york city, new york, ny, nyc, manhattanyou can learn more on our website and apply via email: jobs @ our domain. make sure to mention you found us on hacker news. you can also apply via angellist[1] also please feel free to reach out directly to me chris @ our domain.[1]", "emburse (yc w16) | software engineer | full time | onsite preferred, remote | is a corporate credit card platform that generates virtual and physical credit cards with specific budget restrictions. we manage both traditional corporate card expenses like t&e as well as backend vendor payments.emburse is built using python/django and is deployed on heroku for development and aws for production. we're looking for someone to join us as one of the first few employees and who would be comfortable embracing sizable infrastructure responsibilities which include:* maintaining a pci-compliant environment on aws* augmenting our credit card transaction processing capabilities* designing new expense management featurescheck out for more information about our company and the role we're looking to fill.", "clover health | san francisco, ca or jersey city, nj | software engineers & data scientists | full-time onsite or remote clover is reinventing health insurance by working to keep people healthier. we're looking for seasoned engineers and data scientists to help us solve the most complicated problem in the world: healthcare.we're using sophisticated data analytics, custom software, and machine learning to coordinate care and build a clearer model of our member's health and risk factors. we are on a mission to help seniors and low-income members live healthier while keeping costs down. this is an opportunity for those who want to be at the intersection of health and technology and thrive in a collaborative environment as well as the freedom of self-direction.tech stack: postgres, python, flask/django, frontend: react cloud services: aptible, aws, gcp data stack: airflowif you are interested in any of the data science and engineering roles: learn more about working here, check out our tech blog:", "location: san diego, caremote: yeswilling to relocate: noemail: tim@arevej.mer\u00e9sum\u00e9/cv: react.js, javascript, python, django, postgresql, html, cssi'm a starting-out junior with no commercial experience. but, i'm very passionate and i'm super motivated. i enjoy a good challenge and professional growth. i can become a net-positive asset on your team fairly quickly if i'm given a chance to!i've been published by freecodecamp: been learning to code for about a year. i blogged about some things ( and made quite a few learning projects ( +", "leaflink | nyc | full-time | onsite | senior engineering rolesleaflink is a marketplace that provides licensed cannabis retailers the ability to order from their favorite brands, as well as a suite of software tools for those brands to manage and scale their operation.with over 2,000+ dispensaries and more than 600+ leading brands in colorado, washington, california, oregon, nevada, maryland, and arizona, leaflink is setting the industry standard for how cannabis brands and retailers work together.our team, backed by funding from leading vc's, is poised to define the cannabis wholesale market. this year, leaflink was named one of fast company's \"top 10 most innovative companies in enterprise\", joining the ranks of amazon, slack, and vmware - and we're just getting started!openings: - senior devops - senior backend - senior frontend - product manager - business intelligencekeywords: python, rest, django, drf, docker, looker, vue.jsto learn more and apply:", "chainsage | istanbul, turkey | full-time | onsite or remote | engineer - looking for team members in istanbul to help build the future of payments. you will be working on a skunk works project on cryptocurrencies (hint: it's not a price aggregation site). we're building a wallet/server architecture that accelerates cryptocurrency payments through payment channels, similar to lightning network and micro raiden. our stack includes bootstrap, sass, reactjs, django, postgresql, redis and runs on linux, docker, kubernetes and google cloud.director of ops - looking for a self-motivated, detail-oriented operations generalist to join the team. this role will combine elements of content curation/editing, community/social media management, marketing, administration, and operations.we don't care about your gender, race, color, religion, sexual orientation, age or marital status. we are looking forward to meet you!", "feature labs, inc. | software engineer | boston, ma | full-time | on-site | labs is changing the way companies create new machine learning products and services. we make a web app and developer api to automate time-intensive and error-prone parts of the data science process such as feature engineering. our customers love our products because they make machine learning easier to use.currently, our stack is mostly python on the backend (pandas, django, sklearn), react for the front end, and aws and docker for deployment. above all, we prioritize the ability to choose the right approach to solve a problem.if you're interested in getting hands on with our product, check out our open source library, featuretools at", "ux engineering consultant with 10 years experience and a host of happy customers ( looking for part-time opportunities to help scale engineering organizations.location: boston, maremote: yeswilling to relocate: possibly la or sftechnologies: javascript (react, angular, vue, node/express), ruby/rails, elixir/phoenix, python/django&flaskr\u00e9sum\u00e9/cv: (personal) and (portfolio)email: adam@anonconsulting.com", "location: venezuelaremote: yeswilling to relocate: yestechnologies: python, django, javascript, html, css, gitr\u00e9sum\u00e9/cv: kenshumorales@gmail.com", "code_removed", "bookxchange | full-stack engineer | miami/ft. lauderdale, florida area | onsite, full-timewe are a growing wholesale/distributor of books and textbooks. we are looking for a full-stack engineer with the desire to do a mixture of software development and product management. the role reports directly to senior management. competitive salary + bonus eligibility. looking for:- full stack experience- experience with at least one web framework (we use django and flask, but looking for experience in web development generally, not necessarily these specific experience)- knowledge of aws or other cloud deployment platformsget in touch at tech@bookxchange.com", "edited | engineering positions | london, uk | onsite | full-timewe\u2019re currently hiring for front-end, back-end, data scientists and devops engineers. our stack is primarily python & javascript, with frameworks like django/flask and react.js/d3. we aren\u2019t afraid to integrate new tech and like to keep exploring what\u2019s out there.we're an established startup, focused on doing important things for retail, the fourth biggest industry in the world, helping them reduce waste and be more efficient. we have a beautiful web app, used everyday by hundreds of people at topshop, saks fifth avenue, gap and more.our engineering team is a group of smart people from really varied backgrounds. we\u2019re solving diverse and interesting problems on a daily basis, like image analysis, big data visualisation and a load of other fun things that come with having a rapidly growing data set. we love good practices like extensive testing and continuous integration, and enjoy giving back to the community, so open source contributions are highly encouraged.our office is large and sociable; people eat lunch together every day and we have drinks and snacks in the office every friday, as well as team days out and all expenses paid trips abroad. there\u2019s a video on our jobs page of our most recent one: of the team has actually found and joined us through \u201cwho\u2019s hiring\u201d, so don't hesitate to get in touch, we're always happy to meet new people!see here for more details about current vacancies and to apply directly online:", "cooklist | django / react native / cto | san francisco, ca / dallas, tx | $90k - 150k w/ restricted stockcooklist shows you recipes you can cook with the groceries you buy and will allow you to order groceries by choosing recipes you want to cook.our app can connect directly to 81 grocery chains like walmart, safeway, kroger etc. and automatically download every purchase a user makes in store and online. it uses nlp to match each product purchased to recipe ingredients. over 1,000,000 products are matched to 1,000,000 recipes.cooklist is live on ios and android. hundreds of users are participating in the development process. 10,000+ purchases have been downloaded in the last week. we are a well capitalized team of experienced startup founders and are looking to hire 3-5 engineers.you can see a demo video and find links to download the apps at", "pilotlight | moorestown, nj (philadelphia area) | full time | onsitepython / django developerpilotlight is looking to add an experienced, full-time developer to our team. we are a small, boutique development shop located in southern new jersey (philadelphia area) focused on building web applications for clients large and small. if you have experience with python/django or with similar mvc-style frameworks (rails, etc..) we would love to chat.jobs@gopilotlight.com", "code_removed", "rover | seattle, wa | onsite | full-time | your rainy-day-dog-walkers. your every-day-belly-rubbers. your middle-of-the-night-pee-breakers. because we get it\u2014your dog is family. and when you can\u2019t be there, you can trust us keep your dog happy, healthy, and sweet as ever. but it\u2019s not just about dog love. rover is also an award-winning technology business committed to making pet care safe, easy, and affordable so that everyone can experience the unconditional love of a dog.to learn more about who we are, our engineering culture, and whether this is the right place for you, read our key values profile: of our 19 open positions:* engineering manager - mobile: engineering manager - on-demand dog walking: it client engineer: senior frontend engineer - search and sustainable supply: senior it program manager: senior software engineer - android: senior software engineer - application security: senior software engineer - ios: senior software engineer - machine learning: stack: python, django, react, redux, mysql, postgres sql", "thread | london, uk | onsite | mission is to help people to feel happier and more self-confident by making it easy to dress well. we do this using a combination of human stylists and powerful machine learning algorithms to recommend each guy the perfect things just for them\u2014in their size, budget, and style\u2014which they can then buy in one place.to learn more about who we are, our engineering culture, and whether this is the right place for you, read our key values profile: are our open roles:- frontend engineer: software engineer: product designer (freelance): stack: some of the technologies we use to build thread include: python, django, reactjs, postgresql, redis, debian, docker, memcache, nginx, ansible, jenkins, gunicorn, luigi, pandas, scikit-learn, git.", "uptrending | front-end and sr. full stack php developers | westlake village, los angeles, ca | full-time | remoteuptrending is a technologist-centric digital agency, originally founded in silicon valley to service the marketing needs of venture-backed b2b software startups. our clients include saas products, big data, ai and data security companies. we are experts in the marketing of b2b technology businesses, with our core service offering of strategy, website design, development and marketing integrations.uptrending has been a globally distributed team for our entire history. though our hq is now planted in southern california, we have core team members across the globe from engineering to leadership.we are growing our expert team to support the increasingly complex needs of enterprise-scale clients, and incubating game-changing data products of our own.we are looking for a full-time experienced front-end web developer and a full-time senior php (wordpress) developer, to work with our clients in building their web presence. this is primarily php wordpress, html, css but also looking for strong skills in marketing automation / integrations, javascript, devops, laravel, react, vue, angular devs as well.remote is ok as long as you are within a 5 hour time difference of usa pacific timezone.details for sr. full-stack developer: for front-end web ui developer: seeking to build out a bench of freelancers in php, frontend, django, python, ruby on rails, react and software architects / data engineers to work on our homegrown bi tools. details here: reach out to me at ron+hn@uptrending.com.please if you email me, make sure to put \"hn\" + who you are in your subject, with a description of who you are and a resume & profile.", "loanstreet | senior frontend & fullstack engineers | nyc series a startup | 100k - $150k | equity | company:at loanstreet, we\u2019re building a platform that makes the sophisticated process of lending into an intuitive and delightful experience. we help credit unions, banks, and other lenders originate, syndicate, and manage loans. loanstreet not only benefits lenders and their borrowers, but also brings transparency and stability to the lending industry. we are determined to transform lending in america.please contact careers@loan-street.com to apply.roles:senior frontend & fullstack engineers:we are seeking to grow a team of engineers with the vision to build a powerful platform and the talent to do it the right way. currently, we're a small team of 6 full-time engineers, and as one of the early members you will have a significant voice in both engineering and the company as a whole.this type of platform is sophisticated with technical requirements spanning a broad variety of disciplines. there are already hundreds of millions of dollars flowing across the platform, with billions anticipated. it\u2019s an exciting time to join and we are looking for brilliant people to share that excitement with us!key technologies: react, graphql, flow, python, django, docker, awscode_removed", "seeking work -- gainesville, fl -- remote/freelancei am an experienced python developer, having used the language in all kinds of areas and situations, including web development (flask, django, pylons, google app engine, etc), gui development, database access (using ms sql server, mysql, and postgres), scripting, backend development, automated testing, web crawling/scraping, data extraction and parsing/etl, etc.i am looking for full-time or part-time work, either one is fine. if you are looking to get a small project done, or you have an existing project where some maintenance work needs to be done (perhaps on a regular basis), then i would love to hear from you.i am also available for technical writing (i kept a programming blog for many years, mostly about python).(for the record: although python is my main programming language, i am also interested in, and have worked with, many other programming languages, including c, d, delphi, go, c#/mono, ruby, ocaml, prolog, lisp, scheme, etc, on windows, mac os x and linux systems. i am also available to work on projects in these languages.)website: zephyrfalcon at gmail.com", "gambit research ltd ( | london, uk | onsite | \u00a340-80k + bonusgambit research specialises in creating and managing an automated betting service, via research, statistical analysis and the use of complex algorithms. we ingest and organise terabytes of market and event data from more than fifty sources and make the data available to our strategy teams via internal apis. we care deeply about speed, accuracy and availability.our flagship product, mollybet, presents the odds offered by many of the world\u2019s largest bookmakers and betting exchanges, and enables clients to bet with multiple operators with a single mouse-click or api request. molly is generally regarded as the best product in its class.we\u2019re always looking for clever, pragmatic, and autonomous individuals to join our team. we have a unique culture, where hierarchy and fancy job titles don\u2019t matter. instead our team is given the freedom to choose their own tools, work on projects they actually find interesting, and have totally flexible working hours. the technologies our team typically works with includes: linux, docker, kubernetes, ansible, c, c++, java, haskell, julia, go, javascript, angularjs, reactjs, django, postgresql, redis, apache spark, apache kafka, rabbitmq, celery, elasticsearch, logstash, kibana, graphite, sentry, git, and gitlab.we\u2019re currently recruiting for: * python developers * erlang developers * linux infrastructure engineer / sysadmin / sre / devops engineervisit or send your cv over to careers@gambitresearch.com, for more information.", "healthverity | philadelphia, pa | onsite | permanent | software engineer, qa, product managerhealthverity is a vc-funded early-stage tech startup that offers the fastest and most efficient way to explore and acquire healthcare data. we help our clients discover, license and link patient data across the widest range of top tier data providers. we empower customers to gain new perspectives on patient activity while ensuring complete privacy management and hipaa compliance.our stack runs entirely on aws and some of the tools we use are spark, hadoop, airflow, zeppelin, docker, python, ember, and django. we\u2019re always looking for team members who enjoy both reviewing code and having their own code reviewed. you\u2019ll enjoy the peace that comes with working in a mature software development environment.our hiring process includes: phone interviews, sample work submissions or assessments, onsite interview, references, background checks. can reach me with any questions at: aelefante@healthverity.com see jobs here:", "gamer network | games media | brighton, uk | full-time onsite | backend web developer (python) posting: network is searching for backend web developers of all experience levels to join our experienced in-house platform team.the platform team is in the middle of an ambitious project to unify gamer network\u2019s award winning family of games sites on to a single common platform, utilising cutting edge technologies to equip the company with a strong foundation for the future. this is the opportunity for the right candidate to be instrumental in shaping that platform.our sites: eurogamer.net, rockpapershotgun.com, vg247.com, usgamer.net, gamesindustry.biz, egx.net and many more.role benefits: - work on a network of sites that serve billions of pageviews per year. - a relaxed office environment well located near the north laine area of brighton and a short walk to the beach. - passionate colleagues -- across games editorial, events and sales -- who are a pleasure to socialise with outside of the office. - flexible working. - the opportunity to attend company-wide retreats to help run our world-class egx games events in london and birmingham.technologies: python, django, asyncio, node.js, react js, rabbitmq, elasticsearch, web services, service oriented architectures, microservices.we are looking for a candidate that is able to quickly get up to speed with any web technology, but you\u2019ll have an advantage with experience in the technologies listed.email: careers@gamer-network.net", "code_removed", "seeking work | software developer | poland krak\u00f3w remote/travel possible remote: yestechnologies: python (django, flask, celery), lua, javascript (react + mobx)email: in hn profile.i'm a full-stack developer. i build things from the scratch to actually working. sometimes i get those things to the front page of hn.i'm a creator of i used to work on google art project ( and hippyvm (rpython based php interpreter) while i write code i'm very oriented on a product side of things. i feel pretty comfortable with python (django, flask, celery) javascript (react), elasticsearch, postgresql. full cv available on o email.also if you are looking to build a search feature on the map or scrape tones of data from the internet i'm probably the guy.rates: 60usd/h", "> spas have been kicking around for, what, a decade?only with big players: facebook, gmail, etc.small crew spa usually suck big time precisely because there is not django/ror/etc equivalent for spa. so people write it by hand. and they don't all have the talent pool and money the gafas have.", "> i've always thought django to be terribly bloated.well it depends. it does handle clickjacking, xss, i18n, l18n, identification, authentification, database handling, crsf and much more out of the box.things that you eventually code yourself, or that you should disable if you don't need it.what usually happens is that people delegate this complexity more and more to the front end, which becomes, indeed, bloated. or install more libs. and code glue for them because they are not integrated.all in all, django is slow compared to go, but it's not bloated if you take it in the context of what necessary work it saves you. it's opinionated. it has sane default. it's ready to use.unless you plan to have static website or an unsafe one.", "awesome! i've always thought django to be terribly bloated. go seems like the best option for any kind of api.", "hi, we rewrote in userengage few modules from python3 to golang.on python we use django, db postgres&citus, rabbitmq, redis.our main cluster have more than 25mln api requests daily.for us golang is >70 times faster than django.", "django's docs were better than catalysts (i would agree with you that python's docs aren't great).catalyst being perl had more than one way to do everything, to the point that i couldn't actually work out what the framework was other than the url router. django had a far more sane approach which would seem to be needed if its your first time venturing into a web framework.", "indeed, i was most disappointed when i looked at the django con europe twitter and the first thing i saw was codes of conduct and comments about genders and bathrooms. i was wanting to read about django.", "scout also detects these for django, ordering by the most performing n+1s:", "i agree, i've used this package since the beginning. python is my favorite computer language so far. i started with flash, then html & css, then jquery, php, mysql, etc. could not mention python without virtualenv, django, and flask. to me, these tools are like lego for programming. i like js too, who wouldn't? people literally live on the internet.", "as much as i'd rather not plug my own talk, it's probably going to give you more information than i could ever get in a reply here.", "this interview with trey hunner discusses his use of automated tests to help teach programming. automated testing is a huge part of developing great software. but many new developers don't get exposed to testing for quite a while. but this is changing.new ways to teach programming include automated tests from the beginning.trey hunner is a former psf director, a python and django team trainer, and he has been using automated tests to help people learn python.", "i think that generally applies to most frameworks, but i've noticed it heavily with django. developers get upset that django isn't working for them when they are actively avoiding best practices and going out of their way to fight it.if you are fighting a robust framework, you are probably doing something wrong and should take a step back.", "for our usage that's my point of view. when you need to manage ws & asynchronous task, you are just ending stacking technologies to make django enter in 2018 (remember tornado?). i would say that the framework didn't followed technology evolution and so our new requirementsfor old good stuff is still a good framework. it really depends on your usage."]