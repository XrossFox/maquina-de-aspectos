["go to your postgresql config and edit pg_hba.conf code_removed then change this line: code_removed to: code_removed then restart the postgresql service via sudo command then code_removed you will be now entered and will see the postgresql terminal then enter code_removed and enter the new password for postgres default user, after successfully changing the password again go to the pg_hba.conf and revert the change to \"md5\" now you will be logged in as psql -u postgres with your new password. let me know if you all find any issue in it.", "@n.b. which rdbms are you referring to? sql server? there is an effect on performance. [n]varchar(max) performs slightly slower than [n]varchar(n). i was recently referred to this site. the same is not true for postgresql for all i know.", "several months ago i learned from an answer on stack overflow how to perform multiple updates at once in mysql using the following syntax: code_removed i've now switched over to postgresql and apparently this is not correct. it's referring to all the correct tables so i assume it's a matter of different keywords being used but i'm not sure where in the postgresql documentation this is covered. to clarify, i want to insert several things and if they already exist to update them.", "yes i'm working in postgressql pgadminiii", "i can also recommend postgresql 9.0 high performance by @gregsmith, it's really a great read. the book covers every aspect of performance tuning from disk layout to query tuning and gives you a very good understanding of the pg internals.", "to get your version of pg, run code_removed in the terminal. stackoverflow.com/questions/13733719/\u2026... this can help figure out which version you're using with homebrew", "code_removed? here is my directory structure. root folder is code_removed. code_removed points to code_removed using code_removed. code_removed has code code_removed. code_removed/code_removed are also in code_removed folder. now, how do i make code_removed available to browser?", "thank you. your solution was perfect.", "@pozs you_are_the_best!!! thanks so much!", "@qantas94heavy, and i just did, hold it off on down-voting:)", "@devdave read my comments re what the diagrams actually illustrate. re outer & inner joins--table1/2 circles encircle rows returned by left/right join respectively; full join = left join union right join & inner join = left join intersect right join. re cross vs inner join--nothing. google my comments re misuse of venn diagrams for joins on other questions & answers. two-circle cross join diagrams of other answer(s) are interpreted differently & are typically nonsense.", "go to this /etc/postgresql/9.x/main/ and open pg_hba.conf file in my case: code_removed replace peer with md5 so this will be changed to: database administrative login by unix domain socket local all postgres peer code_removed this: database administrative login by unix domain socket local all postgres md5 code_removed then restart pg server: $> sudo service postgresql restart below is list of methods used to connect with postgres: code_removed note: if you have not create you postgres user yet. create that and now you can access postgres server using that user credentials.", "you could disable transaction via \"set_isolation_level(0)\"", "did this for 9.5 to 9.6 and worked perfectly as well. good to be able to do easy exact upgrade as well, rather than \"latest\". i used big sql to get the right installer (openscg.com/bigsql/postgresql/installers.jsp).", "@masi one use of a custom sequence could be to make it easier to do master-master replication - which would be useful if the data link between two data-centers is broken - allowing records to be created on both servers with different ids, which then makes it easy to synch the databases back up while keeping the ids generated in the separate locations.", "fair enough, alter table does lock the table according to the postgresql docs, however your non-transactional approach risks losing changes if the table is indeed live. also i'd suggest that any code that relies on column order is broken (that may be outside your control of course).", "will this overwrite data in an existing table, or append it?", "a command-line version of bell's answer: code_removed this should be run under the privileges of the database master, usually postgres.", "@johnmerlino you can list and create users through phppgadmin, but you won't be able to login if you don't know the password for any account.", "how to use (at client code_removed) from code_removed? not works for me", "let's say you have an array of ids and equivalent array of statuses - here is an example how to do this with a static sql (a sql query that doesn't change due to different values) of the arrays: code_removed", "@chrismarx too late;) there are people here who want to have a clear disctinction between programming, configuration, administration, etc. each topic has it own stackexchange site where you're supposed to find better experts than (i.e. \"ask the right guys\"). it makes senses because so is not a general-purpose q&a site. but otoh most people on so are also cross-competent so it also makes sense to ask the biggest community (so vs. dba). in the end it's just a human perspective; and given the number of upvotes and favorites your question has, leaving it here is probably the best:)", "a primary key is usualy used to be referenced by child entities. there may also be exports of child data to secondary systems/db's. as an email tends to change over time this change needs to be cascaded. as a primary key i would use something less likely to change than an email address", "code_removed does not work for me using the command line (cmd.exe) at all. are you sure you weren't using cygwin or something similar?", "based on @gingerlime script, bspkrs (couldn't find his name) created one that also changes the functions:", "@sydney you would replace myenum with the enum column type.", "@bobort since adding index incurs performance penalty on all inserts, updates and deletes, and lots of foreign keys could really add up in this case. that's why this behavior is opt-in i guess - developer should make conscious choice in this matter. there could also be cases when foreign key is used to enforce data integrity, but is not queried often or queried at all - in this case performance penalty of index would be for nothing", "definition: joins are way to query the data that combined together from multiple tables simultaneously. types of joins: concern to rdbms there are 5-types of joins: equi-join: combines common records from two tables based on equality condition. technically, join made by using equality-operator (=) to compare values of primarykey of one table and foriegn key values of antoher table, hence result set includes common(matched) records from both tables. for implementation see inner-join. natural-join: it is enhanced version of equi-join, in which select operation omits duplicate column. for implementation see inner-join non-equi-join: it is reverse of equi-join where joining condition is uses other than equal operator(=) e.g,!=, <=, >=, >, < or between etc. for implementation see inner-join. self-join:: a customized behavior of join where a table combined with itself; this is typically needed for querying self-referencing tables (or unary relationship entity). for implementation see inner-joins. cartesian product: it cross combines all records of both tables without any condition. technically, it returns result set of a query without where-clause. as per sql concern and advancement, there are 3-types of joins and all rdbms joins can be achvied using these types of joins. inner-join: it merges(or combiens) matched rows from two tables. the matching is done based on common columns of tables and their comparing operation. if equaility based condition then: equi-join performed, otherwise non-equi-join. **outer-join:**it merges(or combines) matched rows from two tables and unmatched rows with null values. however, can customized selection of un-matched rows e.g, selecting unmatched row from first table or second table by sub-types: left outer join and right outer join. 2.1. left outer join (a.k.a, left-join): returns matched rows form two tables and unmached from left table(i.e, first table) only. 2.2. right outer join (a.k.a, right-join): returns matched rows from two tables and unmatched from right table only. 2.3. full outer join (a.k.a outer join): returns matched and unmatched from both tables. cross-join: this join does not merges/combiens instead it performs cartisian product. note: self-join can be achived by either inner-join, outer-join and cross-join based on requirement but table must join with itself. for more information: examples: 1.1: inner-join: equi-join implemetation code_removed 1.2: inner-join: natural-join implementation code_removed 1.3: inner-join with non-eqijoin implementation code_removed 1.4: inner-join with self-join code_removed 2.1: outer join (full outer join) code_removed 2.2: left join code_removed 2.3: right join code_removed 3.1: cross join code_removed 3.2: cross join-self join code_removed //or// code_removed", "plz give image source credit to w3schools.com", "there is a great project called migrations under doctrine that built just for this purpose. its still in alpha state and built for php.", "liquibase.org?", "it's a shame amazon rds doesn't support plpython3u!", "code_removed if you're new to postgresql and unfamiliar with using the command line tool code_removed then there is some confusing behaviour you should be aware of when you've entered an interactive session. for example, initiate an interactive session: code_removed at this point you can enter a query directly but you must remember to terminate the query with a semicolon code_removed for example: code_removed if you forget the semicolon then when you hit enter you will get nothing on your return line because code_removed will be assuming that you have not finished entering your query. this can lead to all kinds of confusion. for example, if you re-enter the same query you will have most likely create a syntax error. as an experiment, try typing any garble you want at the psql prompt then hit enter. code_removed will silently provide you with a new line. if you enter a semicolon on that new line and then hit enter, then you will receive the error: code_removed the rule of thumb is: if you received no response from code_removed but you were expecting at least something, then you forgot the semicolon code_removed", "@pozs thanks but i need a general solution, think i'll bite the bullet and use the python extension.", "if you are looking to migrate between versions (eg you updated postgres and have 9.1 running on localhost:5432 and 9.3 running on localhost:5434) you can run: code_removed check out the migration docs.", "@qantas94heavy, i hope it's not of very low quality any longer, and i appreciate if you upvote and raise it from the disgrace:)", "i took this one step further and added code_removed to my ~/.bashrc (linux mint) to help me remember this in the future. (this command avoids having to enter my user password.)", "the time zone is a session parameter. so, you can change the timezone for the current session. see the doc. code_removed or, more closely following the sql standard, use the code_removed command. notice two words for \"time zone\" where the code above uses a single word \"timezone\". code_removed the doc explains the difference: set time zone extends syntax defined in the sql standard. the standard allows only numeric time zone offsets while postgresql allows more flexible time-zone specifications. all other set features are postgresql extensions.", "@polarisuser either code_removed or code_removed should do.", "it is not true that postgresqls inheritance feature violates the relational model by breaking the information principle. the information principle says, that all data in a relational database is represented by data values in relations and all query results are again represented as a relation.(en.wikipedia.org/wiki/relational_model) this is always the case, since all tables, that inherit another table, are simple tables again. for that reason there is also no such thing as a \"bag\", whatever that means.", "see also stackoverflow.com/q/1517635/287948", "this is a great post on explaining the implementation details for jsonb (pgeoghegan.blogspot.com/2014/03/what-i-think-of-jsonb.html)", "is there any way to make this work if you have multiple joined tables you want snapshots of? copy from doesn't support importing multiple tables.", "the reload command is code_removed by postgres user.", "i'm receiving this message but i can't find the postgresql.conf file: code_removed", "@brauliobo why isn't that useful? it's enough to group up concurrent sets of commits, and that's what it's for.", "this \"expired at unix time 0\" thing happened to me today on postgresql 9.2.3. it was with a new user i had created using pgadmin. in the past, i had always created users within code_removed or by using the code_removed script. perhaps this has something to do with pgadmin.", "tablea that we are inserting to is the destination, and the tablea in the dblink is the source.", "another free app: dbeaver - you can select databases, tables, etc to compare with each other", "beauty: worked for me on debian 6.0.7", "i encountered this insertion performance problem as well. my solution is spawn some go routines to finish the insertion work. in the meantime, code_removed should be given a proper number otherwise too many open connection error would be alerted. code_removed the loading speed is much faster for my project. this code snippet just gave an idea how it works. readers should be able to modify it easily.", "$ code_removed $ code_removed $ code_removed for see the user on db select the user that do you want be superuser and: $ code_removed", "i ran into this issue after trying to restore/drop/create a db while other processes were accessing them. macosx/homebrew fix was: close all other accessing processes code_removed, code_removed, code_removed, etc... load/unload using the commands found in code_removed run restore/drop/create from before", "you can't talk to pg directly from a web page; you'd need to be able to open a plain tcp/ip socket you could send and receive binary data through, and no web browser will let you do that. the library you're referring to is an extension for node.js and will not work in client javascript. i strongly recommend that you talk to your postgresql server from the client via your webserver and json requests/replies.", "@entrylevelr you need to pipe the output to a file in order to save it. see this relevant question askubuntu.com/questions/420981/\u2026", "on centos 6.5 i found this file in code_removed", "for the ones who need to get the all data record, you can add code_removed to the end of your query to get the all object including the id.", "upgrading the database works for me code_removed", "note that code_removed is insufficient. see stackoverflow.com/a/35928978", "i am new to postgresql database i just want to know is there any gui tool for postgresql just like sqlyog for mysql", "another (probably not secure) way to pass password is using input redirection i.e. calling code_removed", "i have the same issue for managing account settings as name value pairs. the design criteria is that different clients could have different settings sets. my solution, similar to jwp is to bulk erase and replace, generating the merge record within your application. this is pretty bulletproof, platform independent and since there are never more than about 20 settings per client, this is only 3 fairly low load db calls - probably the fastest method. the alternative of updating individual rows - checking for exceptions then inserting - or some combination of is hideous code, slow and often breaks because (as mentioned above) non standard sql exception handling changing from db to db - or even release to release. code_removed", "which is, let's say, a bit rusty.", "can you please share the exact version of postresql? 8.3.x?", "well, it would work across git just fine if you are careful about your id= and author= tags. in theory each user would have their own author entry (good) and if you do something reasonable with id=, say yyyymmdd_rev, then you are pretty much good to go. even with git, most everyone has a 'central repo', for a given project. 99% of people don't have somethiing 'central'. again, liquibase files are just plan text xml-ish files, with a stack of commands to execute against a given db (or set of). chances are 99% of all projects would have 0 issues following this in practice, even with dvcs's.", "for password less login: code_removed to reset the password if you have forgotten: code_removed", "i'm not convinced by your \"argument\" -- in real life there will often be situations when some essential data (e.g, a phone number) will not be available immediately. if such a field is marked as not null in a database, it will require the users to pollute the data with dummy fields (like 123) instead of leaving it empty. it would be more practical to let the application handle the constraints (and in this case, the app could flag an empty field as a action item).", "i'm trying to install postgresql for rails on mac os x 10.6. first i tried the macports install but that didn't go well so i did the one-click dmg install. that seemed to work. i suspect i need to install the postgresql development packages but i have no idea how to do that on os x. here's what i get when i try to do code_removed: code_removed", "just two steps to run the database after the installation (before that ensure your logged as code_removed user) installed-dirs/bin/postmaster -d installed-dirs/pgsql/data for an example: code_removed step-2: run psql from the installed path (to check where you installed '#which postgres' will use to find out the installed location) code_removed", "for example in one line you can do something like: pgpassword=pass1234 psql -u myusername myusername", "the data directory contains an old postmaster.pid file / the data directory contains an unreadable postmaster.pid file postgresql puts a file named postmaster.pid in the data directory to store the process id of the postgresql server process. if postgresql crashes, this file can contain an old pid that confuses postgresql. you can fix this issue by deleting the postmaster.pid file. however, you must make sure that postgresql is really not running. open activity monitor and make sure that there are no processes named \u2018postgres\u2019 or \u2018postmaster\u2019. if you delete the postmaster.pid file while postgresql is running, bad things will happen. source:", "thank you for saving my sanity!", "the data directory contains an old postmaster.pid file / the data directory contains an unreadable postmaster.pid file postgresql puts a file named postmaster.pid in the data directory to store the process id of the postgresql server process. if postgresql crashes, this file can contain an old pid that confuses postgresql. you can fix this issue by deleting the postmaster.pid file. however, you must make sure that postgresql is really not running. open activity monitor and make sure that there are no processes named \u2018postgres\u2019 or \u2018postmaster\u2019. if you delete the postmaster.pid file while postgresql is running, bad things will happen. source:", "i had to specify database too. code_removed.", "i am trying to copy an entire table from one database to another in postgres. any suggestions?", "@jangorecki: any huge table with physically sorted data can profit from a brin index.", "if you are using it on centos,you may need to reload postgres after making the above solutions: code_removed", "this way is working for me, using method md5 first was not.", "i'm still pretty inexperienced with shell programming, so if this is really wrong for some reason, vote me down, but don't be too alarmed. building from kibibu's answer: code_removed", "just a side note: it usually not a very good idea to put application data into c: program files", "code_removed does work but it takes awhile (if it returns true, like a graceful cleanup). pg_terminate_backend is more like a \"hard kill\" as it were, see stackoverflow.com/a/11292126/32453", "same error for me and i didn't experience it until i downloaded os x 10.9 (mavericks). sigh, another os upgrade headache. here's how i fixed it (with homebrew): install another build of xcode tools (typing code_removed in the terminal will prompt you to update the xcode build tools) code_removed code_removed after that code_removed worked for me.", "andrew, best to read the documentation for clarification. drop owned by will drop tables owned by that user. reassign owned by will reassign those tables to a different user. choose one.", "actually, there is a difference between varchar(255) and varchar(500), even if you put 1 character inside such column. the value appended at the end of the row will be an integer that stores what the actual length of stored data is. in case of varchar(255) it will be 1 byte integer. in case of varchar(500) it will be 2 bytes. it's a small difference, but one should be aware of it. i don't have any data on hand how it can affect performance, but i assume it's so small that it's not worth researching.", "for those trying to install redmine, i missed code_removed after trying all of the above. initial error being code_removed.", "here is a query with some edits, code_removed", "make sure your user has attributes on its role. for example: code_removed after performing the following command: code_removed it fixed the problem. see tutorial for roles and stuff here:", "code_removed", "yes, use returning. \"insert into table (id, yada) values (1,2),(9,22) returning id;\" etc", "for anyone who is still having issues after trying all the answers on this page, the following (finally) worked: code_removed this was after doing everything else mentioned on this page. postgresql 9.5.8 ubuntu 16.10", "@justbob no, it isn't, but i find it wise to stay within a major version or two. i'm really aiming at those people still on 8.3 or older, which is just absurd. 8.4 is marginal, i'd want to be on 9.1 at the moment and using 9.2 in my testing in preparation for rolling it out in the next six months or so. you save so much time using newer versions because issues you're facing are already solved in the new version; witness the vismap and fsm, autovac improvements, etc etc.", "use this to execute *.sql files when the postgresql server is located in a difference place: code_removed then you are prompted to enter the password of the user.", "this one works perfectly!! thanks...!!", "the postgresql is not running as root, but as _postgres.", "@flavorscape, oh my -- fixed! althogh, it did run perfectly (ofc i test an example i post...), but that definetely looks better without the \"=\"", "you can replace the backslash character with, for example a pipe character, with sed. code_removed", "it's not clear from this message what the correct syntax is. it is: alter sequence product_id_seq restart with 1453;", "very cryptic solution imo, specially with those names, but a good one.", "ok the tag and the title contain postgresql since the beginning what is your point?", "there's also smallserial if you just want a smaller data type.", "as a note for followers who got here trying to figure out how to list all triggers, it's code_removed or, if you also want to see which table each trigger applies to code_removed fwiw `", "i've found that this solution can be quite dangerous if your app deletes the a record with lots of siblings and instead of a minor error, you have permanently deleted a huge dataset.", "while mysql will silently truncate the data when the value exceeds the column size, postgresql will not and will raise a \"value too long for type character varying(n)\" error.", "ugly hack to fix it using some shell magic, not a great solution but might inspire others with similar problems:) code_removed", "this will give problems if your separator character appears in values of the column.", "code_removed", "stackoverflow.com/questions/1943433/\u2026", "one of the cause will be make sure the size of the disk is not full execute the command postmaster -d path of the postgres", "is it acceptable to populate code_removed outside of transaction? i have a system which requires to upsert a large amount of data over a long period of time. so i can either buffer the data in memory and then begin transaction, upsert, commit - or insert the data into temporary table once it hits my side. so, is it ok to create temp table outside of transaction?", "i hade to use the following command to initialize the database: code_removed", "@craigringer are you serious?", "try this: code_removed gl xd", "it looks like code_removed needs to be a one-liner. so you don't get the beauty of formatting the sql the way you want, and just putting a copy/function around it.", "here is an example i used to connect node.js to my postgres database. the interface in node.js that i used can be found here code_removed", "code_removed", "@richard huxton database is accessed by java.", "open file csv by notepad++. choose menu code_removed code_removed, then fix few cell manuallly. then try import again.", "spent a while trying to figure out what the hell was going on before i stumbled across this, thanks!", "the correct solution is to add the timezone info e.g., to get the current time as an aware datetime object in python 3: code_removed on older python versions, you could define the code_removed tzinfo object yourself (example from datetime docs): code_removed then: code_removed", "@gustavopinsard: select max() and select last_value are different things, and can give different results.", "use it as little as possible. and that usually means never, it boiling down to a way of creating structures that violate the relational model, for instance by breaking the information principle and by creating bags instead of relations.", "solved! i found lack of library for postgresql on the system. only two steps solved it: 1)brew install postgresql 2)gem install pg", "do i need any kind of files/keys to force ssl? (excuse me for the ignorance)", "everyone already answered but just for the latest updates. if you want to know where all the configuration files reside then run this command in the shell code_removed", "mysql's explain output is pretty straightforward. postgresql's is a little more complicated. i haven't been able to find a good resource that explains it either. can you describe what exactly explain is saying or at least point me in the direction of a good resource?", "also working on ubuntu 15.04", "i can see why the code_removed file would be a better solution. i was just giving an alternative, not sure if it deserves a downvote though:)", "command line magic....", "this emulates the exact functionality of isnull, not sure why it's downvoted", "found a solution that worked for me here: you basically run the following command to manually start the server: code_removed", "code_removed sounds like a really bad idea", "thanks, this worked for me. removing the postmaster.pid in the accepted answer wasn't actually enough.", "@infamouse if the logs are annoying try chown-ing the.keep files and chmod-ing them so that the user that postgres runs as cannot see the files ( note this might be impossible )", "i had similar problem and i fixed it in pg_hba.conf when removing all ident methods even for ip6 address (in spite i have only ip4 on machine). code_removed", "note that originaldb needs to be idle (no write transactions) for this to work.", "wow... only this worked for me! can you please give a more detailed explanation why we should delete code_removed if the computer was abruptly restarted?", "mine was under /users/<user>/library/application support/postgres/var-9.6/postmaster.pid", "\"this product has been terminated before reaching maturity\"", "possible duplicate of truncating all tables in a postgres database", "this works after code_removed has been successfully run. otherwise it silently fails (but appears to have worked, with the service showing as started in code_removed.", "this script does not work at all for me. i cannot run multiple queries like that. i see three queries, two inside the while statement, one after that and one after the client.end statement. how do i get something like this to work? i want to create multiple tables with one script in my case. is this even possible?", "it is pretty bad. assume some e-mail provider goes out of business. users will then want to change their e-mail. if you have used e-mail as primary key, all foreign keys for users will duplicate that e-mail, making it pretty damn hard to change... ... and i haven't even started talking about performance considerations.", "postgres allows: code_removed this syntax is not standard sql, but it is much more convenient for this type of query than standard sql. i believe oracle (at least) accepts something similar.", "yes there is code_removed code_removed to return the row if it already exists code_removed if the row does not exist it will return the inserted one else the existing one. btw, if the pair \"key\"/\"value\" makes it unique then it is the primary key, and there is no need for an id column. unless one or both of the \"key\"/\"value\" pair can be null.", "not sure, i suppose you want to send an escape string to the prepared statement.", "sorry, i forgot that i ran into that too. added extra step to answer.", "anytime, mate:)", "using pgadmin, disconnect the database that you want to use as a template. then you select it as the template to create the new database, this avoids getting the already in use error.", "code_removed", "postgresql 9.0 or later: recent versions of postgres (since late 2010) have the code_removed function which will do exactly what the question asked for, even letting you specify the delimiter string: code_removed postgres 9.0 also added the ability to specify an code_removed clause in any aggregate expression; otherwise, the order is undefined. so you can now write: code_removed or indeed: code_removed postgresql 8.4 or later: postgresql 8.4 (in 2009) introduced the aggregate function code_removed which concatenates the values into an array. then code_removed can be used to give the desired result: code_removed code_removed for pre-9.0 versions: in case anyone comes across this looking for a compatibilty shim for pre-9.0 databases, it is possible to implement everything in code_removed except the code_removed clause. so with the below definition this should work the same as in a 9.x postgres db: code_removed but this will be a syntax error: code_removed tested on postgresql 8.3. code_removed custom variations (all postgres versions) prior to 9.0, there was no built-in aggregate function to concatenate strings. the simplest custom implementation (suggested by vajda gabo in this mailing list post, among many others) is to use the built-in code_removed function (which lies behind the code_removed operator): code_removed here is the code_removed documentation. this simply glues all the strings together, with no separator. in order to get a \", \" inserted in between them without having it at the end, you might want to make your own concatenation function and substitute it for the \"textcat\" above. here is one i put together and tested on 8.3.12: code_removed this version will output a comma even if the value in the row is null or empty, so you get output like this: code_removed if you would prefer to remove extra commas to output this: code_removed then add an code_removed check to the function like this: code_removed", "same as answers by user5542464 and piyush s. wanare but split in two steps: code_removed otherwise the pipe asks the two passwords in the same time.", "you're after the code_removed syntax. code_removed references code sample here: group by in update from clause and here formal syntax specification", "thanks for this tip, darren", "under my linux installation, it's here: code_removed you can change it with code_removed", "what is a sql code_removed and what are different types?", "on mac: code_removed the directory can't be entered, but you can look at the content via: code_removed", "since this question is the first in search results, i'll put a different solution for a different problem here anyway, in order not to have a duplicate title. the same error message can come up when running a query file in code_removed without specifying a database. since there is no code_removed statement in postgresql, we have to specify the database on the command line, for example: code_removed", "or you can set up crontab to run a script. inside that script you can set an environment variable like this: code_removed this way if you have multiple commands that would require password you can put them all in the script. if the password changes you only have to change it in one place (the script). and i agree with joshua, using code_removed generates the most flexible export format and is already compressed. for more info see: pg_dump documentation e.g. code_removed", "to expand on the above and make a quick reference: to make a user a superuser: code_removed to make a user no longer a superuser: code_removed to just allow the user to create a database: code_removed you can also use code_removed and code_removed to allow a user privileges without making them a superuser. documentation", "@natim from the docs: code_removed but you can send an encrypted password: code_removed postgresql.org/docs/current/static/sql-createrole.html", "note, all tables and sequences inside the database will still be assigned to the original owner.", "@carlg, just for everybody's reference. mysql 5.6+ has full text search support with innodb engine", "just for the record: ruby on rails 4 application in os x with postgresapp (in this case 0.17.1 version needed - kind of an old project): code_removed", "you can also write as code_removed", "+1 for the line \"assume some e-mail provider goes out of business.\"", "auto incrementing primary key in postgresql: step 1, create your table: code_removed step 2, insert values into your table like this, notice that mytable_key is not specified in the first parameter list, this causes the default sequence to autoincrement. code_removed step 3, select * from your table: code_removed step 4, interpret the output: code_removed observe that mytable_key column has been auto incremented. protip: you should always be using a primary key on your table because postgresql internally uses hash table structures to increase the speed of inserts, deletes, updates and selects. if a primary key column (which is forced unique and non-null) is available, it can be depended on to provide a unique seed for the hash function. if no primary key column is available, the hash function becomes inefficient as it selects some other set of columns as a key.", "the answer has been improved several times. any chance that somebody reverts the down-vote? it really does answer the question perfectly. cheers!", "use code_removed which is according to the documentation is \"somewhat faster than the text and csv formats.\" only do this if you have millions of rows to insert, and if you are comfortable with binary data. here is an example recipe in python, using psycopg2 with binary input.", "when you install postgresql using homebrew: code_removed at the end of the output you will see this methods to start server: code_removed i think this is the best way. you can add alias into your.profile for convenience.", "sphinx rt allows you to do partial updates/removals. it is in early stage but already [almost] works. sphinxsearch.com/wiki/doku.php?id=rt_tutorial", "nice, but sadly doesn't work for me, i get \"query failed: error: permission denied for relation direction_lookup\"", "what about cross join?", "i cannot comment palehorse answer so i added my own answer. palehorse logick is ok but efficiency can be bad with big data sets. code_removed it is faster if you have indexes on columns and data set is bigger then few records.", "i'm going to use this as row_number() does not work in sql 2000 (yes, we have a client on sql 2000 still) specifically, i'm going to replace the '5' with a iterator variable of a loop and use that to copy and modify each row of a table in turn. maybe someone will see this comment and find this useful", "change the encoding option on import. i set mine to \"windows-1251\" and it worked without complaint.", "this works for me: code_removed", "try: code_removed", "i tried to 'touch /usr/local/var/postgres/server.log'. no luck though", "does not work for me. i get: code_removed", "it's a shame amazon rds doesn't support plpython3u!", "+1 for mentioning the cascading update problem. that's why friends let friends only use surrogate keys;-).", "@johnigneel \"paths\" in code_removed can contain json array indexes too. also, for 9.6+, there is a dedicated code_removed function, if you want to expand the array (good question though, i'll update the answer soon). -- for earlier versions, it would be rather complicated to introduce array index support (but in theory, it's possible).", "why i didn't know about encrypted command. probably good that i'm not dba...", "if it really is utf-16be, and you're still getting invalid byte sequence errors, you probably have bad data. but you can try converting the tsv file to the same encoding your shell uses. (use code_removed.)", "in response to @priestc and @sebastian, what if you do something like this? code_removed i just tried this code and it seems to work, failing silently without having to care about any possible errors, and working when the query is good.", "here is the solution for ubuntu users first we have to stop postgresql code_removed create a new file called /etc/apt/sources.list.d/pgdg.list and add below line code_removed follow below commands code_removed now we have everything, just need to upgrade it as below code_removed that's it. mostly upgraded cluster will run on port number 5433. check it with below command code_removed", "you're sort of right here. default postgres configuration uses trust authentication for local system accounts. however most production setups get rid of this block right after installing rdbms.", "hello world:)the best but strange way for me was to do next things. 1) download postgres93.app or other version. add this app into /applications/ folder. 2) add a row (command) into the file code_removed (which is in my home directory): export path=/applications/postgres93.app/contents/macos/bin/:$path it's a path to code_removed from code_removed. the row (command) runs every time console is started. 3) launch code_removed from code_removed folder. it starts a local server (port is \"5432\" and host is \"localhost\"). 4) after all of this manipulations i was glad to run code_removed and other commands and to see that it worked! code_removed can be made to run every time your system starts. 5) also if you wanna see your databases graphically you should install code_removed. it's good way to see your postgres db as pretty data-tables of, course, it's helpful only for local server. i will be glad if this instructions help others who has faced with this problem.", "not just a shell. any reasonably sane program which reads from stdin and interprets the empty string as eof will accept ^d.", "c dbname is a shorter version", "you some kind of genius man!", "tested and working with pg 9.6", "it is not true that postgresqls inheritance feature violates the relational model by breaking the information principle. the information principle says, that all data in a relational database is represented by data values in relations and all query results are again represented as a relation.(en.wikipedia.org/wiki/relational_model) this is always the case, since all tables, that inherit another table, are simple tables again. for that reason there is also no such thing as a \"bag\", whatever that means.", "but your recommended, nothing in memory!!! and if your batch size can be small number, very-very bad worked it's class :( i try npgsql copyin class, because it's like as csv formatted mapping in pg query statement's. you can try for big table?", "incidentally, if someone has any information on how to alias the big, repeated expression, i'd be glad to hear it.", "do you want a bit column or an actual code_removed column?", "semantically you're right. but i seriously doubt if the optimiser will realise it. (it is futile, of course)", "if you are using an oracle database, this guide may also help.", "still no change for me...", "i did not find this in apt-get. supported anymore?", "it will complete without error, it may or may not give useful results. you need to know the intended encoding of the data.", "it'd be better linking to insert documentation instead of pointing to release. doc link: postgresql.org/docs/9.5/static/sql-insert.html", "@justbob no, it isn't, but i find it wise to stay within a major version or two. i'm really aiming at those people still on 8.3 or older, which is just absurd. 8.4 is marginal, i'd want to be on 9.1 at the moment and using 9.2 in my testing in preparation for rolling it out in the next six months or so. you save so much time using newer versions because issues you're facing are already solved in the new version; witness the vismap and fsm, autovac improvements, etc etc.", "@awesome-o: the goal is to retrieve 1000 rows, i start with an extra 10 % to compensate for a few gaps or (unlikely but possible) duplicate random numbers... the explanation is in my answer.", "i am having your exact same problem, but your solution did not work for me. i think this is a permissions problem but i don't have the knowledge of file permissions to fix it.", "@greg @rickya instead of deleting the whole code_removed it is sufficient to issue the command with some whitespace before code_removed, and it will not be stored in code_removed. this same handy trick is available in standard shell as well.", "disadvantages of using an email address as a primary key: slower when doing joins. any other record with a posted foreign key now has a larger value, taking up more disk space. (given the cost of disk space today, this is probably a trivial issue, except to the extent that the record now takes longer to read. see #1.) an email address could change, which forces all records using this as a foreign key to be updated. as email address don't change all that often, the performance problem is probably minor. the bigger problem is that you have to make sure to provide for it. if you have to write the code, this is more work and introduces the possibility of bugs. if your database engine supports \"on update cascade\", it's a minor issue. advantages of using email address as a primary key: you may be able to completely eliminate some joins. if all you need from the \"master record\" is the email address, then with an abstract integer key you would have to do a join to retrieve it. if the key is the email address, then you already have it and the join is unnecessary. whether this helps you any depends on how often this situation comes up. when you are doing ad hoc queries, it's easy for a human being to see what master record is being referenced. this can be a big help when trying to track down data problems. you almost certainly will need an index on the email address anyway, so making it the primary key eliminates one index, thus improving the performance of inserts as they now have only one index to update instead of two. in my humble opinion, it's not a slam-dunk either way. i tend to prefer to use natural keys when a practical one is available because they're just easier to work with, and the disadvantages tend to not really matter much in most cases.", "you can running directly from the bash specifying the postgres db as follow: code_removed", "you need to restart the postgresql service after this is done", "alter sequence worked perfect for me. i had uses copy to bring in some data and there were gaps in the primary keys and insert's were throwing duplicate key exceptions. setting the sequence did the trick. 9.4", "it works perfect when used in pgadmin 4", "code_removed for amazon rds postgres 9.6 instance", "there is nothing wrong with quoting. in fact, it's postgres that's the weird one here with a caseless convention for schema. migrating from any other database requires this.", "what a ridiculously complicated command just to start and stop the program", "this works on almost all prompts, people!", "thanks this was a great solution", "+1 very useful function! our sequence names didn't match the table names exactly, so i used code_removed instead of code_removed. works perfectly.", "the answer of mark byers is the optimal in this situation. though in more complex situations you can take the select query that returns rowids and calculated values and attach it to the update query like this: code_removed this approach lets you develop and test your select query and in two steps convert it to the update query. so in your case the result query will be: code_removed note that column aliases are mandatory otherwise postgresql will complain about the ambiguity of the column names.", "this worked for me too. cheers!", "do i have to create a new sequence for every table?", "in an ideal world - yes, and yet, the accepted answer here, as you can see above - just the link also. same as there, it would be just too much to make an abstract from the information the link provides, and considering that both links are given to github's public repositories, the chances of them going dead are not more than the chances for stackoverflow to go dead.", "i am mystified why people think slide decks make good technical documentation. a video of the talk might be helpful, but the information density of that slide deck is very close to zero. in the first six slides (1/5th of the total), there is exactly 1 sentence of technical content: \"\u2022 explain works on any dml not just select (ie update, delete, and insert)\". my biggest misunderstanding is what \"startup\" time means, and that's not explained anywhere in these ~30 slides.", "thanks! had the same problem after upgrading to yosemite. brew upgrade postgres didn't help.", "oh i see now. well, i stand by my opinion that using ms sql server 2000 today is not worth the trouble.", "didn't work for me on ubuntu 11.04 code_removed", "this worked for me too. however i left the password and the username blank.", "@andreydeineko i'm not that familiar with ruby, but if the result will be a customer instance, then maybe you should use a column alias too, like code_removed -- without an alias, the column will have an arbitrary name if its value is calculated.", "is it possible to compare two databases with identical structure? let say that i have two databases db1 and db2 and i want to check if there is a difference in data between them.", "if you are facing this issue with rails and you know that you already have created that user-name with password along with correct rights then you just need to put following at the end of your database.yml file. code_removed overall file will look like below code_removed you do not need to touch you code_removed file at all. happy coding", "@ypercube\u1d40\u1d39 it's w3schools; w3fools is a now-defunct website that is unassociated with w3schools. also, while the idea may have been an unoriginal one, these images themselves were ripped directly from w3schools, so they should be attributed as such.", "somehow i've managed to completely bugger the install of postgresql on ubuntu karmic. i want to start over from scratch, but when i \"purge\" the package with apt-get it still leaves traces behind such that the reinstall configuration doesn't run properly. after i've done: code_removed it said code_removed i have a \"/etc/postgresql\" with nothing in it and \"/etc/postgresql-common/\" has a 'pg_upgradecluser.d' directory and root.crt and user_clusters files. the /etc/passwd has a postgres user; the purge script doesn't appear to touch it. there's been a bunch of symptoms which i work through only to expose the next. right this second, when i run that command \"pg_createcluster...\" it complains that '/var/lib/postgresql/8.4/main/postgresql.conf does not exist', so i'll go find one of those but i'm sure that won't be the end of it. is there not some easy one-liner (or two) which will burn it completely and let me start over?", "you can select the database when connecting with psql. this is handy when using it from a script: code_removed", "@ajedi32 this should be part of the accepted answer! thanks", "@jin.x i personally think the csv output (which is the accepted answer) would be the easiest way.", "here's the \"inline\" way: code_removed first we create a set from array, then we select only distinct entries, and then aggregate it back into array.", "also, beware that on some gnu/linux distributions (e.g. debian jessie) code_removed may not actually restart postgresql service you have configured (i don't understand why yet), so changes in the configuration file won't be applied. it is safer to use code_removed (or code_removed on debian).", "@igo, thanks, i've updated the code.", "@nelsonic indeed. should i swap the links, or not? it doesn't seem to be by the same person who was maintaining it. some kind of fork, it looks like.", "caution: code_removed outputs the major and minor version (e.g., \"2.1\"), but not the revision number (e.g., \"2.1.4\"), like code_removed and code_removed do.", "also it did not recommend how to resolve the issue, so did not answer the question.", "i did version 8.3 and, yes, it looks like everything is there.", "@kibibu of course it will, it's truncate:)", "using the ilike operator (as shown in other answers below) is a simpler approach, even though this is the most voted answer.", "code_removed this will return 1 if the database specified exists or 0 otherwise. also, if you try to create a database that already exists, postgresql will return an error message like this: code_removed", "this is not a problem. foreign-key cascading exists to solve this issue. if a user changes their email, the change will cascade to all the tables using it as foreign key.", "if you run into a permissions problem, before trying this, use copy... from stdin", "here is an answer on solr that is a good pair to this answer on sphinx", "@sleke i love the phrase:\"that's why friends let friends only use surrogate keys", "in case you are looking for sql's start-up file, it is called code_removed and you can open it with a text editor in your terminal.", "code_removed didn't work for me i had to use code_removed, not sure if that's a typo in your answer or some implementation issue at my end.", "solved! i found lack of library for postgresql on the system. only two steps solved it: 1)brew install postgresql 2)gem install pg", "explaining_explain.pdf could help too.", "i'm coming to postgres from oracle and looking for a way to find the table and index size in terms of bytes/mb/gb/etc, or even better the size for all tables. in oracle i had a nasty long query that looked at user_lobs and user_segments to give back an answer. i assume in postgres there's something i can use in the information_schema tables, but i'm not seeing where. thanks in advance.", "note that code_removed alone will list tables in the public schema of the database you're using. i like to keep my tables in separate schemas, so the accepted answer didn't work for me. to list all tables within a specific schema, i needed to: 1) connect to the desired database: code_removed 2) specify the schema name i want to see tables for after the code_removed command, like this: code_removed this shows me the results i'm interested in: code_removed", "possible duplicate of export postgres table to csv file with headings", "i am having your exact same problem, but your solution did not work for me. i think this is a permissions problem but i don't have the knowledge of file permissions to fix it.", "setting the pgpassword environment variable is not a recommended practice by the documentation (postgresql.org/docs/current/static/libpq-envars.html): use of this environment variable is not recommended for security reasons, as some operating systems allow non-root users to see process environment variables via ps; instead consider using the ~/.pgpass file", "as mentioned above this has to do with the fact of having two ruby archs on rbenv code_removed what i had to do was simply install code_removed gem forcing code_removed arch to be used with this command: code_removed remember to have your code_removed up to date add the path of your postgres, in this case im using postgres app (code_removed) instead of code_removed ( by default this is the location: code_removed reload bash with code_removed after doing this i was able to finally successfully install code_removed hope this helps!", "code_removed can be used to avoid any incorrect assumptions about the sequence name. this resets the sequence in one shot: code_removed or more concisely: code_removed however this form can't handle empty tables correctly, since max(id) is null, and neither can you setval 0 because it would be out of range of the sequence. one workaround for this is to resort to the code_removed syntax i.e. code_removed but code_removed is of limited use because the sequence name and restart value cannot be expressions. it seems the best all-purpose solution is to call code_removed with false as the 3rd parameter, allowing us to specify the \"next value to use\": code_removed this ticks all my boxes: avoids hard-coding the actual sequence name handles empty tables correctly handles tables with existing data, and does not leave a hole in the sequence finally, note that code_removed only works if the sequence is owned by the column. this will be the case if the incrementing column was defined as a code_removed type, however if the sequence was added manually it is necessary to ensure code_removed is also performed. i.e. if code_removed type was used for table creation, this should all work: code_removed but if sequences were added manually: code_removed", "sir reassign accepted answer to the one made by @arun please. it is much less complicated and do not pull bunch of troubles after apply.", "note, all tables and sequences inside the database will still be assigned to the original owner.", "i think that code_removed is in fact code_removed, because code_removed is in the code_removed table which is joined over code_removed that is the referenced (parent) table. if you wanna filter on child table you should add code_removed and then use code_removed.", "@amphetamachine code_removedfor database name, check code_removed", "why doesn't postgres community just reinvent the autoincrement keyword?", "+1 for noting that mutable referenced keys are a pita", "in one line: code_removed with command a sql command such as code_removed or more readable: code_removed", "this is more useful than d when you're stuck with an pre-8.4 psql and a post-8.4 server - the d command is incompatible.", "using ubuntu 16.04 lts and had this same problem happen, except i'm using code_removed and code_removed to install gems. tried code_removed and then ran code_removed and it worked just fine.", "i just ran into the same issue for ubuntu 13.04. these commands removed postgres 9.1: code_removed it occurs to me that perhaps only the second command is necessary, but from there i was able to install postgres 9.2 (sudo apt-get install postgresql-9.2).", "try using code_removed on both databases and diffing the files.", "i have a simple list of ~25 words. i have a varchar field in postgresql, let's say that list is code_removed. i want to find any row in my table that has any of those words. this will work, but i'd like something more elegant. code_removed", "somehow i've managed to completely bugger the install of postgresql on ubuntu karmic. i want to start over from scratch, but when i \"purge\" the package with apt-get it still leaves traces behind such that the reinstall configuration doesn't run properly. after i've done: code_removed it said code_removed i have a \"/etc/postgresql\" with nothing in it and \"/etc/postgresql-common/\" has a 'pg_upgradecluser.d' directory and root.crt and user_clusters files. the /etc/passwd has a postgres user; the purge script doesn't appear to touch it. there's been a bunch of symptoms which i work through only to expose the next. right this second, when i run that command \"pg_createcluster...\" it complains that '/var/lib/postgresql/8.4/main/postgresql.conf does not exist', so i'll go find one of those but i'm sure that won't be the end of it. is there not some easy one-liner (or two) which will burn it completely and let me start over?", "this link helped me suite.opengeo.org/docs/latest/dataadmin/pggettingstarted/\u2026", "from what i can read, dblink doesn't handle the case where you want a query that spans two databases.", "same thing, but i found the new user didn't need to have the createdb permission. i created a regular user, granted that user role to my admin user, then created the database using the admin user with the owner set to the regular user.", "i have a table created in postgresql. i want to look at the sql statement used to create the table but cannot figure it out. how do i get the 'create table\" sql statement for an existing table in postgresql via commandline or sql statement?", "thanks! this also solved the less informative error code_removed for me. adding it here so search engines can pick up on it.", "i don't have any virus scanner. i don't know what code_removed is, so i don't think i put it on external storage.", "that's true. the post was be edited.", "still works! thanks!", "@antipattern you must pass option code_removed also.", "one way to do this: code_removed other way: code_removed documentation for code_removed.", "code_removed is part of ansi sql, and supported in all dbms. i followed the link, and the document mentions nothing about extensions. perhaps the link is incorrect or out of date?", "(on psql 9.2) if i type in code_removed, it gives me the password; if i type in code_removed it gives the password and then warnings code_removed", "i have simple question: i have a code_removed database: code_removed. how would i get the highest 10 scores the fastest? update: i will be doing this query multiple times and am aiming for the fastest solution.", "this query is better shown here note that they suggest \" d table\" too", "hmm, actually, if you downvote... maybe don't say why? meta.stackoverflow.com/questions/252297/\u2026 or maybe say why, but log out first so you're anonymous.", "i tried using pg_dump but i get \"access is denied\".", "code_removed. i guess that doesn't currently work if there are any extensions.", "i'm adding a new, \"not null\" column to my postgresql database using the following query (sanitized for the internet): code_removed each time i run this query, i receive the following error message: code_removed i'm stumped. where am i going wrong? note: i'm using pgadmin iii (1.8.4) primarily, but i received the same error when i ran the sql from within terminal.", "show data_directory; command points to exact location of data. searching specific folder is painful as someone else might have installed it for you and now you do not know the configuration, so following sql helps to save the time.:) thanks mike.", "personally, i do not use any information for primary key when designing database, because it is very likely that i might need to alter any information later. the sole reason that i provide primary key is, it is convenience to do most sql operation from client-side, and my choice for that has been always auto-increment integer type.", "@vyegorov is right, with the caveat that for actual data from explain analyze you should understand that the total time taken by the node is divided by loops to show the time per iteration. as you would expect, it is the total time for the node which included in the enclosing nodes.", "and if u want to escape s'tring from text column on insertion in case of procedural language etc, then you can use quote_literal(column_name) string function.", "code_removed", "on windows, the pgdata directory that the postgressql docs describe is at somewhere like code_removed. the data for a particular database is under (for example) code_removed, where i guess 100929 is the database number.", "code_removed", "according to postgresql documentation (4.1.2.1. string constants): code_removed see also the standard_conforming_strings parameter, which controls whether escaping with backslashes works.", "use code_removed which is according to the documentation is \"somewhat faster than the text and csv formats.\" only do this if you have millions of rows to insert, and if you are comfortable with binary data. here is an example recipe in python, using psycopg2 with binary input.", "if you are using postgresql 8.2 or newer, use this for csv: code_removed and this of tsv, with proper nulls: code_removed the csv form will properly quote any fields that contain the double-quote character. see the postgresql documentation of your specific version for more details and options for copy.", "what version of pg are you on?", "just use rollback example code code_removed", "same error for me and i didn't experience it until i downloaded os x 10.9 (mavericks). sigh, another os upgrade headache. here's how i fixed it (with homebrew): install another build of xcode tools (typing code_removed in the terminal will prompt you to update the xcode build tools) code_removed code_removed after that code_removed worked for me.", "one more confirm: using django, i got the same error; i needed to run those grants before django could interact with the database.", "serial is syntactic sugar and is not stored in the db metadata, so the code above would be 100% equivalent.", "this query is better shown here note that they suggest \" d table\" too", "using psql: dt or: code_removed", "definition: joins are way to query the data that combined together from multiple tables simultaneously. types of joins: concern to rdbms there are 5-types of joins: equi-join: combines common records from two tables based on equality condition. technically, join made by using equality-operator (=) to compare values of primarykey of one table and foriegn key values of antoher table, hence result set includes common(matched) records from both tables. for implementation see inner-join. natural-join: it is enhanced version of equi-join, in which select operation omits duplicate column. for implementation see inner-join non-equi-join: it is reverse of equi-join where joining condition is uses other than equal operator(=) e.g,!=, <=, >=, >, < or between etc. for implementation see inner-join. self-join:: a customized behavior of join where a table combined with itself; this is typically needed for querying self-referencing tables (or unary relationship entity). for implementation see inner-joins. cartesian product: it cross combines all records of both tables without any condition. technically, it returns result set of a query without where-clause. as per sql concern and advancement, there are 3-types of joins and all rdbms joins can be achvied using these types of joins. inner-join: it merges(or combiens) matched rows from two tables. the matching is done based on common columns of tables and their comparing operation. if equaility based condition then: equi-join performed, otherwise non-equi-join. **outer-join:**it merges(or combines) matched rows from two tables and unmatched rows with null values. however, can customized selection of un-matched rows e.g, selecting unmatched row from first table or second table by sub-types: left outer join and right outer join. 2.1. left outer join (a.k.a, left-join): returns matched rows form two tables and unmached from left table(i.e, first table) only. 2.2. right outer join (a.k.a, right-join): returns matched rows from two tables and unmatched from right table only. 2.3. full outer join (a.k.a outer join): returns matched and unmatched from both tables. cross-join: this join does not merges/combiens instead it performs cartisian product. note: self-join can be achived by either inner-join, outer-join and cross-join based on requirement but table must join with itself. for more information: examples: 1.1: inner-join: equi-join implemetation code_removed 1.2: inner-join: natural-join implementation code_removed 1.3: inner-join with non-eqijoin implementation code_removed 1.4: inner-join with self-join code_removed 2.1: outer join (full outer join) code_removed 2.2: left join code_removed 2.3: right join code_removed 3.1: cross join code_removed 3.2: cross join-self join code_removed //or// code_removed", "what's the equivalent to code_removed (from mysql) in postgresql?", "thanks, you saved my day!", "i came across this answer while building a simple schema comparision tool myself. i went through your website and the tool looks very promising. can't wait to try out the beta version", "i just ran into the same issue for ubuntu 13.04. these commands removed postgres 9.1: code_removed it occurs to me that perhaps only the second command is necessary, but from there i was able to install postgres 9.2 (sudo apt-get install postgresql-9.2).", "a lot of good mysql specific tips can be found at", "you need to join on schema too. if you have constraints with the same name over multiple schemas you might get false positives.", "i recently upgraded to osx 10.7, at which point my rails installation completely borked when trying to connect to the psql server. when i do it from the command line using code_removed it works totally fine, but when i try to run the rails server or console with the same username and password, i get this error code_removed any ideas what might be going on would be super helpful! thanks!", "this actually gives you the port number not the server host.", "while mysql will silently truncate the data when the value exceeds the column size, postgresql will not and will raise a \"value too long for type character varying(n)\" error.", "the key here is adding postgres to your path (step 2). that helped me. if you installed postgres using homebrew, you can add it to your path by adding the following line to your.bash_profile: code_removed \u2013 keep in mind your version number may be different.", "this is amazing thanx! it should be noted that i needed to add a cast at the assignment (line 21 in the function code) like this: code_removed to make it work correctly for me.", "@timo, this is a query to be run through postgresql. this could be done through pgadmin, or any other mechanism for running a query. were you trying to run it from an ubuntu shell? (this won't work)", "this will fail if run concurrently in two sessions, because neither update will see an existing row so both updates will hit zero rows, so both queries will issue an insert.", "this is not ideal. throwing it in code_removed will keep everything in one place too, without adding an extra layer of indirection. plus, if all i wanted to do with export a variable, i'd do that in my code_removed file, or whatever it is.", "this followed by code_removed worked for me", "instead of manually dumping your db and saving it into git, use offscale datagrove. datagrove is basically a db version control - it tracks changes to the entire db (schema and data) and allows you to tag versions into it's repository. you can use it alongside git and have it tag a version each time you check-in code, and load the right db state whenever you pull code. specifically regarding \"edit 2\" - with datagrove you can simply have two branches of the db, one for each of you code branches. when you load a certain branch of the code, datagrove will automagically re-create the entire db state, with all the data inside for that version/ branch. this means you can switch between development branches with a single, simple command.", "if you have a choice, go for constant/immutable keys; less work for you down the road; just because sql supports cascading updates doesn't mean it's always a good idea!", "depends on the distribution \u2014 for fedora 20 it's under code_removed. better to find out using code_removed.", "you can first insert data into blob field and then copy to text field with the folloing function code_removed -- code_removed", "following ae the steps i followed to uninstall and reinstall. which worked for me. first remove the installed postgres:- sudo apt-get purge postgr* sudo apt-get autoremove then install 'synaptic': sudo apt-get install synaptic sudo apt-get update then install postgres sudo apt-get install postgresql postgresql-contrib", "remote scenario. but if you're trying to run tests in a rails app, and you get something like \"activerecord::statementinvalid: pg::objectinuse: error: database \"myapp_test\" is being accessed by other users detail: there is 1 other session using the database.\" make sure you close pgadmin or any other postgres gui tools before running tests.", "right, the ruby pg gem wraps the usual postgresql c libraries that come with the ubuntu/debian/... code_removed package.", "i have a feeling it might be it for me but can't make it work. i'm getting this: ln: /var/pgsql_socket/: no such file or directory", "what's the point of echo \"` chmod 0600 $home/.pgpass `\"? how about just chmod 0600 $home/.pgpass?", "this followed by code_removed worked for me", "copy (anysql query datawanttoexport) to 'fileablsoutepathwihname' delimiter ',' csv header; using this u can export data also.", "the alpha is available right now @avantikasaini and if you give it a try please let me know how it goes so i can improve it for everybody.", "code_removed shorter version", "table_name='mytable' should be tc.table_name='mytable' or else it throws an ambiguous error", "no dbms i know of has any \"optimization\" that will make a code_removed with a code_removed length perform better than one with a code_removed length that is not a power of 2. i think early sql server versions actually treated a code_removed with length 255 differently than one with a higher maximum length. i don't know if this is still the case. for almost all dbms, the actual storage that is required is only determined by the number of characters you put into it, not the code_removed length you define. so from a storage point of view (and most probably a performance one as well), it does not make any difference whether you declare a column as code_removed or code_removed. you should see the code_removed length provided for a code_removed column as a kind of constraint (or business rule) rather than a technical/physical thing. for postgresql the best setup is to use code_removed without a length restriction and a code_removed that limits the number of characters to whatever your business requires. if that requirement changes, altering the check constraint is much faster than altering the table (because the table does not need to be re-written) the same can be applied for oracle and others - in oracle it would be code_removed instead of code_removed though. i don't know if there is a physical storage difference between code_removed and e.g. code_removed in sql server. but apparently there is a performance impact when using code_removed as compared to code_removed. see this link (posted by erwin brandstetter as a comment) edit 2013-09-22 regarding bigown's comment: in postgres versions before 9.2 (which was not available when i wrote the initial answer) a change to the column definition did rewrite the whole table, see e.g. here. since 9.2 this is no longer the case and a quick test confirmed that increasing the column size for a table with 1.2 million rows indeed only took 0.5 seconds. for oracle this seems to be true as well, judging by the time it takes to alter a big table's code_removed column. but i could not find any reference for that. for mysql the manual says \"in most cases, code_removed makes a temporary copy of the original table\". and my own tests confirm that: running an code_removed on a table with 1.2 million rows (the same as in my test with postgres) to increase the size of a column took 1.5 minutes. in mysql however you can not use the \"workaround\" to use a check constraint to limit the number of characters in a column. for sql server i could not find a clear statement on this but the execution time to increase the size of a code_removed column (again the 1.2 million rows table from above) indicates that no rewrite takes place. edit 2017-01-24 seems i was (at least partially) wrong about sql server. see this answer from aaron bertrand that shows that the declared length of a code_removed or code_removed columns makes a huge difference for the performance.", "as per pablo above, to just drop from a specific schema, with respect to case: code_removed", "it works on postgresql too.", "select pg_cancel_backend(pid), pg_terminate_backend(pid) from pg_stat_activity where state = 'active';", "@tobias is there any alternative? it would seem that anyone with root rights could always see the password no matter what technique other than entering the password interactively (and the question is about cron). postgresql.org/docs/9.3/static/auth-methods.html#gssapi-auth mentions gssapi supporting single sign-on but no mention if that works non-interactively.", "hi guys, i like your answer and explanation, it is really helpful. could you please add an example using regexp_replace? thanks!", "this worked for me: code_removed", "good, but better append also the \"-l logfile.log\" param to log the output on file.", "teradata only allows with clause after version 14, i believe. i am sure it does not work with version 12.", "this assume that test-db exists. otherwise, create the new db with code_removed", "same thing here @frozenjim! why is the default design to not show anything if you don't type a semicolon!?!? i had no idea it was not executing haha..", "this helps when you want to put the command in a shell script -- code_removed doesn't seem to work, oddly.", "quick postgresql optimization (query optimizing) short read, explains a lot of things well and 'works' a real example which is nice for those of us that learn better that way. after seeing the wiki link to postgresql, figured i'd edit this post with links for mysql/oracle docs, not really an optimization guides specifically but both are good resources, especially the mysql one. for optimization and any other tuning features.", "this tool is solid gold, thanks.", "yes, i should have stated that the new table should be an exact copy of the original, including adding indices and such. my bad for being too brief. the reason for this is that there are also subtle diffculties of performing an alter on a table that may be live, and sometimes you need to stage it.", "we are switching hosts and the old one provided a sql dump of the postgresql database of our site. now i'm trying to set this up on a local wamp sever to test this. the only problem is that i don't have an idea how i can import this database in the postgresql 9 i have set up. i tried pgadmin iii but i can't seem to find an 'import' function. so i just opened the sql editor and pasted the contents of the dump there and executed it, it creates the tables but i keeps giving me errors when he tries to put the data in it. code_removed i've also tried to this with the command prompt but i can't really find the command that i need. if i do code_removed i get the error code_removed what's the best way to import the database?", "this version is by far the best as the code_removed command requires admin access", "can't you do this without restarting postgresql? can't you just specify the authentication method in the pg_user table?", "i had this issue with postgresql 9.6. i was able to fix it by doing: code_removed", "how to use (at client code_removed) from code_removed? not works for me", "@anwar it simply extends the various answers that state that the answer is to use a serial/sequence. this provides some important context to take into consideration.", "@clodoaldoneto: what is code_removed in your answer referring to?", "@bjelli is copy slower than copy? i have a 1.5mb file and a db.m4.large instance on rds and it's been hours that this copy command has been running (at least 3).", "see also the git-based backup tool code_removed", "thanks! talk about timely...", "try code_removed as i use this syntax in mysql", "i hope this edit is ok; i've added links to the relevant documentation, a quote that makes it utterly explicit that the referencing side of fk relationships doesn't produce an implicit index, shown how to see indexes in psql, rephrased the 1st par for clarity, and added a note that indexes aren't free so it's not always right to add them.", "it did help thanks", "your answer just contains information, that has already been added: stackoverflow.com/a/7696398/8283469", "try something like alter table table_name add constraint [df_table_name_created] default (getdate()) for [created_at] replacing table_name with the name of your table", "i have a feeling it might be it for me but can't make it work. i'm getting this: ln: /var/pgsql_socket/: no such file or directory", "i have the priveleges...", "using the ilike operator (as shown in other answers below) is a simpler approach, even though this is the most voted answer.", "i had to add the version -v '0.14.0' so that it worked with with mu project", "stunning.......", "@neall i just realised i've heavily edited your answer because i thought it was mine! oops. i hope you don't mind, but this way everything's in one place without so much commentary.", "possibly helpful post i wrote on automating pg_restore! medium.com/@trinity/\u2026", "@jstafford thanks, i already solved!:) the solution was to uninstall via homebew and then restart my computer right away, so then i would be able to reinstall postgres. the old version was running in the background, creating files and conflicts every time i tried to reinstall postgres.", "i need to run a select without actually connecting to any table. i just have a predefined hardcoded set of values i need to loop over: code_removed and i want to loop through those values. i can do: code_removed but this returns it as one row: code_removed i am using postgresql.", "ctrl-d also help", "follow the below steps to solve this issue in pgadmin: code_removed code_removed", "after installing postgresql i did the below steps. open the file code_removed for ubuntu it will be in code_removed and change this line: local all postgres peer to local all postgres trust restart the server code_removed login into psql and set your password psql -u postgres code_removed finally change the code_removed from local all postgres trust to local all postgres md5 after restarting the postgresql server, you can access it with your own password authentication methods details: trust - anyone who can connect to the server is authorized to access the database peer - use client's operating system user name as database user name to access it. md5 - password-base authentication for further reference check here", "code_removed i am getting the following error postgresql 8.2.11 code_removed i tried giving code_removed i tried giving code_removed what is the problem with my query?", "fair enough, alter table does lock the table according to the postgresql docs, however your non-transactional approach risks losing changes if the table is indeed live. also i'd suggest that any code that relies on column order is broken (that may be outside your control of course).", "according to dba.stackexchange.com/a/10696/27757 code_removed is internally translated to a regex search", "note that this will not remove the system tables (such as those that begin with code_removed) as they are in a different schema, code_removed.", "use code_removed in connection. code_removed", "code_removed is less efficient than something like: code_removed (unless accuracy critical, then yes, use code_removed )", "where do the results get saved to? my query runs but the file doesn't show up anywhere on my computer. this is what i'm doing: copy (select a,b from c where d = '1') to stdout with csvheader > abcd.csv", "@brauliobo my tests often do many tx's at high tps... because i try to simulate production, including concurrency-heavy workloads. if you mean \"single-connection, linear testing\" then i'd agree with you.", "it doesn't work for me. when i dropped schema public, i tried to load backup from sql file and saw errors that some constraints are violated!", "is there any danger running code_removed?? we just had an incident where some relations \"disappeared\" and i ran the said command. just got bollocked by the sysadmin, however he did not justify why this was a bad thing to do. i did put the webapp in maintenance mode so there wasn't any transactions/ queries going on at the time. thanks guys... so in short it wont damage anything but it could loose lots of valuable diagnostic info.", "you can use below query to find the size of all databases of postgresql. reference is taken from this blog. code_removed", "mmmm.. i have pgpsql functions, that have an empty routine_defintion, and state 'external' in the field routine_body. any hint where i can find those?", "follow the below steps to solve this issue in pgadmin: code_removed code_removed", "this doesnt seem to work for user postgres, even though i am connected to a database that i created (i.e. not a system database), it says this: error: cannot reassign ownership of objects owned by role postgres because they are required by the database system", "thanks for this tip, darren", "+1 for this answer. this what we use in several projects. ids need to be unique within one xml file only. if you name the ids from the use case being implement they are unique enough. you have to be careful not modifying already applied changesets otherwise you will get checksum errors.", "it happens all the time especially with self referencing tables. consider a company with different management tiers in different departments, or a generic hierarchical taxonomy. yes, i agree that this function is not the absolute best thing since sliced bread, but it's a useful tool in the right situation.", "note this method does not update sequences on the copied tables so further inserts may violate primary key constraints.", "just remember that this will probably save the db's user password in your command history.", "@olivierpons yes, it's possible. add code_removed at the and of the query and it will return either a new row id or nothing, if no row has been inserted.", "hello world:)the best but strange way for me was to do next things. 1) download postgres93.app or other version. add this app into /applications/ folder. 2) add a row (command) into the file code_removed (which is in my home directory): export path=/applications/postgres93.app/contents/macos/bin/:$path it's a path to code_removed from code_removed. the row (command) runs every time console is started. 3) launch code_removed from code_removed folder. it starts a local server (port is \"5432\" and host is \"localhost\"). 4) after all of this manipulations i was glad to run code_removed and other commands and to see that it worked! code_removed can be made to run every time your system starts. 5) also if you wanna see your databases graphically you should install code_removed. it's good way to see your postgres db as pretty data-tables of, course, it's helpful only for local server. i will be glad if this instructions help others who has faced with this problem.", "@davos they usually aren't, but things like cheque numbers canhave business requirements", "how do i check what permissions i have?", "this \"comprehensive list\" has not been updated for a while. pgadmin 4 v1.0, which is not included, was released sept. 29, 2016.", "@acjohnson55 thanks!", "@a_horse_with_no_name any references to the fact window functions are faster, please?", "you need to use code_removed instead of code_removed for postgres 9.1 and below. see stackoverflow.com/a/5408501/444774", "book: troubleshooting oracle performance (antognini christian)", "require is not part of javascript, it is a keyword used in nodejs. nodejs isnt the dom you use client side.so a script that may work with nodejs might not work in the browser. can you call window or document in nodejs? no, well same for require with the browser.", "( code_removed: goto option 3: insert with returning ) recall that in postgresql there is no \"id\" concept for tables, just sequences (which are typically but not necessarily used as default values for surrogate primary keys, with the serial pseudo-type). if you are interested in getting the id of a newly inserted row, there are several ways: option 1: code_removed. for example: code_removed the name of the sequence must be known, it's really arbitrary; in this example we assume that the table code_removed has an code_removed column created with the code_removed pseudo-type. to avoid relying on this and to feel more clean, you can use instead code_removed: code_removed caveat: code_removed only works after an code_removed (which has executed code_removed ), in the same session. option 2: code_removed this is similar to the previous, only that you don't need to specify the sequence name: it looks for the most recent modified sequence (always inside your session, same caveat as above). both code_removed and code_removed are totally concurrent safe. the behaviour of sequence in pg is designed so that different session will not interfere, so there is no risk of race conditions (if another session inserts another row between my insert and my select, i still get my correct value). however they do have a subtle potential problem. if the database has some trigger (or rule) that, on insertion into code_removed table, makes some extra insertions in other tables... then code_removed will probably give us the wrong value. the problem can even happen with code_removed, if the extra insertions are done intto the same code_removed table (this is much less usual, but the risk still exists). option 3: code_removed with code_removed code_removed this is the most clean, efficient and safe way to get the id. it doesn't have any of the risks of the previous. drawbacks? almost none: you might need to modify the way you call your insert statement (in the worst case, perhaps your api or db layer does not expect an insert to return a value); it's not standard sql (who cares); it's available since postgresql 8.2 (dec 2006...) conclusion: if you can, go for option 3. elsewhere, prefer 1. note: all these methods are useless if you intend to get the last globally inserted id (not necessarily in your session). for this, you must resort to code_removed (of course, this will not read uncommitted inserts from other transactions).", "are you using rds? because i get the same issue when i log in as the \"superuser\" that they create for you. the way that i was able to fix this was to create a new group role that included my super user and the user who owned the schema. so for you this would mean adding your super user and test user to a new roles group: code_removed now you should be able to create your schmea", "even for postgresql the solution does not work in the case where a table has multiple unique keys (updating only one row). in that case you need to specify which key is being updated. there may be a cross-vendor solution using jdbc for example.", "@tommed - it has been done: stackoverflow.com/a/34639631/4418", "it's correct (standard) value, must be other explanation.", "i think x-istence is on the right track, but there are a few more improvements you can make to this strategy. first, use: code_removed to dump the tables, sequences, etc and place this file under version control. you'll use this to separate the compatibility changes between your branches. next, perform a data dump for the set of tables that contain configuration required for your application to operate (should probably skip user data, etc), like form defaults and other data non-user modifiable data. you can do this selectively by using: code_removed this is a good idea because the repo can get really clunky when your database gets to 100mb+ when doing a full data dump. a better idea is to back up a more minimal set of data that you require to test your app. if your default data is very large though, this may still cause problems though. if you absolutely need to place full backups in the repo, consider doing it in a branch outside of your source tree. an external backup system with some reference to the matching svn rev is likely best for this though. also, i suggest using text format dumps over binary for revision purposes (for the schema at least) since these are easier to diff. you can always compress these to save space prior to checking in. finally, have a look at the postgres backup documentation if you haven't already. the way you're commenting on backing up 'the database' rather than a dump makes me wonder if you're thinking of file system based backups (see section 23.2 for caveats).", "use something like liquibase this lets you keep revision control of your liquibase files. you can tag changes for production only, and have lb keep your db up to date for either production or development, (or whatever scheme you want).", "a minor nitpick, code_removed does create a code_removed behind the scenes: postgresql.org/docs/9.2/static/\u2026", "it seems to work in 8.4.11 too", "thank you very much! this one worked for me!", "reassign owned by doesn't work for objects owned by postgres.", "this command for only change auto generated key sequence value in postgresql code_removed in place of zero you can put any number from which you want to restart sequence. default sequence name will code_removed. for example, if your table name is code_removed and your field name is code_removed, then your sequence name will be code_removed. this is answer is same as @murugesanponappan's answer, but there is a syntax error in his solution. you can not use sub query code_removed in code_removed command. so that either you have to use fixed numeric value or you need to use a variable in place of sub query.", "it's not clear from this message what the correct syntax is. it is: alter sequence product_id_seq restart with 1453;", "the postgresql port is defined in your code_removed file. for me in ubuntu 14.04 it is: code_removed inside there is a line: code_removed changing the number there requires restart of postgresql for it to take effect.", "no, there is no danger of restarting postgres using the init.d method. however, to restart it because something weird happened is not a good idea, because it limits severely the amount of information you can collect to find the root cause and limits opportunities to fix it. also in all the years i have been involved with postgresql, i never encountered a situation in which a restart \"fixed\" the problem. the immediate 'incident' might be resolved but if there's a problem, it will still be there.", "if you think about the performace,may be you can use \"perform\" in a function just like this: code_removed", "a object-relational database management system isa relational database management system. if you read farther into postgsql documentation, you will find that postgsql is an ordbms. perhaps you are confusing ordbms with odbms such as objectivity/db.", "does this really work with type code_removed? i thought it would be necessary to use type code_removed...", "i wonder why truncation is so slow on postgresql.", "a note to future readers: the text below was last edited in august 2008. that's nearly 5 years ago as of this edit. software can change rapidly from version to version, so before you go choosing a dbms based on the advice below, do some research to see if it's still accurate. better? mysql is much more commonly provided by web hosts. postgresql is a much more mature product. there's this discussion addressing your \"better\" question apparently, according to this web page, mysql is fast when concurrent access levels are low, and when there are many more reads than writes. on the other hand, it exhibits low scalability with increasing loads and write/read ratios. postgresql is relatively slow at low concurrency levels, but scales well with increasing load levels, while providing enough isolation between concurrent accesses to avoid slowdowns at high write/read ratios. it goes on to link to a number of performance comparisons, because these things are very... sensitive to conditions. so if your decision factor is, \"which is faster?\" then the answer is \"it depends. if it really matters, test your application against both.\" and if you really, really care, you get in two dbas (one who specializes in each database) and get them to tune the crap out of the databases, and then choose. it's astonishing how expensive good dbas are; and they are worth every cent. when it matters. which it probably doesn't, so just pick whichever database you like the sound of and go with it; better performance can be bought with more ram and cpu, and more appropriate database design, and clever stored procedure tricks and so on - and all of that is cheaper and easier for random-website-x than agonizing over which to pick, mysql or postgresql, and specialist tuning from expensive dbas. joel also said in that podcast that comment would come back to bite him because people would be saying that mysql was a piece of crap - joel couldn't get a code_removed of rows back. the plural of anecdote is not data. he said: mysql is the only database i've ever programmed against in my career that has had data integrity problems, where you do queries and you get nonsense answers back, that are incorrect. and he also said: it's just an anecdote. and that's one of the things that frustrates me, actually, about blogging or just the internet in general. [...] there's just a weird tendency to make anecdotes into truths and i actually as a blogger i'm starting to feel a little bit guilty about this", "if you want to do this in pgadmin, it is much easier. it seems in postgressql, to add a auto increment to a column, we first need to create a auto increment sequence and add it to the required column. i did like this. 1) firstly you need to make sure there is a primary key for your table. also keep the data type of the primary key in bigint or smallint. (i used bigint, could not find a datatype called serial as mentioned in other answers elsewhere) 2)then add a sequence by right clicking on sequence-> add new sequence. if there is no data in the table, leave the sequence as it is, don't make any changes. just save it. if there is existing data, add the last or highest value in the primary key column to the current value in definitions tab as shown below. 3)finally, add the line code_removed to the default value in your primary key as shown below. make sure the sequence name is correct here. this is all and auto increment should work.", "ems is good. try it out sqlmanager.net/en/downloads", "looks like code_removed still working github.com/homebrew/homebrew-services", "can't be. the error you are quoting is from powershell, not from the windows command prompt. you are typing the command into the wrong shell.", "anyone looking at this for django should checkout the haystack app. haystacksearch.org", "connect to the database, then list the tables: code_removed that's how i do it anyway. you can combine those two commands onto a single line, if you prefer: code_removed", "@n.b. which rdbms are you referring to? sql server? there is an effect on performance. [n]varchar(max) performs slightly slower than [n]varchar(n). i was recently referred to this site. the same is not true for postgresql for all i know.", "late to the game, but, seriously, thanks for putting in the effort to explain things properly so that i understand!", "is there a postgresql function that will return a timestamp rounded to the nearest minute? the input value is a timestamp and the return value should be a timestamp.", "i think i'll make a plan to upgrad to the newer version, will make life so much easier", "+1, likewise, this was the solution for me as well, where my postgresql was already installed via brew. thanks jon for the post.", "well, see @claudix's reply below, but obviously value literals will need different escaping depending on their type postgresql.org/docs/current/static/datatype.html", "when i say \"w3fools\" i mean the \"w3schools\" site, so i don't see your point there. about the images, i went just now and visited their site. they have a strrict policy that all images should not be rediributed or reused without permission. so the question is not if we add attributions but whether we use or not. i suppose i should flag the answer to be deleted.", "@a_horse_with_no_name any references to the fact window functions are faster, please?", "you can try this: \"pg_dump -u remote_user -h remote_server -t table_to_copy source_db | psql target_db -u remote_user -h remote_server \"", "code_removed adding code_removed option worked in my case.", "simply adding the code_removed bit was all mine required to work", "100663296 bytes = 96 mb (in binary). shmmax is maximum size of a shared memory segment. now because we increased size of shared buffers we need to change shmmax to accomodate the increased memory for caching.", "right, the dt there is just an example to list the tables in the selected schema.", "that was it! thx man!!!", "i deleted the foreign key constraint, changed the datatype but after that unable to add the fk. getting the following error error: insert or update on table \"invoices\" violates foreign key constraint \"invoice_presale_fk\" detail: key (sale,cpf_cnpj)=(4,05943560000101) is not present in table \"presales\".", "code_removed is ansi standard, and supported sql server 2000+", "@clodoaldo: thanks for the answer, the revised version worked fine! the thing about not needing an id column is that i have a \"connection table\" that links a \"tag\" to an entity. i basically have three tables: entity, tag and entity_tag, and in the entity_tag table i have two columns: entity_id and tag_id. the end result that there is a many-to-many relationship between tags and entities, therefore the \"connection table\" entity_tag and therefore i need the id, do you agree with my reasoning would you say i'm breaking some best-practice rule?", "i don't have such a deep understanding of postgres... is there no locking option or something to guarantee that the server runs these two commands consecutively?", "and where is that file found? granted, you may need to make a list, since there seems to be no consistency between versions. i guess i'll just run find on '/'.", "create a code_removed file in the home directory of the account that code_removed will run as. see postgresql documentation libpq-pgpass for details of the format (including the last paragraph where it explains it will be ignored if you don't set the mode to code_removed).", "since you don't join code_removed, this results in wrong associations if the same enum name is present in more than one schema...", "there's also code_removed if you want a bigger data type that will never run out of unique values.", "i'm trying to create a cronjob to back up my database every night before something catastrophic happens. it looks like this command should meet my needs: code_removed except after running that, it expects me to type in a password. i can't do that if i run it from cron. how can i pass one in automatically?", "do i have to first create the csv file or will it be automatically generated?", "you are correct. i'm trying not to sound like a postgresql pusher. i see no real reason to use anything other than postgresql unless the design calls for a true object database. i see no point in mysql other than more people are familiar with it.", "ok, thats what i wanted to know, makes the issue of getting the comma separated list in there moot. thanks!", "see @paninapress's answer for postgres.app. it worked great for me and doesn't require installing another instance of postgres.", "spent a while trying to figure out what the hell was going on before i stumbled across this, thanks!", "one way to do this: code_removed other way: code_removed documentation for code_removed.", "if the database has open connections, this script may help. i use this to create a test database from a backup of the live-production database every night. this assumes that you have an.sql backup file from the production db (i do this within webmin). code_removed", "it'd be better linking to insert documentation instead of pointing to release. doc link: postgresql.org/docs/9.5/static/sql-insert.html", "if you are ok with discarding nonconvertible characters, you can use code_removed flag code_removed and then copy them to your table", "i had to specify database too. code_removed.", "wow, this is exactly what i needed. i was worried i'd need to create a function or a temp table, but this precludes all that--thank you!", "i need to change the owner of postgresql database. how to change owner of postgresql database in phppgadmin? thanks.", "@albertpeiro: thanks for pointing that out. i tested before i posted, but sometimes i'm doing three things at one time.", "in my case code_removed cut integration test time in less than half (including compiling). code_removed had no measurable additional effect. a ramdisk (i just used tmpfs) brought varying results (sometimes worse than without for some reason). the ramdisk also get's the full speed gain without setting code_removed.", "use pg_dump to dump table data, and then restore it with psql.", "how about giving just code_removed in code_removed? see", "thanks. same here - i did not touch anything... lost 3 hours of my life.", "tablea that we are inserting to is the destination, and the tablea in the dblink is the source.", "visualization for the win! i refer to that block frequently when i'm designing. so useful.", "this solved my problem successfully.", "thanks this work for me as well:+1:", "@conrad: although, he does point out that it's not a pita if you have a engine that supports on update cascade. it's a non-issue at that point code-wise; the only real issue is how extensive is the update and how wide is the key. email address may be a bit much, but a cascade update for a pk of 2-character country code isn't a big deal.", "i found this answer, and it was the only one that worked for me (mac\u00a0os) - after researching for about two days: code_removed see stack overflow question can't find the postgresql client library (libpq).", "there's also smallserial if you just want a smaller data type.", "anytime, mate:)", "postgres allows: code_removed this syntax is not standard sql, but it is much more convenient for this type of query than standard sql. i believe oracle (at least) accepts something similar.", "this solution is imo very good. a useful side effect - you can easily call the prepared statement multiple times.", "i have a table that i am trying to update multiple values at once. here is the table schema: code_removed i have the code_removed and want to insert multiple code_removed's at once. is there a syntax in code_removed that will let me do something like this code_removed how would i do this?", "host all all 0.0.0.0/0 md5 this entry will if i remember correctly let any ip connect. keep in mind this isn't node specific, but postgresql specific. also in postgresql.conf i have listen_addresses = '*'. for production setups please read the docs through to make sure you aren't opening holes anywhere. i use this in my dev setup so i'm fine in allow any machine connect.", "amazing answer! safe and simple", "restarting an application that has active connections. that's the ticket. don't know why i didn't try that first.", "thank you sir for saving my life...somehow my mac osx crashed and when it restarted postgres session was not killed.", "but what i heard that postgres-9.3+ both seems to be same performant. datadoghq.com/blog/\u2026", "$token$ worked for me thanks", "i was not able to run code_removed from pgadmin? do you know how to do it (it seems it was not recognizing the program)? i succeeded using it from the sql shell (psql) though.", "@imsop: how would you add a copy statement to an sql (on postgres 9.3) function? so the query gets saved to a.csv file?", "as per pablo above, to just drop from a specific schema, with respect to case: code_removed", "on ubuntu (and possibly other linuxes), you can use code_removed to find the path(s) of this file.", "unfortunately, the first method doesn't include column headers, which makes it fairly useless for most applications...", "this solution worked for me, but only after i dropped my database (using code_removed) and created it (using code_removed) first (as @jacob mentions above). ran a migration afterwards as well then good to go.", "don not use email address as primary key, keep email as unique but don not use it as primary key, use user id or username as primary key", "this did it for me. short and to the point. i honestly don't aim to understand the guts of postgresql, i want to get stuff done.", "@wildplasser if that's a worry code_removed (or even code_removed) the point is you can customize the matching expression to suit your needs and use code_removed to return the word count. but this should be combined with the cut that kibibu suggested (code_removed)", "when you leave the answer please try to explain why this is happening, or how the postgres system work so we're not all just trying random stuff.", "awesome find man!", "only this was correct ans all above are not working fr me", "on centos,i installed code_removed using below command code_removed executing code_removed returned the same error as \"code_removed\". installing the gem as below solved my problem code_removed", "reset all sequence from public code_removed", "you can use postgres' code_removed operator which supports alternations, i.e. code_removed", "code_removed is the command that the official fedora documentation suggests, but i too get a password prompt. to get round that i followed this postgres forum email that uses the same command as the accepted answer here: code_removed. don't forget to init and start the database server.", "i think your only option is to set up a.pgpass file that your bash script has access to. or don't use passwords at all--you could set up another form of authentication, such as ident, or using ssl certificates.", "@faraz i get this error: syntax error at or near \" \"", "this should be the accepted answer", "yes, however this doesn't produce the permissions and constraints i see at the end of code_removed. useful all the same +1", "there is no way to \"delete with cascade\" on a table which hasn't been set up accordingly, i.e. for which the foreign key constraint has not been defined as on delete cascade, which is what the question was originally all about.", "not sure why, but the cte version of this query is way way faster than the \"plain join\" solutions above", "just chiming in many months later. the geographical capabilities of the two databases are very, very different. postgresql has the exceptional postgis extension. mysql's geographical functionality is practically zero in comparison. if your web service has a location component, choose postgresql.", "this one also works before 9.0 - tested it with 8.4.5", "this is a better answer, as one may generally have more than one database installed.", "i wrote a bit more detail to elaborate in stackoverflow.com/questions/12206600/\u2026 too.", "i should add, that my psql is added in: /applications/postgres-1.app/contents/macos/bin/psql; exit; psql (9.3.0) but which psql returns: usr/bin/psql", "if you are worried about drop owned by taking out too much after doing reassign owned when there are privileges still holding on, you can revoke all on all [tables|sequences|...] in schema [schema name] from [role]", "i hate keywords in upper case, just hate it, convention or no. there's no case-dependency with regard to keywords. i prefer all lower case. yes, i know it's a mere preference, but this is also a mere comment. ;-)", "using code_removed first to turn on expanded display also helps with readability.", "i just tried yours in pgadmin but d only has 2011 not full date which i needed!:(", "updating for any version:, to check the conf file: code_removed", "@jasonmp85 docs. code_removed permits code_removed, which code_removed does not. since code_removed is only acquired by code_removed and code_removed it won't cause data errors, but it might permit deadlocks due to row-lock-ordering differences. what's wrong with code_removed? it still permits code_removed, and code_removed doesn't gain you much over that.", "select name from person <--- what if there's a billion rows in person?", ">> valachio: i set the password for user postgres so: 1. su, 2. su - postgres, 3. psql (or psql -p <port>), 4. password, 5. q", "semantically you're right. but i seriously doubt if the optimiser will realise it. (it is futile, of course)", "postgresql doesn't really have built-in collations. it relies on the underlying operating system locales.", "you just code_removed it as usual in the code_removed list: code_removed", "@josue alexander ibarra answer works on centos 7 and version 9.5 if --dbname is not passed. code_removed", "i m using currval in postgresql 8.2 however its giving me an error currval not supported. any work around for this is much appreciated. thanks.", "inheritance can be used in an oop paradigm as long as you do not need to create foreign keys on the parent table. by example, if you have an abstract class vehicle stored in a vehicle table and a table car that inherits from it, all cars will be visible in the vehicle table but a foreign key from a driver table on the vehicle table won't match theses records. inheritance can be also used as a partitionning tool. this is especially usefull when you have tables meant to be growing forever (log tables etc).", "on fedora 20 code_removed", "if you are using postgresql then you have to use column type boolean in lower case as boolean. alter table users add \"priv_user\" boolean default false;", "for sql server, i primarily use: brent ozar's perf tuning page sqlserverpedia's perf tuning page", "this does not answer the question. it belongs as a comment either under the question or one of the answers.", "get error: code_removed", "i'd like to execute a query from the shell (not in the interactive psql client) and have it print the csv or tsv representation of the output to stdout. how do you do that with code_removed or one of the postgresql command-line tools?", "other way to get the minor version is: code_removed", "no i am working with timestamp date type.", "in psql: code_removed", "why use code_removed and not the base class code_removed?", "i tried it. this does not work because you can only give it the first password.", "see the below example code_removed then for getting last inserted id use this for table \"user\" seq column name \"id\" code_removed", "this worked for me::) code_removed", "can someone tell me what case-insensitive collations are postgresql built-in collations? i see this as an option but can't find anything about a case-insensitive collation for postgres on the net?", "let's say you have an array of ids and equivalent array of statuses - here is an example how to do this with a static sql (a sql query that doesn't change due to different values) of the arrays: code_removed", "i spent around 6 hours on the same issue today. inserts go at a 'regular' speed (less than 3sec per 100k) up until to 5mi (out of total 30mi) rows and then the performance sinks drastically (all the way down to 1min per 100k). i will not list all of the things that did not work and cut straight to the meet. i dropped a primary key on the target table (which was a guid) and my 30mi or rows happily flowed to their destination at a constant speed of less than 3sec per 100k.", "\u00bfare you recently changed the pg_hba.conf? if you did just check for any typo in: \"local\" is for unix domain socket connections only local all all password ipv4 local connections: host all all 127.0.0.1/32 password ipv6 local connections: host all all ::1/128 password sometimes a simple mistake can give us a headache. i hope this help and sorry if my english is no good at all.", "see this also: tekadempiere.blogspot.ae/2014/09/\u2026", "if you have made the change using password and you are on the same host as the postgres server, the try specifying that you want your connection to go over an inet instead of unix socket. i.e. use the -h parameter: psql -h 127.0.0.1. doing this saved me from editing the pg_hba configuration file", "i can see why the code_removed file would be a better solution. i was just giving an alternative, not sure if it deserves a downvote though:)", "the postgresql port is defined in your code_removed file. for me in ubuntu 14.04 it is: code_removed inside there is a line: code_removed changing the number there requires restart of postgresql for it to take effect.", "from pgcon2014: youtube.com/\u2026", "first login as postgres user: code_removed connect to the required db: code_removed code_removed would return the list of all table in the database you're connected to.", "tyr this: (index size/usage statistics) code_removed", "interestingly, while both of these methods are more elegant than @chmullig 's solution (so +1), when checking 3 options at least, they execute significantly slower on large tables (91.5 million records in my case). i was seeing a time increase of about 2x when using either of these. any idea why that might be?", "i'm going to use this as row_number() does not work in sql 2000 (yes, we have a client on sql 2000 still) specifically, i'm going to replace the '5' with a iterator variable of a loop and use that to copy and modify each row of a table in turn. maybe someone will see this comment and find this useful", "side-note: while the other answers were certainly interesting, and useful on some level, this answer was without a doubt the most useful to me. it essentially answered my problem. thanks.", "it doesn't work on ubuntu 14.04.", "@wildplasser notice that there will be always only one row returned regardless of the use of code_removed.", "this should be the accepted answer, works for me.", "a query can't change the database in postgresql.", "this was tested with versions 9.4 and 9.3 on arch and rhel respectively. can you post your connection string? anonymized of course.", "thank you for asking this question, i just didn't know that it is possible", "only uninstalling (sudo apt-get purge) libpq-dev and re-installing it worked for me.", "rake task for rails for destroy all tables in current database code_removed", "@infamouse yes, i get those log entries too, but they don't trouble me. if they bother you, you can remove the.keep files as are not strictly necessary. they simply keep the directories from being accidentally deleted (since they're not empty).", "i don't see how a regular update wouldn't work just because you don't specify the primary key? or did i miss your point entirely?", "how do i modify the owner of all tables in a postgresql database? i tried code_removed but it doesn't support the asterisk syntax.", "i'm trying to install postgresql's pg gem for ruby. i issued the following command: code_removed i installed ruby 1.9.2 using rvm. the above command shows me the following error. the error is: code_removed i don't know what is the error...", "restarting postgres should work", "would not that damage data in the database?", "do backups in any case.", "there is a great project called migrations under doctrine that built just for this purpose. its still in alpha state and built for php.", "the reload command is code_removed by postgres user.", "i would not trust the output of locate. imagine these steps: postgres version x is installed, updatedb reads the location of all files, postgres gets upgarded to version x+1. now the cached data of locate is too old.... this is not reliable.", "the using clause is very much standard. it's just that some minor database systems don't have it.", "@infamouse if the logs are annoying try chown-ing the.keep files and chmod-ing them so that the user that postgres runs as cannot see the files ( note this might be impossible )", "if you set code_removed you don't need to specify the code_removed option every time. this also works with other code_removed commands such as code_removed.", "@iman453: you'd run that straight from your shell/command-line.", "code_removed", "here is the command that you are looking for, assuming your sequence for the product table is product_id_seq: alter sequence product_id_seq restart with 1453;", "i want to drop 200 columns in my table in postgresql. i tried: code_removed but i get an error like this: error: syntax error at or near \"col2\"", "this emulates the exact functionality of isnull, not sure why it's downvoted", "kokizzu, it's possible in 9.5. wiki.postgresql.org/wiki/\u2026", "what about text vs json in this case? any significant advantage of using json, compared to the performance drawbacks?", "possibly helpful post i wrote on automating pg_restore! medium.com/@trinity/\u2026", "in my case i needed to add code_removed in the code_removed file.", "yep, you're right. i did not see the leading \"e\" on the error message. many thanks!", "worked for yosemite (10.10.3). brew install postgresql", "i tried it. this does not work because you can only give it the first password.", "this worked for me on mac mountain lion. thanks!", "if performance is important and most queries are read-only, i would suggest to replicate data over to another database. while this seems like unneeded duplication of data, it might help if indexes are required. this can be done with simple on insert triggers which in turn call dblink to update another copy. there are also full-blown replication options (like slony) but that's off-topic.", "to expand on the above and make a quick reference: to make a user a superuser: code_removed to make a user no longer a superuser: code_removed to just allow the user to create a database: code_removed you can also use code_removed and code_removed to allow a user privileges without making them a superuser. documentation", "in postgresql 9.5 and newer you can use code_removed. see the documentation. a mysql code_removed can be directly rephrased to a code_removed. neither is sql-standard syntax, they're both database-specific extensions. there are good reasons code_removed wasn't used for this, a new syntax wasn't created just for fun. (mysql's syntax also has issues that mean it wasn't adopted directly). e.g. given setup: code_removed the mysql query: code_removed becomes: code_removed differences: you must specify the column name (or unique constraint name) to use for the uniqueness check. that's the code_removed the keyword code_removed must be used, as if this was a normal code_removed statement it has some nice features too: you can have a code_removed clause on your code_removed (letting you effectively turn code_removed into code_removed for certain values) the proposed-for-insertion values are available as the row-variable code_removed, which has the same structure as the target table. you can get the original values in the table by using the table name. so in this case code_removed will be code_removed (because that's what we tried to insert) and code_removed will be code_removed because that's the current value in the table. you can use either or both in the code_removed expressions and code_removed clause. for background on upsert see how to upsert (merge, insert... on duplicate update) in postgresql?", "@envek - ah, thank you for the clarification, i missed that.", "thanks connecting to the right database was not i was doing earlier!", "as a rule of thumb: you should never ever set a password for the postgres user. if you need a superuser access from pgadmin, make another superuser. that way, if the credentials for that superuser is compromised, you can always ssh into the actual database host and manually delete the superuser using code_removed", "additionally to what erwin wrote, i'd say that using a window function (which is common sql functionality nowadays) is almost always faster than using a join with a derived table", "+1 and when adding the db name, be sure to quote it in single quotes since it will be used to dynamically generate an code_removed clause to filter the db list.", "why is the code_removed required? i have postgres databases that require it and ones that don't. what's the difference?", "this is very much the same as this question which was asked a year later. but, i believe this one has a dangerous primary answer. you should not be setting up the code_removed user. it's the code_removed of postgresql, and it opens you up for login-attacks against it. create another super-user, and reserve the locked code_removed for unix admins with root.", "isn't the dump just a backup?", "also use \" pset footer\" so the row counts don't hoe up in the file", "thanks, that works! what i ended up doing was: \".. some_id = any(array[\". implode(\",\", $id_array). \"])\"", "you may do a code_removed with asterisks to find tables that match the search pattern you're interested in.", "i assume that there exist some internal psql command for this, but you could also run the code_removed command from util-linux-ng package: description script makes a typescript of everything printed on your terminal.", "none of the existing answers gave me results in the form that i actually wanted them in. so here is my (gargantuan) query for finding information about foreign keys. a few notes: the expressions used to generate code_removed and code_removed could be vastly simplified on postgres 9.4 and later using code_removed rather than the window-function-using hackery i'm using. those same expressions are relying on the query planner not altering the returned order of results from code_removed. i don't think it will, but i don't have any multiple-column foreign keys in my dataset to test with. adding the 9.4 niceties eliminates this possibility altogether. the query itself requires postgres 9.0 or later (8.x didn't allow code_removed in aggregate functions) replace code_removed with code_removed if you want an array of columns rather than a comma-separated string. - code_removed", "@justbob no, it isn't, but i find it wise to stay within a major version or two. i'm really aiming at those people still on 8.3 or older, which is just absurd. 8.4 is marginal, i'd want to be on 9.1 at the moment and using 9.2 in my testing in preparation for rolling it out in the next six months or so. you save so much time using newer versions because issues you're facing are already solved in the new version; witness the vismap and fsm, autovac improvements, etc etc.", "thank you, this really help. how about schema?", "the public schema still allows such a user to create tables. also, new tables aren't covered, nor are sequences. unfortunately, this is all quite a bit more complicated than this.:-/ i'll post what i ended up doing once i've validated it some more.", "correct me if i'm wrong, but if the system user is the same as the database user, postgresql won't ask for the password - it relies on the system for authentication. this might be a matter of configuration. thus, when i wanted the database owner code_removed to backup his databases every night, i could create a crontab for it: code_removed. of course, code_removed would need to be allowed to execute cron jobs; thus it must be listed in code_removed, or code_removed must be empty.", "the homebrew package manager includes launchctl plists to start automatically. for more information run code_removed. start manually: code_removed stop manually: code_removed start automatically: \"to have launchd start postgresql now and restart at login:\" code_removed what is the result of code_removed? what is the result of code_removed? are there any error messages in the server.log? make sure tcp localhost connections are enabled in pg_hba.conf: code_removed check the listen_addresses and port in postgresql.conf: code_removed code_removed cleaning up postgres was most likely installed via homebrew, fink, macports or the enterprisedb installer. check the output of the following commands to determine which package manager it was installed with: code_removed", "it might be sometimes be programatically easier to \"select count(*) from (select 1... limit 1)\" as it's guaranteed to always return a row with a value of count(*) of 0 or 1.", "to get rid of the error, roll back the last (erroneous) transaction after you've fixed your code: code_removed you can use try-except to prevent the error from occurring: code_removed refer: django documentation", "basically, i want to do this: code_removed i'm pretty sure that would work in mysql (my background), but it doesn't seem to work in postgres. the error i get is: code_removed surely there's an easy way to do this, but i can't find the proper syntax. so, how would i write this in postgresql?", "this is what worked with postgres.app. thank you!", "liguibase's best practices recommend keeping schema creation scripts as a set of sequential scripts to be ran in order. while this is a good best practice i don't see how it would works without a central repository, which is un-git.", "love it! this is a great bit of stuff.", "to change the listen port i had restart postgresql: code_removed", "if you want to do this in pgadmin, it is much easier. it seems in postgressql, to add a auto increment to a column, we first need to create a auto increment sequence and add it to the required column. i did like this. 1) firstly you need to make sure there is a primary key for your table. also keep the data type of the primary key in bigint or smallint. (i used bigint, could not find a datatype called serial as mentioned in other answers elsewhere) 2)then add a sequence by right clicking on sequence-> add new sequence. if there is no data in the table, leave the sequence as it is, don't make any changes. just save it. if there is existing data, add the last or highest value in the primary key column to the current value in definitions tab as shown below. 3)finally, add the line code_removed to the default value in your primary key as shown below. make sure the sequence name is correct here. this is all and auto increment should work.", "this works after code_removed has been successfully run. otherwise it silently fails (but appears to have worked, with the service showing as started in code_removed.", "you could kill all connections before dropping the database using the code_removed function. you can get all running backends using the system view code_removed i'm not entirely sure, but the following would probably kill all sessions: code_removed of course you may not be connected yourself to that database", "you might want to reference the docs for posterity, code_removed, postgresql.org/docs/current/static/sql-altertable.html", "i think webpack also has its own code_removed support?", "code_removed", "how do i change the code above so it will work in a browser?", "with postgres 9.4 and the new code_removed command a superuser can set guc params from sql.", "first off, it's helpful to create a database named the same as your current use, to prevent the error when you just want to use the default database and create new tables without declaring the name of a db explicitly. replace \"skynotify\" with your username: code_removed -d explicitly declares which database to use as the default for sql statements that don't explicitly include a db name during this interactive session. basics for getting a clear picture of what your postgresql server has in it. you must connect to an existing database to use psql interactively. fortunately, you can ask psql for a list of databases: code_removed . code_removed this does not start the interactive console, it just outputs a text based table to the terminal. as another answers says, postgres is always created, so you should use it as your failsafe database when you just want to get the console started to work on other databases. if it isn't there, then list the databases and then use any one of them. in a similar fashion, select tables from a database: code_removed my \"postgres\" database has no tables, but any database that does will output a text based table to the terminal (standard out). and for completeness, we can select all rows from a table too: code_removed . code_removed even if there are zero rows returned, you'll get the field names. if your tables have more than a dozen rows, or you're not sure, it'll be more useful to start with a count of rows to understand how much data is in your database: code_removed . code_removed and don't that that \"1 row\" confuse you, it just represents how many rows are returned by the query, but the 1 row contains the count you want, which is 0 in this example. note: a db created without an owner defined will be owned by the current user.", "@hitesh141 cross join = inner join with on 1=1. stackoverflow.com/questions/17759687/\u2026", "if your application is searching for a fixed string, there is no need to have code_removed on both sides: code_removed", "anytime, mate:)", "the cleanest way by far to start/stop/restart postgres if you have installed it through code_removed is to simply unload and/or load the launchd configuration file that comes with the installation: code_removed the first line will stop postgres and the second line will start it. no need to specify any data directories etc. since everything is in that file.", "if you think about the performace,may be you can use \"perform\" in a function just like this: code_removed", "to run this using docker on the mac: code_removed", "i think this solution is working as code_removed which works but might not efficient when working with a large table.", "if you put together the answers so far, clean up and improve, you would arrive at this superior query: code_removed which is much faster than either of them. nukes the performance of the currently accepted answer by factor 10 - 15 (in my tests on postgresql 8.4 and 9.1). but this is still far from optimal. use a code_removed (anti-)semi-join for even better performance. code_removed is standard sql, has been around forever (at least since postgresql 7.2, long before this question was asked) and fits the presented requirements perfectly: code_removed sql fiddle. unique key to identify row if you don't have a primary or unique key for the table (code_removed in the example), you can substitute with the system column code_removed for the purpose of this query (but not for some other purposes): code_removed every table should have a primary key. add one if you didn't have one, yet. i suggest a code_removed or an code_removed column in postgres 10+. related: in-order sequence generation auto increment table column how is this faster? the subquery in the code_removed (anti-)semi-join can stop evaluating as soon as the first dupe is found (no point in looking further). for a base table with few duplicates this is only mildly more efficient. with lots of duplicates this becomes way more efficient. exclude empty updates if some or many rows already have code_removed, your update would not change anything, but still insert a new row version at full cost (minor exceptions apply). normally, you do not want this. add another code_removed condition like demonstrated above to make this even faster: if code_removed is defined code_removed, you can simplify to: code_removed subtle difference in null handling this query (unlike the currently accepted answer by joel) does not treat null values as equal. these two rows for code_removed would qualify as \"distinct\" (though looking identical to the human eye): code_removed also passes in a unique index and almost anywhere else, since null values do not compare equal according to the sql standard. see: create unique constraint with null columns otoh, code_removed or code_removed or code_removed treat null values as equal. use an appropriate query style depending on what you want to achieve. you can still use this faster query style using code_removed instead of code_removed for any or all comparisons to make null compare equal. more: how to delete duplicate rows without unique identifier if all columns being compared are defined code_removed, there is no room for disagreement.", "@gstjisaini looks like drcolossos forgot code_removed param code_removed -- it works", "@andyray \" while copy from copies data from a file to a table (appending the data to whatever is in the table already)\" from the manual on the link above. postgresql.org/docs/current/static/sql-copy.html.", "thanks! this works for when shell access is available. unfortunately in my case i don't have that access; i've updated the question.", "so add a global password... thats a interesting idea as well", "seems like one less byte at face value - but in reality you would have to read both bytes even if one of them is 0", "just increasing code_removed is bad idea. you need to increase code_removed and code_removed as well. considerations code_removed determines the maximum number of concurrent connections to the database server. the default is typically 100 connections. before increasing your connection count you might need to scale up your deployment. but before that, you should consider whether you really need an increased connection limit. each postgresql connection consumes ram for managing the connection or the client using it. the more connections you have, the more ram you will be using that could instead be used to run the database. a well-written app typically doesn't need a large number of connections. if you have an app that does need a large number of connections then consider using a tool such as pg_bouncer which can pool connections for you. as each connection consumes ram, you should be looking to minimize their use. how to increase max connections 1. increase code_removed and code_removed in code_removed change code_removed to code_removed the code_removed configuration parameter determines how much memory is dedicated to postgresql to use for caching data. if you have a system with 1gb or more of ram, a reasonable starting value for shared_buffers is 1/4 of the memory in your system. it's unlikely you'll find using more than 40% of ram to work better than a smaller amount (like 25%) be aware that if your system or postgresql build is 32-bit, it might not be practical to set shared_buffers above 2 ~ 2.5gb. note that on windows, large values for shared_buffers aren't as effective, and you may find better results keeping it relatively low and using the os cache more instead. on windows the useful range is 64mb to 512mb. 2. change kernel.shmmax you would need to increase kernel max segment size to be slightly larger than the code_removed. in file code_removed set the parameter as shown below. it will take effect when code_removed reboots (the following line makes the kernel max to code_removed) code_removed references how to increase max connections in postgres postgres max connections and shared buffers tuning your postgresql server", "as, for the legacy reasons: in json, there is no semantical difference, if an object's (table, map, hash, whatever it is call in the host language) key-value pairs are ordered differently. if you rely on that, you are actually using something different than json. -- for code_removed vs. code_removed: the latter comes with json validation, so upon invalid json, it will only fail upon inserting, instead of every time your application reads it (because it gets an invalid representation). also, you can safely cast the latter to code_removed within the database.", "limit n,1 doesn't work in ms sql server. i think it's just about the only major database that doesn't support that syntax. to be fair, it isn't part of the sql standard, although it is so widely supported that it should be. in everything except sql server limit works great. for sql server, i haven't been able to find an elegant solution.", "storing each level of database changes under git versioning control is like pushing your entire database with each commit and restoring your entire database with each pull. if your database is so prone to crucial changes and you cannot afford to loose them, you can just update your pre_commit and post_merge hooks. i did the same with one of my projects and you can find the directions here.", "@a_horse_with_no_name how do you exactly mean that the chance on race conditions is much smaller? when i execute this query concurrently with the same records i'm getting the error \"duplicate key value violates unique constraint\" 100% of the times until the query detects that the record has been inserted. is this a complete example?", "xaprb is a must-read blog for mysql dbas. the author has written a book on high-performance mysql for the happy few working with sybase sql anywhere i can only recommend breck carter's blog and his sql anywhere studio 9 developer's guide", "do you have permissions to write the db.sql file?", "putting this here since i always forget where this file is code_removed", "postgresql 9.1.2: code_removed", "because there's more than one way to skin a cat: code_removed shows all the database names, encoding, and more.", "i think you meant: you can write a query like this......and then run the output of the query", "worked for me on ubuntu 14!!", "+1 interesting, passing named arguments. are you aware of any way to do this once logged in?", "in psql alter column query syntax like this code_removed boolean value (true-false) save in db like (t-f) value.", "is there possibility that i can mention target database's table name?", "(new) expanded auto mode: x auto new for postgresql 9.2; psql automatically fits records to the width of the screen. previously you only had expanded mode on or off and had to switch between the modes as necessary. if the record can fit into the width of the screen; psql uses normal formatting. if the record can not fit into the width of the screen; psql uses expanded mode. to get this use: x auto postgresql 9.5 documentation on psql command. wide screen, normal formatting: code_removed narrow screen, expanded formatting: code_removed how to start psql with x auto configure code_removed command on startup by adding it to code_removed in your home folder and restarting psql. look under 'files' section in the psql doc for more info. ~/.psqlrc code_removed", "there is a comprehensive list of tools on the postgresql wiki: and of course postgresql itself comes with pgadmin, a gui tool for accessing postgres databases.", "this is non-sql method. instructions are given on the image itself. select the server that you want to find the info about and then follow the steps.", "in assumption that the foreign key schould prevent doing things wich makes the database inconsistent, this is not the way to deal with. you can delete the \"nasty\" entry now but you are leaving lots of zombie shards wich could cause problems in future", "this uses ubuntu's pg_upgradecluster tool which can be much slower than postgresql's pg_upgrade tool and of course is only available on ubuntu.", "use the operating system user code_removed to create your database - as long as you haven't set up a database role with the necessary privileges that corresponds to your operating system user of the same name (code_removed in your case): code_removed as recommended here or here. then try again. type code_removed when done with operating as system user code_removed. or execute the single command code_removed as code_removed with code_removed, like demonstrated by drees in another answer. the point is to use the operating system user matching the database role of the same name to be granted access via code_removed authentication. code_removed is the default operating system user to have initialized the database cluster. the manual: in order to bootstrap the database system, a freshly initialized system always contains one predefined role. this role is always a \u201csuperuser\u201d, and by default (unless altered when running code_removed) it will have the same name as the operating system user that initialized the database cluster. customarily, this role will be named code_removed. in order to create more roles you first have to connect as this initial role. i have heard of odd setups with non-standard user names or where the operating system user does not exist. you'd need to adapt your strategy there. read about database roles and client authentication in the manual.", "what's the purpose of the range of values from generate_series(1,1100)?", "code_removed if u have brew", "code_removed for databases code_removed databasename to switch to db code_removed for procedures stored in particular database", "i'm going to guess that the answer is no based on the below error message (and this google result), but is there anyway to perform a cross-database query using postgres? code_removed i'm working with some data that is partitioned across two databases although data is really shared between the two (userid columns in one database come from the code_removed table in the other database). i have no idea why these are two separate databases instead of schema, but c'est la vie...", "a sample of how to use code_removed to insert this in another table would be welcome!", "postgresql doesn't support storing null ( 0x00) characters in text fields (this is obviously different from the database null value, which is fully supported). source: if you need to store the null character, you must use a bytea field - which should store anything you want, but won't support text operations on it. given that postgresql doesn't support it in text values, there's no good way to get it to remove it. you could import your data into bytea and later convert it to text using a special function (in perl or something, maybe?), but it's likely going to be easier to do that in preprocessing before you load it.", "for further proof, drop your postgres database and try the createdb script command. it'll then fail.", "i needed to unset code_removed: code_removed", "brilliant bit of code, especially for those of us coming from mysql, using show create table table_name. additionally, i'm accessing a database with limited permissions, so this is perfect.", "says the file is ascii, but it contains accented characters, so that must be wrong?", "this is a very simple and clear solution two lines of code code_removed you must mange your datetime variables with the same time info", "is there any query available to list all tables in my postgres db. i tried out one query like: code_removed but this query returns views also. how can i get only table names only, not views?", "would like re-iterate the question asked by @shadur \"is that restricted to the current database?\"", "i think this is a nice quick way to solve the issue, but only when you're sure the source table will never grow huge. i've got a table which will never have more than 1000 rows, so i can use this solution.", "link rot is voracious! the article you linked to no longer works, which makes me uncomfortable:(", "you might add a note that the corresponding strings have to be copied and executed. not that it's not obvious:p", "it's a solution to restart server", "there isn't really a formal manual, because there's no single style or standard. so long as you understand the rules of identifier naming you can use whatever you like. in practice, i find it easier to use code_removed because it isn't necessary to code_removed them everywhere to preserve case, spaces, etc. if you wanted to name your tables and functions code_removed you'd be free to do that, though it'd be pain to type everywhere. the main things to understand are: unless double-quoted, identifiers are case-folded to lower-case, so code_removed, code_removed and code_removed are all the same thing, but code_removed and code_removed are different; unless double-quoted: sql identifiers and key words must begin with a letter (a-z, but also letters with diacritical marks and non-latin letters) or an underscore (_). subsequent characters in an identifier or key word can be letters, underscores, digits (0-9), or dollar signs ($). you must double-quote keywords if you wish to use them as identifiers. in practice i strongly recommend that you do not use keywords as identifiers. at least avoid reserved words. just because you can name a table code_removed doesn't mean you should.", "this works for me in python 2.7 code_removed", "the difference between copy and copy is that the first one pipes the data through the client and the second one saves the data to the server. this means you can get the data from remote database to the local machine by using copy.", "the key is \"i installed the postgres.app for mac.\" this application sets up the local postgressql installation with a database superuser whose role name is the same as your login (short) name. when postgres.app first starts up, it creates the $user database, which is the default database for psql when none is specified. the default user is $user, with no password. some scripts (e.g., a database backup created with code_removed on a linux systsem) and tutorials will assume the superuser has the traditional role name of code_removed. you can make your local install look a bit more traditional and avoid these problems by doing a one time: code_removed which will make those fatal: role \"postgres\" does not exist go away.", "as the title suggests, i'd like to select the first row of each set of rows grouped with a code_removed. specifically, if i've got a code_removed table that looks like this: code_removed my output: id | customer | total ---+----------+------ 1 | joe | 5 2 | sally | 3 3 | joe | 2 4 | sally | 1 i'd like to query for the code_removed of the largest purchase (code_removed) made by each code_removed. something like this: code_removed expected output: first(id) | customer | first(total) ----------+----------+------------- 1 | joe | 5 2 | sally | 3", "you may do a code_removed with asterisks to find tables that match the search pattern you're interested in.", "code_removed", "to be honest, i just make copies of the database if i'm introducing schema changes and have to deal with multiple development branches at the same time... dev databases should hopefully be small enough to do that. i'd regard any system that tried to be clever and make db changes just because i changed source branch with suspicion. and i'd also like to be sure things to keep on working if i simply cloned my workspace and had one branch in one location, and the other in the new one.", "up-voted, but see stackoverflow.com/a/35928978", "the link is dead...", "also, small note. on most systems the command is /etc/init.d/postgresql restart", "bless you ben. greatly appreciated.", "just found through the postgres community guide mentioned by frank heikens. it can easily generate a diagram, and then lets you adjust the connectors!", "i will also point out that email is a bad choice to make a unique field, there are people and even small businesses that share an email address. and like phone numbers, emails can get re-used. jsmith@somecompany.com can easily belong to john smith one year and julia smith two years later. another problem with emails is that they change frequently. if you are joining to other tables with that as the key, then you will have to update the other tables as well which can be quite a performance hit when an entire client company changes their emails (which i have seen happen.)", "maybe just provide a simple example of using it for something very basic, that should only take up a few lines but would be enough to not make it link-only.", "ctes and window functions were introduced with the same version, so i don't see the benefit of the first solution.", "if you want to find the create statement for a table without using pg_dump, this query might work for you (change 'tablename' with whatever your table is called): code_removed when called directly from psql, it is usefult to do: code_removed also, the function generate_create_table_statement in this thread works very well.", "i followed your answer but still unable to succesfully create my backup file. please see my link: unix.stackexchange.com/questions/257898/\u2026. thank you.", "now it doesn't work if we want a middle page. say we have 25 rows and we want the second page, i.e. rows 11-20. the inner query gets the top 2*10 = 20 rows, or rows 1-20. the middle query gets the last 15 rows: 25-((2-1)*10) = 15, which yields rows 20-6. the last query reverses the order and returns rows 6-20. this technique does not work, unless the total number of rows is a multiple of your desired page size.", "@acjohnson55 even better: drop the code_removed entirely. see my revision. (if you want to reverse the exit status, bash supports a bang operator: code_removed)", "the key is \"i installed the postgres.app for mac.\" this application sets up the local postgressql installation with a database superuser whose role name is the same as your login (short) name. when postgres.app first starts up, it creates the $user database, which is the default database for psql when none is specified. the default user is $user, with no password. some scripts (e.g., a database backup created with code_removed on a linux systsem) and tutorials will assume the superuser has the traditional role name of code_removed. you can make your local install look a bit more traditional and avoid these problems by doing a one time: code_removed which will make those fatal: role \"postgres\" does not exist go away.", "at any rate, adding 1 to max(id) will leave a single number gap in your ids, since what setval sets is the last value of the sequence, not the next.", "what does the code_removed represent? i can't find any more documentation on the using syntax or what you could use for that parameter.", "@maxhud that depends on the client (or client library you use). if you can, use explicit types (postgresql can guess types in parametrized queries, but that usually does not work well with polymorphic functions). but at least, you can use explicit casts, like code_removed.", "this works also for temporary tables.", "how can i find out which version of postgis i have?", "yes, it is better if you use an integer instead. you can also set your email column as unique constraint. like this: code_removed", "@craigringer wow, \"a bit more detail\" is the best understatement i have seen all week;)", "i'm going to guess that the answer is no based on the below error message (and this google result), but is there anyway to perform a cross-database query using postgres? code_removed i'm working with some data that is partitioned across two databases although data is really shared between the two (userid columns in one database come from the code_removed table in the other database). i have no idea why these are two separate databases instead of schema, but c'est la vie...", "another example of partioning", "what do you mean by 'primary'? if the email address needs to be unique then it is a key and requires a unique constraint. whether you decide to 'promote' it be being 'primary' is arbitrary, unless there is a practical reason for doing so e.g. optimizing a poorly performing system.", "for sql server performance tuning, itzik ben-gan is a legend. you can find his many detailed books here, all with his usual style of empirical measurement to prove his case: if you're searching for the fastest solution to a t-sql problem add the word 'itzik' to your google search term. itzik ben-gan has been mentioned over 600 times here on stackoverflow, but i couldn't believe it to find not a single mention of him here on this performance tuning question. as an additional resource, you can also find some videos of itzik talking about performance related stuff here on youtube.", "you're sort of right here. default postgres configuration uses trust authentication for local system accounts. however most production setups get rid of this block right after installing rdbms.", "peeyush: the short answer is: if you are doing a lot of json manipulation inside postgresql, such as sorting, slicing, splicing, etc., you should use jsonb for speed reasons. if you need indexed lookups for arbitrary key searches on json, then you should use jsonb. if you are doing neither of the above, you should probably use json. if you need to preserve key ordering, whitespace, and duplicate keys, you should use json. for a longer answer, you'll need to wait for me to do a full \"howto\" writeup closer to the 9.4 release.", "don't use code_removed: stackoverflow.com/a/2328158/14731:)", "this variation of the query (as explained in other answers) worked for me. code_removed it's described here in details:", "did you read the manual?postgresql.org/docs/current/static/sql-altertable.htm\u200c\u200bl. the syntax is set out there.", "the delete with the cascade option only applied to tables with foreign keys defined. if you do a delete, and it says you cannot because it would violate the foreign key constraint, the cascade will cause it to delete the offending rows. if you want to delete associated rows in this way, you will need to define the foreign keys first. also, remember that unless you explicitly instruct it to begin a transaction, or you change the defaults, it will do an auto-commit, which could be very time consuming to clean up.", "why a restart when a reload is all you need?", "yeah, this answer was originally written to upgrade between 7 and 8 (i believe), and at that time they did not have an automated way to upgrade the database. i agree that the homebrew upgrade script would be the current \"best\" answer. that said, this method still works even if it's not the \"easiest\" anymore.", "ok. now i understand, that was a typo. thanks!", "valid questions. i never said that lucene is faster than sphinx, i mentioned that lucene vs a database full-text search is unmatched. and it is. no question about that. lucene is based upon an inverted index. now i don't know sphinx, as mentioned before, but if it also uses an inverted index or a similar indexing method then it is possible that they are equally performing. stating that lucene, compared to sphinx, would be 'tooo slow and bulky' is not based upon facts. especially not when it is only said that lucene is in 'java', which is just a ridiculous non-issue in terms of performance.", "if you want to switch to a specific database on startup, try code_removed by default, postgres runs on the port 5432. if it runs on another, make sure to pass the port in the command line. code_removed by a simple alias, we can make it handy. create an alias in your code_removed or code_removed code_removed run code_removed in command line, it will switch to default database; code_removed, it will switch to the db with the name in argument, on startup.", "yes, you can by using dblink (postgresql only) and dbi-link (allows foreign cross database queriers) and tds_link which allows queries to be run against ms sql server. i have used db-link and tds-link before with great success.", "@eric: the -d template1 is only there to check that the op could log in at all. since it is created at initdb time, it always exists, and was an easy check. from that point forward, your procedure is generally \"real life\".", "well, it would work across git just fine if you are careful about your id= and author= tags. in theory each user would have their own author entry (good) and if you do something reasonable with id=, say yyyymmdd_rev, then you are pretty much good to go. even with git, most everyone has a 'central repo', for a given project. 99% of people don't have somethiing 'central'. again, liquibase files are just plan text xml-ish files, with a stack of commands to execute against a given db (or set of). chances are 99% of all projects would have 0 issues following this in practice, even with dvcs's.", "you can try the following in postgresql 9 code_removed", "to be a little more explicit you can run the command: code_removed which will create a db based on your current user name", "@tylerh the images may be from w3schools. the idea however is stolen from a different site (and i really mean stolen because i don't see any attribution in their site.) i am seriously asking: is it good to give attributions to a site that doesn't give the same attributions where it should?", "backup over ssh with password using temporary.pgpass credentials and push to s3: code_removed just substitute the first couple of config lines with whatever you need - obviously. for those not interested in the s3 backup part, take it out - obviously. this script deletes the credentials in code_removed afterward because in some environments, the default ssh user can sudo without a password, for example an ec2 instance with the code_removed user, so using code_removed with a different host account in order to secure those credential, might be pointless.", "one way to do this: code_removed other way: code_removed documentation for code_removed.", "apgdiff seems not work with dumps in custom format", "it works for me too. yet the above query is less verbose.", "interestingly, while both of these methods are more elegant than @chmullig 's solution (so +1), when checking 3 options at least, they execute significantly slower on large tables (91.5 million records in my case). i was seeing a time increase of about 2x when using either of these. any idea why that might be?", "nothing else worked except for this! thank you so much @mike-blackwell. i had almost given up hope before you came to the rescue.", "in which situations you should use inherited tables? i tried to use them very briefly and inheritance didn't seem like in oop world. i thought it worked like this: table code_removed which has all fields required for all user levels. tables like code_removed, code_removed, code_removed, etc but fields are not checked from parent. for example code_removed has email field and inherited code_removed has it now too but it's not unique for both code_removed and code_removed at same time. ie. same as i add email field to both tables. only usage i could think of is fields that are usually used, like row_is_deleted, created_at, modified_at. is this the only usage for inherited tables?", "from psql's help (code_removed): o [file] send all query results to file or |pipe the sequence of commands will look like this: code_removed", "storing each level of database changes under git versioning control is like pushing your entire database with each commit and restoring your entire database with each pull. if your database is so prone to crucial changes and you cannot afford to loose them, you can just update your pre_commit and post_merge hooks. i did the same with one of my projects and you can find the directions here.", "just to aid googleability, the error message thrown here is: \"duplicate key value violates unique constraint...\"", "just to be clear, this command works in the database that you are currently connected only. if the old_role owns objects in multiple databases, you should connect and run this command in each one of those databases", "first install dblink you would do something like: code_removed", "so many haters. i appreciate this answer and am adopting it for my own application.", "how to print functions and triggers sourcecode in postgresql? please let me know if any one know the query to display the function, triggers source code.", "here is a fast solution of your confusion. code_removed here you may get last row by filling n=0, second last by n=1, fourth last by filling n=3 and so on. this is very common question over the interview and this is very simple ans of it. further if you want amount, id or some numeric sorting order than u may go for cast function in mysql. code_removed here by filling n = 4 you will be able to get fifth last record of highest amount from cart table. you can fit your field and table name and come up with solution.", "grant's answer is partly wrong - postgresql doesn't support cascade on delete queries. postgresql.org/docs/8.4/static/dml-delete.html", "in postgresql this is typically simpler and faster (more performance optimization below): code_removed or shorter (if not as clear) with ordinal numbers of output columns: code_removed if code_removed can be null (won't hurt either way, but you'll want to match existing indexes): code_removed major points code_removed is a postgresql extension of the standard (where only code_removed on the whole code_removed list is defined). list any number of expressions in the code_removed clause, the combined row value defines duplicates. the manual: obviously, two rows are considered distinct if they differ in at least one column value. null values are considered equal in this comparison. bold emphasis mine. code_removed can be combined with code_removed. leading expressions have to match leading code_removed expressions in the same order. you can add additional expressions to code_removed to pick a particular row from each group of peers. i added code_removed as last item to break ties: \"pick the row with the smallest code_removed from each group sharing the highest code_removed.\" if code_removed can be null, you most probably want the row with the greatest non-null value. add code_removed like demonstrated. details: postgresql sort by datetime asc, null first? the code_removed list is not constrained by expressions in code_removed or code_removed in any way. (not needed in the simple case above): you don't have to include any of the expressions in code_removed or code_removed. you can include any other expression in the code_removed list. this is instrumental for replacing much more complex queries with subqueries and aggregate / window functions. i tested with postgres versions 8.3 \u2013 10. but the feature has been there at least since version 7.1, so basically always. index the perfect index for the above query would be a multi-column index spanning all three columns in matching sequence and with matching sort order: code_removed may be too specialized for real world applications. but use it if read performance is crucial. if you have code_removed in the query, use the same in the index so postgres knows sort order matches. effectiveness / performance optimization you have to weigh cost and benefit before you create a tailored index for every query. the potential of above index largely depends on data distribution. the index is used because it delivers pre-sorted data, and in postgres 9.2 or later the query can also benefit from an index only scan if the index is smaller than the underlying table. the index has to be scanned in its entirety, though. for few rows per customer, this is very efficient (even more so if you need sorted output anyway). the benefit shrinks with a growing number of rows per customer. ideally, you have enough code_removed to process the involved sort step in ram and not spill to disk. generally setting code_removed too high can have adverse effects. consider code_removed for exceptionally big queries. find how much you need with code_removed. mention of \"disk:\" in the sort step indicates the need for more: configuration parameter work_mem in postgresql on linux optimize simple query using order by date and text for many rows per customer, a loose index scan would be (much) more efficient, but that's not currently implemented in postgres (up to v10). there are faster query techniques to substitute for this. in particular if you have a separate table holding unique customers, which is the typical use case. but also if you don't: optimize group by query to retrieve latest record per user optimize groupwise maximum query query last n related rows per row benchmark i had a simple benchmark here which is outdated by now. i replaced it with a detailed benchmark in this separate answer.", "sadly, i've not found anything in the documentation, but you can use some workaround, for example you could write some extended function. for example, in python: code_removed and then code_removed", "you can use the code_removed function code_removed the function definition is as follows (got from here): code_removed and returns the modified text. you can also check out this sql fiddle.", "one way to speed things up is to explicitly perform multiple inserts or copy's within a transaction (say 1000). postgres's default behavior is to commit after each statement, so by batching the commits, you can avoid some overhead. as the guide in daniel's answer says, you may have to disable autocommit for this to work. also note the comment at the bottom that suggests increasing the size of the wal_buffers to 16 mb may also help.", "how to enable logging of all sql executed by postgresql 8.3? edited (more info) i changed these lines: code_removed and restart postgresql service... but no log was created... i'm using windows server 2003. any ideas?", "this query will auto-update the nulls code_removed", "i tried ctrl-z, myself. it got the job done, more or less, but i wasn't entirely satisfied. :(", "off topic but if anyone looking for \"how to change name of user\" than do code_removed...for some reason google was pointing me here when i was googling that:)", "my usual key sequence is: code_removed i think veterans of the psql command line usually shorten that to just: code_removed", "you probably need to update your code_removed file. this file controls what users can log in from what ip addresses. i think that the postgres user is pretty locked-down by default.", "with postgres 9.3 use -> for object access. 4 example seed.rb code_removed rails c code_removed returns code_removed you can continue nesting code_removed return code_removed", "as paul mentioned, import works in pgadmin: right click on table -> import select local file, format and coding here is a german pgadmin gui screenshot: similar thing you can do with dbvisualizer (i have a license, not sure about free version) right click on a table -> import table data...", "very helpful if your interface doesn't support the shortcuts. thanks.", "doesnt work if your user is not superuser.", "i didn't realize that the path referred to a path on the server. if you want to copy data from a remote server, you could do code_removed", "the link you're referring to doesn't say what dbms it is talking about. while i can confirm that on oracle db, using temporary tables gives a massive performance boost over using queries combining code_removed and code_removed clauses due to the large overhead in parsing and planning such queries, i could not confirm the problem with postgres 9.5, see this answer.", "technically you are correct @jasen... which, of course, is the best kind of correct", "an important note from the docs: \"the system method does block-level sampling with each block having the specified chance of being selected; all rows in each selected block are returned. the system method is significantly faster than the bernoulli method when small sampling percentages are specified, but it may return a less-random sample of the table as a result of clustering effects.\"", "i've released a tool for sqlite that does what you're asking for. it uses a custom diff driver leveraging the sqlite projects tool 'sqldiff', uuids as primary keys, and leaves off the sqlite rowid. it is still in alpha so feedback is appreciated. postgres and mysql are trickier, as the binary data is kept in multiple files and may not even be valid if you were able to snapshot it.", "i'm still pretty inexperienced with shell programming, so if this is really wrong for some reason, vote me down, but don't be too alarmed. building from kibibu's answer: code_removed", "@polarisuser either code_removed or code_removed should do.", "select pg_terminate_backend(pg_stat_activity.pid) from pg_stat_activity where datname = current_database() and pg_stat_activity.pid <> pg_backend_pid();", "for example in one line you can do something like: pgpassword=pass1234 psql -u myusername myusername", "@clayton - thanks for the note, updated answer to reflect your point", "for completeness, another version using regex rather than string cutting: code_removed so for instance: code_removed", "i get the following error when inserting data from mysql into postgres. do i have to manually remove all null characters from my input data? is there a way to get postgres to do this for me? code_removed", "@sjoerd: the issue is not that the email-address is stored multiple times, although that's definitely inefficient, but who cares about hard drive space today. most businesses don't have google-scale, where this would matter. the issue is that the email address cannot be changed afterwards, because it's both a primary key & referenced as foreign key.", "fantastic answer!", "i don't see that pid file. i am using postgresql version 9.6", "this should be the accepted answer.", "select array_agg(distinct array[1,2,2,3]) gives \"{{1,2,2,3}}\"", "these pictures seem to imply that union is same as full outer join and intersection is same as inner join which is not correct as far as i know.", "on mine, there is no data folder inside c: program files postgresql 9.4 is this something specific to 9.4 or have done something wrong?", "recheck all sequence in public schema function code_removed", "needed to add mkdir -p /usr/local/var/postgres/pg_logical/{snapshots,mappings}", "@user151496 you have to change your current user. if you use peer authentication, postgre will assume that your user is your os current user. export a pguser env var (set it as your preferred db username) and setup a ~/.pgpass file as well. that should sort your problems.", "nb: you may need to convert field to text: string_agg(something_id::text, ', ')", "add libpq5 and libpq-dev to that purge list, that lib gave me a lot of problems, until i reinstalled it on the right version", "can you please share the exact version of postresql? 8.3.x?", "you can running directly from the bash specifying the postgres db as follow: code_removed", "2 years later, and i need to do this on a mac too.", "username and password: need to create login and assign db to user. if uses pgadmin, then create \"login/group role\" using gui", "a simple approach: pg-promise, if you are familiar with promises that is;) code_removed see also: how to correctly declare your database module.", "how do you know it? most of documentation i've read says that regex are slower and a like %...", "possible problem with 'ctes in 9.1' solution, which uses code_removed is that you can not easily get updated row using 'returning' statement. in case of insert it will return inserted row, however in case of update it wont.", "setting up my new mbp with high sierra, this worked a charm.", "code_removed", "it really does make this stuff easy, don't it? imagine the answer from some of the \"big database vendors\"... first install this 64 meg package and then run this export tool that has the most arcane syntax imaginable. be careful not to delete your whole database while using it. :)", "code_removed is a command line (windows) program not a sql statement. you need to do that from a code_removed. or use code_removed if you have installed postgres through the installer, you should start the windows service instead of running code_removed manually, e.g. using: code_removed note that the name of the service might be different in your installation. another option is to start the service through the windows control panel i have used the pgadmin ii tool to create a database called company which means that postgres is already running, so i don't understand why you think you need to do that again. especially because the installer typically sets the service to start automatically when windows is started. the reason you are not seeing any result is that code_removed requires every sql command to be terminated with code_removed in your case it's simply waiting for you to finish the statement. see here for more details: in psql, why do some commands have no effect?", "just use 0.0.0.0/0: code_removed make sure the listen_addresses in postgresql.conf allows all incoming connections as well: code_removed after the changes you have to reload the configuration (as a superuser): code_removed", "does this include views?", "hey why not have a look at the manual: postgresql.org/docs/9.2/static/sql-altertable.html", "doesn't work:(", "this depends. you could have configured it to a different folder on install.", "@philipxy: that's a weird definition (even if you're correct). but i'd rather go the other way round and start with cross join and then \"build\" inner join on top of it. after all, the mere concept of cross join invalidates these informal and inaccurate venn diagram visualisations...", "do you know any solution does not require restarting the all application or postgres server? maybe there is some solution to manually clear cached plan when the error occurs?", "+1 i'd be very interested in updates on the ram disk approach if you've got any results concerning that.", "depending on how you setup postgres you may need to use postgresql instead of postgres", "@a_horse_with_no_name: i'm not shocked by the question, but the number of upvotes:) compare e.g. to how do you quit the vi editor with single keypress?", "upvoted but i think you're wrong. for #2 you will need: select id from groups where lower(name) = lower('administrator'); if you want to make use of the additionaly created index. using explain plan.", "or ask your database: code_removed", "@csharpened: use the code_removed parameter as documented in the manual", "not sure why this is got a -1, worked for me when non of the other methods did", "worked great for update from 9.4.0 to 9.5.4, although had to adjust the folder names (obviously).", "i want to ensure connections are only made either locally or from two remote ips. i have this successfully configured in pg_hba.conf, but what should listen_addresses be set to", "if you're having problems on windows like me (i'm using windows 7 64-bit) and code_removed did not work. then, as kavaklioglu said in one of the comments, code_removed you will need to save this at the top of the file, or before any usage so its set before being called. certainly does work on windows:)", "just tried it and its not the right answer.", "@lucian code_removed is also really more of an olap operation; see stackoverflow.com/q/17267417/398670 for explanation. it doesn't define concurrency semantics and most people who use it for upsert are just creating bugs.", "check out dbforge studio for postgresql! it is available to download it at devart.com/dbforge/postgresql/studio/download.html", "thanks, i needed to create a dump from another server, and it seems this helps: postgresql.org/docs/8.3/interactive/\u2026", "for me, the user was not being created - this worked instead code_removed am using postgres v10.", "code_removed alone will toggle the value, saving you three keystrokes! (useful when you rapidly switch between wide and narrow outputs).", "on some distributions the file might also be found here: code_removed", "just because i parsed the above poorly, here's my way of restating the exact same thing. the syntax is code_removed, where \"seq\" is the literal text, and you put in a number for #. do not neglect the underscores. :-)", "if it really is utf-16be, and you're still getting invalid byte sequence errors, you probably have bad data. but you can try converting the tsv file to the same encoding your shell uses. (use code_removed.)", "to specify a tsv use the delimiter ' t' code_removed to specify a csv use the delimiter ',' code_removed", "good job, thanks", "answer to a similar (and more generic) question, \"... to the nearest minute interval\" (1-minute, 5-minutes, 10-minutes, etc.) code_removed adapted from and to the \"exact round\" as @crowmagnumb showed.", "this error may occur if input data contain escape character itself. by default escape character is \" \" symbol, so if your input text contain \" \" character - try to change the default value using escape option.", "postgresql order by random(), select rows in random order: code_removed postgresql order by random() with a distinct: code_removed postgresql order by random limit one row: code_removed", "in addition to the previous answers, if you use the tool pgadmin iii you can set the time zone as follows: open postgres config via tools > server configuration > postgresql.conf look for the entry timezone and double click to open change the value reload server to apply configuration changes (play button on top or via services)", "this is no good if you have many databases and only want to drop connections for a single db. this would kill all connections. it's a bit \"sledge hammer-y\".", "@user9645 key here is just a simple string (text) key, not a complex key path. this function however can be used for what you want, but you must apply it twice, like: code_removed (i know, it's far from optimal, but with this pattern, a recusive function could be created)", "you can use -a -d and | sort. but this data may not be importable, however it would be ok for basic checking.", "i took this one step further and added code_removed to my ~/.bashrc (linux mint) to help me remember this in the future. (this command avoids having to enter my user password.)", "my password had an '@' in it. this worked. i couldnt figure out how to make it work with the code_removed syntax. didn't try the code_removed because my postgress user has no home directory.", "run code_removed and then code_removed", "works pretty well, in command line, all arguments are required, -w is for password code_removed", "this related answer has details for the problem with jdbc.", "this works for me in python 2.7 code_removed", "thanks for the tip, doctrine guys have a tendency to change the location of the docs, resulting in many broken links, both here and on google. fixed the link.", "this will work in many cases because many sites will have pg_hba.conf authenticate the postgres db user against the postgres system account (peer method). successful login however, will ultimately depend on the contents of pg_hba.conf for any particular site.", "yes it is a proper table.", "there are two methods you can use. both require creating a user and a database. using createuser and createdb, code_removed using the sql administration commands, and connecting with a password over tcp code_removed and, then in the psql shell code_removed then you can login, code_removed if you don't know the port, you can always get it by running the following, as the code_removed user, code_removed or, code_removed sidenote: the code_removed user i suggest not modifying the code_removed user. it's normally locked from the os. no one is supposed to \"log in\" to the operating system as code_removed. you're supposed to have root to get to authenticate as code_removed. it's normally not password protected and delegates to the host operating system. this is a good thing. this normally means in order to log in as code_removed which is the postgresql equivalent of sql server's code_removed, you have to have write-access to the underlying data files. and, that means that you could normally wreck havoc anyway. by keeping this disabled, you remove the risk of a brute force attack through a named super-user. concealing and obscuring the name of the superuser has advantages.", "this is more like code_removed than code_removed, which may cause a problem if you use triggers. you'll end up running delete and insert triggers/rules, rather than update ones.", "how can setting a password for postgres lead to having all superusers compromised?", "for test purposes, i think postgresql app is the best option! run an app, and the server is up and running. close the app, and the server goes down.", "you can reload instead of restart. that reloads the pg_hba table. worked for me.", "you can run the dropdb command from the command line: code_removed note that you have to be a superuser or the database owner to be able to drop it. you can also check the pg_stat_activity view to see what type of activity is currently taking place against your database, including all idle processes. code_removed", "i just tried yours in pgadmin but d only has 2011 not full date which i needed!:(", "sorry didn't notice my comment was cropped. if you could at least try it once, you'd see the foreign key mappings are displayed as well.", "try it again with this code...", "code_removed", "using generate_create_table_statement('my_table') results in an argument type mismatch. using generate_create_table_statement(my_table) without the quote results in 'column \"my_table\" does not exist. guess is a psql version dependent issue. any ideas?", "in case none of the above works for you: i've done quite a few postgres installations, but was flummoxed today on a redhat 6.5 system (installing postgres 9.3). my typical hba.conf configuration that aron shows above didn't work. it turned out that my system was using ipv6, and ignoring the ipv4 configuration. adding the line: code_removed allowed me to login successfully.", "since this question is the first in search results, i'll put a different solution for a different problem here anyway, in order not to have a duplicate title. the same error message can come up when running a query file in code_removed without specifying a database. since there is no code_removed statement in postgresql, we have to specify the database on the command line, for example: code_removed", "sql server performance decent site for mssql specific info.", "great answer. thanks for posting your entire process rather than just the potentially destructive command!", "code_removed even with sudo.", "this version is by far the best as the code_removed command requires admin access", "generate the create table statement for a table in postgresql from linux commandline: this statement outputs the table create sql statement for me: code_removed explanation: pg_dump helps us get information about the database itself. code_removed stands for username. my pgadmin user has no password set, so i don't have to put in a password. the code_removed option means specify for one table. code_removed means print only data about the table, and not the data in the table. here is the exact command i use: code_removed", "there's three ways to get this sort of count, each with their own tradeoffs. if you want a true count, you have to execute the select statement like the one you used against each table. this is because postgresql keeps row visibility information in the row itself, not anywhere else, so any accurate count can only be relative to some transaction. you're getting a count of what that transaction sees at the point in time when it executes. you could automate this to run against every table in the database, but you probably don't need that level of accuracy or want to wait that long. the second approach notes that the statistics collector tracks roughly how many rows are \"live\" (not deleted or obsoleted by later updates) at any time. this value can be off by a bit under heavy activity, but is generally a good estimate: code_removed that can also show you how many rows are dead, which is itself an interesting number to monitor. the third way is to note that the system analyze command, which is executed by the autovacuum process regularly as of postgresql 8.3 to update table statistics, also computes a row estimate. you can grab that one like this: code_removed which of these queries is better to use is hard to say. normally i make that decision based on whether there's more useful information i also want to use inside of pg_class or inside of pg_stat_user_tables. for basic counting purposes just to see how big things are in general, either should be accurate enough.", "work for me too:d", "my mistake: we have to use double-quotes for reserved words in postgresql, not single quote or brackets. alter table domain.users rename to \"user\"; solves my problem.", "the other advantage of this solution is the ability join from more than two tables to get to your final calculated value by using multiple joins in the with / select statement.", "change the encoding option on import. i set mine to \"windows-1251\" and it worked without complaint.", "had to change it a bit to work: code_removed", "in shell psql.exe, execute code_removed", "thank you for pointing that out. very useful for us!", "quick postgresql optimization (query optimizing) short read, explains a lot of things well and 'works' a real example which is nice for those of us that learn better that way. after seeing the wiki link to postgresql, figured i'd edit this post with links for mysql/oracle docs, not really an optimization guides specifically but both are good resources, especially the mysql one. for optimization and any other tuning features.", "note that this will fail with sequence names containing single quotes, or table names with capitals, spaces, etc in their name. the code_removed and code_removed functions, or preferably the code_removed function, should really be used here.", "@josue alexander ibarra answer works on centos 7 and version 9.5 if --dbname is not passed. code_removed", "for small tables code_removed is often faster and needs less aggressive locking (for heavy concurrent load): code_removed with no code_removed condition. for medium or bigger tables, go with code_removed, like @greg posted.", "this is cool, but is it possible to make it work with executebatch() or any similar approach for bulk insert? executebatch() can't use returning clause as i know. thank you.", "seems like one less byte at face value - but in reality you would have to read both bytes even if one of them is 0", "on mac i had to add -dbthreads 1000 to avoid crashes due to limit in number of threads created", "the best value is the one that is right for the data as defined in the underlying domain. for some domains, code_removed is right for the code_removed attribute, for other domains code_removed might be the best choice.", "you can set the environment variable code_removed: code_removed", "a very frequently asked question here is how to do an upsert, which is what mysql calls code_removed and the standard supports as part of the code_removed operation. given that postgresql doesn't support it directly (before pg 9.5), how do you do this? consider the following: code_removed now imagine that you want to \"upsert\" the tuples code_removed, code_removed, so the new table contents would be: code_removed that's what people are talking about when discussing an code_removed. crucially, any approach must be safe in the presence of multiple transactions working on the same table - either by using explicit locking, or otherwise defending against the resulting race conditions. this topic is discussed extensively at insert, on duplicate update in postgresql?, but that's about alternatives to the mysql syntax, and it's grown a fair bit of unrelated detail over time. i'm working on definitive answers. these techniques are also useful for \"insert if not exists, otherwise do nothing\", i.e. \"insert... on duplicate key ignore\".", "@davos they usually aren't, but things like cheque numbers canhave business requirements", "if you need to get the work done inside pg: code_removed", "is this for homebrew? ports seems to put it in: code_removed so make sure you use export code_removed mac ports issue:", "on ubuntu-16.04 it's code_removed.", "very clever. it's a pity there is no code_removed.", "in my case, solution here: (for people who concerned) login to postgres: code_removed regards", "i don't know sphinx, but as for lucene vs a database full-text search, i think that lucene performance is unmatched. you should be able to do almost any search in less than 10 ms, no matter how many records you have to search, provided that you have set up your lucene index correctly. here comes the biggest hurdle though: personally, i think integrating lucene in your project is not easy. sure, it is not too hard to set it up so you can do some basic search, but if you want to get the most out of it, with optimal performance, then you definitely need a good book about lucene. as for cpu & ram requirements, performing a search in lucene doesn't task your cpu too much, though indexing your data is, although you don't do that too often (maybe once or twice a day), so that isn't much of a hurdle. it doesn't answer all of your questions but in short, if you have a lot of data to search, and you want great performance, then i think lucene is definitely the way to go. if you're not going to have that much data to search, then you might as well go for a database full-text search. setting up a mysql full-text search is definitely easier in my book.", "how can i work compressed if i'm pulling data from production down into development? i have set up an ssh connection from development into production. so would it be code_removed?", "running as postgres helped for me, thanks!", "i faced the same. but an array in my case is created via code_removed function. and fortunately it allows to aggregate distinct values, like: code_removed this works for me.", "welcome to so. nice introduction!:-)", "nice job @garylai. very strange that i did not have to do the same with my homebrew postgresql", "you also need to specify the schema to use, e.g.: dt my_schema.*", "in case you have materialized views you then also need to execute", "mysql is a relational database management system while postgresql is an object-relational database management system. postgresql is suited well for c++ or java developers, as it gives us more control over how queries are written. ordbms also gives us objects and user defined types. the sql queries themselves are much closer to the iso standards than mysql. do you need an ordbms or a rdbms? that will better answer your question.", "had this problem with rds too. to solve it: login as superuser code_removed create the user code_removed logout code_removed login as code_removed code_removed create your db/schema code_removed", "@onedaywhen and @jay, just because you think it shoud be unique doen't make it unique. and yes a husband and wife might be different customers. just becasue you haven't run into this before doesn't mean it won't happen. i have run into it and it does happen which is why email should never be allowed to be considered unique whether you think it should be or not. this is the kind of requirement you push back because it is inherently wrong.", "-1: what have you done so far? why is that not good enough? what's the postgres version? where is code_removed?", "nice, but sadly doesn't work for me, i get \"query failed: error: permission denied for relation direction_lookup\"", "or you can set up crontab to run a script. inside that script you can set an environment variable like this: code_removed this way if you have multiple commands that would require password you can put them all in the script. if the password changes you only have to change it in one place (the script). and i agree with joshua, using code_removed generates the most flexible export format and is already compressed. for more info see: pg_dump documentation e.g. code_removed", "just do code_removed and you would get the only the date part. sometimes doing code_removed may return code_removed where it doesn't remove the code_removed part. but i have seen code_removed to work perfectly in all the cases. hope this helps.", "what is the easiest way to save pl/pgsql output from a postgresql database to a csv file? i'm using postgresql 8.4 with pgadmin iii and psql plugin where i run queries from.", "using code_removed expand an array to a set of rows code_removed demo", "you can use the -v construct e.g code_removed and then refer to the variables in sql as:v1,:v2 etc code_removed", "@user1334007 the convention is not ugly - and read craig's comment above. and there's no need to quote if you didn't quote when you created the tables (that is, if you are consistent).", "just to clarify - it looks as if you are best to setup your path correctly, then uninstall/reinstall the pg gem", "this will work in many cases because many sites will have pg_hba.conf authenticate the postgres db user against the postgres system account (peer method). successful login however, will ultimately depend on the contents of pg_hba.conf for any particular site.", "you also need to restart your postgres service for changes to take effect code_removed", "get out of postgresql command line by typing code_removed. then you will be able to type code_removed in the proper context of code_removed", "excellent!!! it also works on different os.", "note that this will not remove the system tables (such as those that begin with code_removed) as they are in a different schema, code_removed.", "this did it for me. short and to the point. i honestly don't aim to understand the guts of postgresql, i want to get stuff done.", "the problem is still your pg_hba.conf file. this line: you can found this file in /etc/postgres/varion/main code_removed these are brief descriptions of both options according to the official postgresql docs on authentication methods. peer authentication the peer authentication method works by obtaining the client's operating system user name from the kernel and using it as the allowed database user name (with optional user name mapping). this method is only supported on local connections. password authentication the password-based authentication methods are md5 and password. these methods operate similarly except for the way that the password is sent across the connection, namely md5-hashed and clear-text respectively. if you are at all concerned about password \"sniffing\" attacks then md5 is preferred. plain password should always be avoided if possible. however, md5 cannot be used with the db_user_namespace feature. if the connection is protected by ssl encryption then password can be used safely (though ssl certificate authentication might be a better choice if one is depending on using ssl). after altering this file, don't forget to restart your postgresql server. if you're on linux, that would be code_removed", "i'm on ubuntu 12.10 and running this command: code_removed helped me - after that ran gem install pg -v \"0.14.1\", and all good now", "thanks, that works! what i ended up doing was: \".. some_id = any(array[\". implode(\",\", $id_array). \"])\"", "@entrylevelr you need to pipe the output to a file in order to save it. see this relevant question askubuntu.com/questions/420981/\u2026", "any tzinfo object that returns zero utc offset will do, for example.", "@michael.m i have db table with 30 millions rows and when i use code_removed or code_removed i have strong performance drop because postgres uses seq scan instead of index scan. and code_removed doesn't help.", "@clodoaldo: i need the output as mentioned by igor. i need the full difference in seconds.", "i don't see how a regular update wouldn't work just because you don't specify the primary key? or did i miss your point entirely?", "could you please explain why does it work and how you figured out it's going to work?", "inside eclipse i've used the clay plugin (ex clay-azurri). the free version allows to introspect (\"reverse engineer\") an existing db schema (via jdbc) and make a diagram of some selected tables.", "ran into this when upgrading to 10.7.3, this fix worked", "you can use code_removed to create a temporary file instead of coming up with your own naming scheme. it creates a new temp file (named something like code_removed in linux and code_removed on macos x) and prints its name to stdout.", "then is the os upgrade relevant? i use yosemite beta right now, but i'm not sure when it occurred previously. i've updated it whenever the new beta is available (totally 6 or 7 times i think).", "@jasonmp85 docs. code_removed permits code_removed, which code_removed does not. since code_removed is only acquired by code_removed and code_removed it won't cause data errors, but it might permit deadlocks due to row-lock-ordering differences. what's wrong with code_removed? it still permits code_removed, and code_removed doesn't gain you much over that.", "if you're using bundler, you should remove the gem using code_removed but then let bundler reinstall the correct version from gemfile.lock by simply running code_removed.", "why not make them all code_removed? space is not the only consideration when modelling a database. the domain your are modelling should drive data types and the sizes.", "doesn't work with me: i get a syntax error near perform", "works fine for me on greenplum 4.3.4.1 (built on postgresql 8.2.15).", "code_removed fixed it for me. that, of course, will upgrade your postgres version and update/install any dependencies. warning: do this knowing that your postgresql version will likely change. for me, that wasn't a big deal.", "here's the \"inline\" way: code_removed first we create a set from array, then we select only distinct entries, and then aggregate it back into array.", "code_removed", "@flavorscape, oh my -- fixed! althogh, it did run perfectly (ofc i test an example i post...), but that definetely looks better without the \"=\"", "also, if you're using bundler, env archflags=\"-arch x86_64\" bundle will work correctly so you don't have to install the gem globally.", "so has a good one here: how do you interpret a query\u2019s explain plan?", "you're right, that depends on the mail server.", "this is more useful than d when you're stuck with an pre-8.4 psql and a post-8.4 server - the d command is incompatible.", "@kylotan: given a naive datetime object, how do you know what timezone should you use? otherwise, following your logic even naive datetime objects representing local time are unambiguous (all you need is to provide the corresponding utc offset, to disambiguate the time).", "@alairock: i happen to be co-author of that page and it doesn't say anything of the sort.", "have a look at greatest and least. code_removed", "this post may also be helpful. it addresses the same issue by simply putting a symlink to the correct file location in one of the directories already pointed to by ldflags.", "in pgadmin you can make a backup from your original database, and then just create a new database and restore from the backup just created: right click the source database, backup... and dump to a file. right click, new object, new database... and name the destination. right click the new database, restore... and select your file.", "postgresql doesn't have a way to change its parameters via sql statements yet (as of 9.2). most logging parameters can be changed without a full server restart, by just doing pg_ctl reload instead. however, it takes a restart to change logging_collector.", "why is the code_removed required? i have postgres databases that require it and ones that don't. what's the difference?", "@davidmurdoch: a regular update/insert (as e.g. done in the examples in the manual) would \"not work\" the same way as my statement would \"not work\". if code_removed isn't the pk then it's going to update too many rows.", "@olivierpons yes, it's possible. add code_removed at the and of the query and it will return either a new row id or nothing, if no row has been inserted.", "note: not all versions of postgres support this being defined in one line.", "depending on the version you have installed on ubuntu type code_removed you will find an entry code_removed change that with the one you want and save after that restart the server using code_removed", "what does code_removed show? without flags it defaults to the cli user, and i would have said it defaults to the \"postgres\" admin db but i don't have a mac to test on.", "@matthieu: this is best introduction (and caution) to the subject that i know about: edge cases to keep in mind. part 1 \u2013 text.", "upvoted! any benchmark to select n rows instead of one?", "yes............!", "i got same issue because i'm using a wrong postgres's username in code. i logged into postgres code_removed and enter code_removed to take role name and correct postgres's username. so when you guys face this issue, you guys need to make sure you're using correct postgres username, password, hostname and database... hope this will help anyone", "i wrote a bit more detail to elaborate in stackoverflow.com/questions/12206600/\u2026 too.", "good point @craigringer i do something similar to this but only have 1 session performing the job. what's the best way to handle multiple sessions then? a transaction perhaps?", "starting with postgresql 9.5, there's a new syntax dedicated to getting random elements from a table: code_removed this example will give you 5% of elements from code_removed. see more explanation on this blog post:", "anytime, mate:)", "plus one for not using temporary intermediate files.", "even in a transaction, not null is enforced immediately, so must first add column, fill values, then add not null \u2014 as this answer does. (tested on postgres 9.6)", "i just stumbled upon the same problem but wanted to use unix sockets as clime said, but by still using the code_removed method. i mapped my system-username with the postgres-username inside the code_removed, which is working with the code_removed method. inside code_removed i added: code_removed inside code_removed i added: code_removed", "you don't need to restart - a code_removed is sufficient, and does not interrupt connections. not convinced this answer adds anything to those already here.", "worked great, for some reason as postgres or regular user.pgpass would not authenticate, this one liner worked.", "i am running postgres.app on a mac and i had to code_removed first. then code_removed worked for me.", "when you leave the answer please try to explain why this is happening, or how the postgres system work so we're not all just trying random stuff.", "perfect solution for os x", "code_removed is located in postgresql's data directory. the data directory is configured during the setup and the setting is saved as code_removed entry in code_removed, for example code_removed alternatively you can query your database with code_removed if you are a superuser.", "what is \"small,\" \"medium\" and \"bigger\" (by your estimation)?", "code_removed", "i believe the \u201ccorrect\u201d answer would be to first configure path correctly for postgres.app by adding the following to code_removed (code_removed or code_removed if using zsh): code_removed then open a new tab or window in terminal and install the code_removed gem with: code_removed documented here:", "leonbloy's answer is quite complete. i would only add the special case in which one needs to get the last inserted value from within a pl/pgsql function where option 3 doesn't fit exactly. for example, if we have the following tables: code_removed if we need to insert a client record we must refer to a person record. but let's say we want to devise a pl/pgsql function that inserts a new record into client but also takes care of inserting the new person record. for that, we must use a slight variation of leonbloy's option 3: code_removed note that there are two into clauses. therefore, the pl/pgsql function would be defined like: code_removed now we can insert the new data using: code_removed or code_removed and we get the newly created id. code_removed", "dmytrii, how did you go about setting up the transactions exactly? i thought that's what this line was for in spec_helper: code_removed. i'm having the same issue as you with postgres being more than twice as slow as sqlite and bit confused on how to fix it.", "the data directory contains an old postmaster.pid file / the data directory contains an unreadable postmaster.pid file postgresql puts a file named postmaster.pid in the data directory to store the process id of the postgresql server process. if postgresql crashes, this file can contain an old pid that confuses postgresql. you can fix this issue by deleting the postmaster.pid file. however, you must make sure that postgresql is really not running. open activity monitor and make sure that there are no processes named \u2018postgres\u2019 or \u2018postmaster\u2019. if you delete the postmaster.pid file while postgresql is running, bad things will happen. source:", "i had the same problem. the solution from depa is absolutely correct. just make sure that u have a user configured to use postgresql. check the file: code_removed the permission of this file should be given to the user you have registered your psql with. further. if you are good till now.. update as per @depa's instructions. i.e. code_removed and then make changes.", "+1 in any domain there's usually a shining star of wisdom. you're lucky if you can find one. for oracle, that person is tom kyte.", "it's still a useful comment. there are lots of deployment cases where this is still helpful.", "@devdave, because contrary to popular belief - a picture is not worth a thousand words. see next answer.", "with the newest brew install you can do code_removed to start postgres", "this is awesome. i had my select crafted and like @dannysauer, i was scared of the conversion. this simply does it for me. perfect!", "@charlie you can browse using finder from the go menu. go > go to folder..., or \u21e7\u2318g", "it's 2017, any updates on this question? is there actually no db version control out of the box? really?", "for code_removed the package code_removed (in my case code_removed) must be installed: code_removed", "thanks, will check it out!", "what is code_removed? code_removed is a method to retrieve data from two or more database tables. what are the different code_removeds? there are a total of five code_removeds. they are: code_removed 1. join or inner join: in this kind of a code_removed, we get all records that match the condition in both tables, and records in both tables that do not match are not reported. in other words, code_removed is based on the single fact that: only the matching entries in both the tables should be listed. note that a code_removed without any other code_removed keywords (like code_removed, code_removed, code_removed, etc) is an code_removed. in other words, code_removed is a syntactic sugar for code_removed (see: difference between join and inner join). 2. outer join: code_removed retrieves either, the matched rows from one table and all rows in the other table or, all rows in all tables (it doesn't matter whether or not there is a match). there are three kinds of outer join: 2.1 left outer join or left join this join returns all the rows from the left table in conjunction with the matching rows from the right table. if there are no columns matching in the right table, it returns code_removed values. 2.2 right outer join or right join this code_removed returns all the rows from the right table in conjunction with the matching rows from the left table. if there are no columns matching in the left table, it returns code_removed values. 2.3 full outer join or full join this code_removed combines code_removed and code_removed. it returns rows from either table when the conditions are met and returns code_removed value when there is no match. in other words, code_removed is based on the fact that: only the matching entries in one of the tables (right or left) or both of the tables(full) should be listed. code_removed 3. natural join: it is based on the two conditions: the code_removed is made on all the columns with the same name for equality. removes duplicate columns from the result. this seems to be more of theoretical in nature and as a result (probably) most dbms don't even bother supporting this. 4. cross join: it is the cartesian product of the two tables involved. the result of a code_removed will not make sense in most of the situations. moreover, we won't need this at all (or needs the least, to be precise). 5. self join: it is not a different form of code_removed, rather it is a code_removed (code_removed, code_removed, etc) of a table to itself. joins based on operators depending on the operator used for a code_removed clause, there can be two types of code_removeds. they are equi join theta join 1. equi join: for whatever code_removed type (code_removed, code_removed, etc), if we use only the equality operator (=), then we say that the code_removed is an code_removed. 2. theta join: this is same as code_removed but it allows all other operators like >, <, >= etc. many consider both code_removed and theta code_removed similar to code_removed, code_removed etc code_removeds. but i strongly believe that its a mistake and makes the ideas vague. because code_removed, code_removed etc are all connected with the tables and their data whereas code_removed and code_removed are only connected with the operators we use in the former. again, there are many who consider code_removed as some sort of \"peculiar\" code_removed. in fact, it is true, because of the first condition i mentioned for code_removed. however, we don't have to restrict that simply to code_removeds alone. code_removeds, code_removeds etc could be an code_removed too.", "i'm going to have to look at this and see how well it works with self referencing constraints and the like. i attempted to do something similar but stopped short of getting it fully working. if your solution works for me, i'm going to implement it. this is one of many dba tools that should be packaged and put up on github or something.", "code_removed is part of ansi sql, and supported in all dbms. i followed the link, and the document mentions nothing about extensions. perhaps the link is incorrect or out of date?", "as already mentioned, creating your own aggregate function is the right thing to do. here is my concatenation aggregate function (you can find details in french): code_removed ); and then use it as: code_removed", "on pgadmin iii i first selected the original db. then clicked on the sql button to get the sql window. without selecting a db first, i don't get the sql window. then executing the create database statement gave the error and it did not create the db. then i clicked on the title \"databases\" under which the dbs are listed and selected refresh. only now could the query be run. thought it may help someone else.", "using ordinals to \"make the code shorter\" is a terrible idea. how about leaving the column names in to make it readable?", "just what i was looking for - a way to execute the script from inside the code_removed command line. thanks!", "the file was 5gbs in size and i have 2gb memory. i gave up on it and use a script to generate create table and copy commands in the end.", "@keren, no worries, and you're welcome.", "how do you change the column type and also set that column to code_removed together? i am trying: code_removed this returns an error. what is the right syntax?", "caution: code_removed outputs the major and minor version (e.g., \"2.1\"), but not the revision number (e.g., \"2.1.4\"), like code_removed and code_removed do.", "for completeness, another version using regex rather than string cutting: code_removed so for instance: code_removed", "+1 for code_removed. (p.s. you can do that in ms sql server, too.)", "works great for me. this is what many would be looking for.", "tried dbeaver and it seems fine for me. this is basically an eclipse plugin.", "@krazzyr the output goes to stdout of the psql command, so ultimately whatever you do with stdout is where the data goes. in my examples i use '> file.csv' to redirect to a file. you want to make sure that is outside the command being sent to to the server through the psql -c parameter. see the 'local machine' example.", "beware - this will delete all of your data as well", "if you want just one row, you can use a calculated code_removed derived from code_removed. code_removed", "very clever. it's a pity there is no code_removed.", "+1 for simple and direct. but do we know for sure that pg_dump will dump data from identical databases in the same order if, say, the tables were built in different orders? (i'd hope the order is based on constraint dependencies, not at all caring about time of creation, but hope doesn't scale well.)", "+1, i tried others, but finally i got pg installed by gem with this solution.", "backup over ssh with password using temporary.pgpass credentials and push to s3: code_removed just substitute the first couple of config lines with whatever you need - obviously. for those not interested in the s3 backup part, take it out - obviously. this script deletes the credentials in code_removed afterward because in some environments, the default ssh user can sudo without a password, for example an ec2 instance with the code_removed user, so using code_removed with a different host account in order to secure those credential, might be pointless."]