["this solved the access restriction problem with java 3d on mac os x.", "in java, i want to do something like this: code_removed ...instead of: code_removed is there any way to do this?", "can i say, jpa is an interface and hibernate is a class which implements that interface?:p", "\"billions of booleans\" is copyrighted?", "do we still need to add it as a dependency?", "you probably want to delete the setters, and make first and second final, thus making the pair immutable. (if someone changed the components after using them as a hash key, weird things will happen).", "@adam code_removed is a very useful method when you want a list backed by a specific array. for example code_removed shuffles the original array.", "an array list is essentially an array with methods to add items etc. (and you should use a generic list instead). it is a collection of items which can be accessed through an indexer (for example [0]). it implies a progression from one item to the next. a linked list specifies a progression from one item to the next (item a -> item b). you can get the same effect with an array list, but a linked list absolutely says what item is supposed to follow the previous one.", "it's likely that the inside joke has it's origins here: googleblog.blogspot.be/2010/04/goats-are-baaaahk.html", "i would say there is a third way: code_removed maybe this is influenced a bit by my recent heavy usage of javascript and actionscript 3, but this way your class doesn't need to implement a pretty vague interface like code_removed.", "in java 8 you can use type code_removed for local-variable/field/method-argument/method-return-type if it never assigned code_removed (and do not check for code_removed) or type code_removed if it can be code_removed. then use method code_removed for processing code_removed and method code_removed for processing code_removed: code_removed", "instead of using: int itemposition = recyclerview.indexofchild(v); you should use: recyclerview.viewholder holder = recyclerview.getchildviewholder(v); int itemposition = holder.getadapterposition();", "the int on line one should be deleted in my example. and the two first lines inside of your function. the rest stays the same.", "look up in map is o(1), really?))))) where on earth it is o(1)?))) hashmap: first - you must calculate hash, second - search in array by hash, third! - linear search through all elements wich has the same hashcode, this calls 'collision', don't you hear about it? =) and what can you say about: treemap, concurrentskiplistmap are they 'o(1)', too?", "it's an efficiency question. code_removed is fast for adding and deleting elements, but slow to access a specific element. code_removed is fast for accessing a specific element but can be slow to add to either end, and especially slow to delete in the middle. array vs arraylist vs linkedlist vs vector goes more in depth, as does linked list.", "let me share a basic logcat analysis for when you meet a force close (when app stops working). docs basic tool from android to collect/analyse logs is the logcat. here is the android's page about logcat if you use android studio, you can also check this link. capturing basically, you can manually capture logcat with following command (or just check androidmonitor window in androidstudio): code_removed there's a lot of parameters you can add to command which helps you to filter and display the message that you want... this is personal... i always use the command below to get the message timestamp: code_removed you can redirect the output to a file and analyze it in a text editor. analyzing if you app is crashing, you'll get something like: code_removed this part of the log shows you a lot of information: when the issue happened: code_removed it is important to check when the issue happened... you may find several errors in a log... you must be sure that you are checking the proper messages:) which app crashed: code_removed this way, you know which app crashed (to be sure that you are checking the logs about your message) which error: code_removed a null pointer exception error detailed info about the error: code_removed you tried to call method code_removed from a code_removed object. however, that object was code_removed when you did it. stack trace: stack trace shows you the method invocation order... sometimes, the error happens in the calling method (and not in the called method). at com.example.khan.abc.audiofragment$1.onclick(audiofragment.java:125) error happened in file code_removed, inside code_removed method at line: code_removed (stacktrace shows the line that error happened) it was called by: code_removed which was called by: code_removed which was called by: code_removed etc.... overview this was just an overview... not all logs are simple etc... it is just to share the idea and provide a entry-level information to you... i hope i could help you someway... regards", "aside from breaking old programs (which arguably could just run on older versions of the framework if they can't upgrade) -- it tempts developers into using the methods for new development. i agree: they're deprecated for a reason.", "yes. you need to deep copy your object.", "you can get the os type name by using code_removed you can get all the info related to os by: code_removed it will output very much details -- listing properties -- java.runtime.name=openjdk runtime environment sun.boot.library.path=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0... java.vm.version=25.65-b01 java.vm.vendor=oracle corporation java.vendor.url= path.separator=: java.vm.name=openjdk 64-bit server vm file.encoding.pkg=sun.io user.country=us sun.java.launcher=sun_standard sun.os.patch.level=unknown java.vm.specification.name=java virtual machine specification user.dir=/web/com/1502258867_87863 java.runtime.version=1.8.0_65-b17 java.awt.graphicsenv=sun.awt.x11graphicsenvironment java.endorsed.dirs=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0... os.arch=amd64 java.io.tmpdir=/tmp line.separator= java.vm.specification.vendor=oracle corporation os.name=linux sun.jnu.encoding=utf-8 java.library.path=/home/cg/root/gnustep/library/librari... java.specification.name=java platform api specification java.class.version=52.0 sun.management.compiler=hotspot 64-bit tiered compilers os.version=3.10.0-327.4.4.el7.x86_64 user.home=/usr/share/ user.timezone= java.awt.printerjob=sun.print.psprinterjob file.encoding=utf-8 java.specification.version=1.8 user.name=apache java.class.path=/home/cg/root/gnustep/library/librari... java.vm.specification.version=1.8 sun.arch.data.model=64 java.home=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0... sun.java.command=myfirstjavaprogram java.specification.vendor=oracle corporation user.language=en awt.toolkit=sun.awt.x11.xtoolkit java.vm.info=mixed mode java.version=1.8.0_65 java.ext.dirs=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0... sun.boot.class.path=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0... java.vendor=oracle corporation file.separator=/ java.vendor.url.bug= sun.cpu.endian=little sun.io.unicode.encoding=unicodelittle sun.cpu.isalist=", "@clause if want to choose between mule esb & camel. what should be my demacation on choosing one ove the other", "here is an idea: write a book. i will buy it. thanks.", "a more java 8 resilient solution with code_removed code_removed", "thank you, will edit my answer. are you sure about this command? it looks weird: a file, a destination... then files again.", "i found this one for date code_removed but seems there is no template for time and date at the same time", "@metroidfan2002 \"if the find action method cannot find an action, then returning null is the right thing to do\" this is totally up to the designer of the program to decide whether an action that doesn't do anything fits his use case. it is totally valid to return an action that doesn't do anything if it fits your design. you imply that real/fake action differentiation is important to the caller, but both approaches are valid according to your use case. the case where not found action is important to the caller is also legit, but can be communicated through other means than returning null", "i would recommend doing both decompiling and disassembling. the resulting decompiled code is easier to understand but all modifications needs to be done with disassemblied version. especially true if proguard has been used. i find that dex2jar combined with jd-gui is the best for decompiling.", "@andreas, use theta notation if you want to show that average is n/4, big o is not made for that", "if you are looking for an example of this pattern in action, google guava uses this a lot for its private implementations: code.google.com/p/guava-libraries/source/browse/trunk/guava/\u200c\u200bsrc/\u2026", "fail: you have a function that requires a double and then perform + 1? this certainly goes against the principle of least surprise. what happens if you use min = 0.1 and max = 0.2?", "how can i pause/stop the download process in intent service method?? check my question plz stackoverflow.com/questions/24480206/\u2026", "there is a small loophole however: if you define your code_removed class as abstract. that would mean you have to instantiate you class as: code_removed (note the double braces at the end.) now you can retrieve the type of code_removed at runtime: code_removed note however that code_removed has to be the superclass of the class definition actually defining the final type for code_removed. it is also not very elegant, but you have to decide whether you prefer code_removed or code_removed in your code. for example: code_removed then: code_removed", "technically speaking, it's o(n) in time and space. qualitatively, due the immutability requirement of strings, it's pretty hard on memory; temporarily there are two copies of the char data in memory, plus the room for the encoded bytes. assuming some single-byte encoding, it will (temporarily) require 5 bytes of memory for each character in the file. since the question asks specifically for a string, that's what i show, but if you can work with the charbuffer returned by \"decode\", the memory requirement is much less. time-wise, i don't think you'll find anything faster in the core java libs.", "code_removed has three methods not inherited from code_removed. why should it be \"convoluted\"?", "@jwiley. same here; easier to read: when you \"hit\" return, you can stop reading - easier to maintain: when fixing something before the return, you do not have to worry for side effects outside of the loop. imho, returning fast usually leads to more compact, simpler code.", "@gewure it's been a while since i've been in this world, but my guess would be something about the need to unbox the object form of boolean.false into a boolean primitive to evaluate the condition. i don't know if this still works with the latest ides or compilers.", "java 8 does bring the code_removed method, that is nullsafe by using code_removed for null values. it can be used in the following manner: code_removed the code_removed method just calls code_removed internally.", "i would just like to throw the idea of annotation: @getter and @setter. with @getter, you should be able to obj = class.field but not class.field = obj. with @setter, vice versa. with @getter and @setter you should be able to do both. this would preserve encapsulation and reduce the time by not calling trivial methods at runtime.", "sorry for updating an old post. i got the reported problem and i solved it as said below. assuming you are using eclipse + m2e maven plugin, if you get this access restriction error, right click on the project/module in which you have the error --> properties --> build path --> library --> replace jdk/jre to the one that is used in eclipse workspace. i followed the above steps and the issue is resolved.", "another way of doing this by using implicit static method code_removed of enum. name will return the exact string used to create that enum which can be used to check against provided string: code_removed testing: code_removed code_removed inspiration: 10 examples of enum in java", "it's likely that the inside joke has it's origins here: googleblog.blogspot.be/2010/04/goats-are-baaaahk.html", "i'm using os x v10.11.5 (el capitan), and i tried setting java_home and forcing the \"correct\" java version via maven. nothing helped. the problem happened when the os x account was logged out while the application was still running. after logging in again, os\u00a0x opened the old terminal session with greyed-out history. i used the same terminal session to build the project, but failed with the unsupported class version error. cleaning the maven project didn't help at all. to solve the problem, i simply had to close the auto-opened terminal window and use a new one.", "actually, we use static properties and methods in a class, when we want to use some part of our program should exists there until our program is running. and we know that, to manipulate static properties, we need static methods as they are not a part of instance variable. and without static methods, to manipulate static properties is time consuming.", "string.concat about twice as fast as stringbuffer.append", "i think you are well confused about erros, they are normal exceptions like everything that extends throwable or even throwable, itself.", "then better, you should use try-with-resources", "serializable is too slow for large pojos. using a bus is a much better pattern.", "java requires that if you call this() or super() in a constructor, it must be the first statement. why? for example: code_removed the sun compiler says \"call to super must be first statement in constructor\". the eclipse compiler says \"constructor call must be the first statement in a constructor\". however, you can get around this by re-arranging the code a little bit: code_removed here is another example: code_removed so, it is not stopping you from executing logic before the call to super. it is just stopping you from executing logic that you can't fit into a single expression. there are similar rules for calling code_removed. the compiler says \"call to this must be first statement in constructor\". why does the compiler have these restrictions? can you give a code example where, if the compiler did not have this restriction, something bad would happen?", "@oscarryz the biggest change for me is that nio allows you to listen to many ports without allocating a thread for each. not a problem unless you want to send a packet to every machine in a class b network address space (65k addresses) to see what exists, windows runs out of threads at around 20k (found this out solving exactly this problem--discovery of a class a/b network, before nio it was tough).", "@iamcreasy i recently wrote a function that returned an array of ints. if an error happened inside the function, i wanted it to return a certain value, but the function needed to return an array. which way works for a one-liner return statement? only the third one.", "'meaning there is no implementation' but there is concrete classes thus we can javax.persistence.entitymanager.persist", "you might want to add code_removed checks. and perhaps set some of your variables to code_removed.", "i don't see that definition of code_removed in the javadoc for code_removed or in the overview of the code_removed class.", "on the other hand, if the floating point is being done in a dedicated fp unit, it may be using all kinds of fun tricks. i wouldn't like to bet on it without a benchmark:) (i may try it tonight though in c#, just to see...)", "for me, i was getting this error on the code_removed class. after some digging, i found that i accidentally copied the code_removed from java 8 into my java 7 folder. finding the code_removed for java 7 and putting it back into the folder fixed my issue. so something to try.", "if you're trying to serialize a list of object and one of them is null you'll end up including the null item in the json even with code_removed will result in: [{myobject},null] to get this: [{myobject}] one can do something like: code_removed tip: if you're using dropwizard you can retrieve the objectmapper being used by jersey using environment.getobjectmapper()", "you can do it perfectly well and very efficiently in two lines of standard java (see my answer), so there is not an awful lot to be gained by having a single method to do it. all of these weird-and-wonderful solutions are a bit of a waste of time.", "using bufferedreader: code_removed", "i think it is worth noting here that the code snippet above is supposed to be a subclass (inner class), preferably private. that way when the asynctask finishes, you can still manipulate the innards of your class.", "@dawesi: yes, it's not always possible to treat it as a code_removed.", "@mystical readability of the 'hack' can be increased by introducing a method. e.g. in java code_removed. the jit compiler will inline it at runtime anyway. i guess in other languages there are equal optimizations available.", "if you use: code_removed you may create and fill two lists! filling twice a big list is exactly what you don't want to do because it will create another code_removed array each time the capacity needs to be extended. fortunately the jdk implementation is fast and code_removed is very well done. it create a kind of arraylist named arrays.arraylist where the object[] data points directly to the array. code_removed the dangerous side is that if you change the initial array, you change the list! are you sure you want that? maybe yes, maybe not. if not, the most understandable way is to do this: code_removed or as said @glglgl, you can create another independant arraylist with: code_removed i love to use code_removed, code_removed, or guava. but if it don't fit, or you don't feel it, just write another inelegant line instead.", "@erikreppen thank you for the link, i am working on understanding what oop is supposed to be, but it is proving to be difficult with the amount of misinformation floating around. p.s. i also find wikipedia to be one of the best sources in many scientific fields.", "downvote for not explaining enough how system.getproperty(\"user.dir\") works.", "for me it was this: code_removed the device i was testing my app on was 4.1.2 which is sdk version 16! make the sure the target version is the same as your android target library. if you are unsure what your target library is, right click your project -> build path -> android, and it should be the one that is ticked. also, as others have mentioned, include the correct permissions to access the internet: code_removed", "@webserveis this is addressed in the comments in the example. short version - you should not = new random() for every call to the function, or your results will not be sufficiently random for many cases.", "this only works in simple cases. more complicated cases require a more complicated classpath.", "it's not rounded. it's cast (= truncated)", "for more information maybe checkout this article i found: mkyong.com/java/jackson-2-convert-java-object-to-from-json", "no elegant to be honest.", "camel helps in routing, transformation, monitoring. it uses routes; which can be described as: when service bus receives particular message, it will route it through no of services/broker destinations such as queue/topics. this path is known as route. example: your stock application has got some input by analyst, it will be processed through the application/web component and then result will be published to all the interested/registered members for particular stock update.", "how can i listen to the clicks in my activity/fragment?", "adding java_home environment variable (under system variables) did the trick for me. clicking \"back\" and \"next\" buttons didn't work. windows 7 professional x64, jdk 1.7.0_04 (64 bit, i don't have x86 version installed) i think that installer tries to find jdk in specific (1.6?) version and if it can't find it, checks java_home which was not set in my case. i have another computer (the same system but with jdk 1.6 x64) and it worked without java_home variable. you don't have to install 32 bit version of jdk:)", "that's probably the best solution if one can use java 8 and assertj!", "sorry @blazetama no idea about android...i have not tried that yet...", "yes. check \u201clist of time zones\u201d on wikipedia, e.g. nepal is at gmt+05:45.", "@jonskeet if i make it protected then what? won't it inherited in child class?", "i'm using os x v10.11.5 (el capitan), and i tried setting java_home and forcing the \"correct\" java version via maven. nothing helped. the problem happened when the os x account was logged out while the application was still running. after logging in again, os\u00a0x opened the old terminal session with greyed-out history. i used the same terminal session to build the project, but failed with the unsupported class version error. cleaning the maven project didn't help at all. to solve the problem, i simply had to close the auto-opened terminal window and use a new one.", "in java private prevents overrides, protected doesn't (but also isn't totally public), so they all do have their uses.", "is there a better different way out of it? @selvin", "security relevant software should do something like code_removed before rejecting a login attempt anyway, that\u2019s not only removing the possibility of timing attacks, it also makes counteracts brute force attempts.", "@djechlin a handler must always be linked to a looper, which will actually process the runnable you post(). the ui thread already comes with a looper, so you can just make a new handler() on the ui thread and post() runnables directly to it. these runnables execute on the ui thread. to have runnables execute on another thread, you need to make a new thread, then looper.prepare(), make a new handler() and then looper.loop(). any runnables posted to this new handler will execute on this new thread. if you don't do all this, the post() will throw an exception.", "if the immutability is the problem, can we use a code_removed or code_removed instead?", "not only upvoting, but people are even marking it as a favourite (47 favourites now). woow.", "somewhat worked for me. seems to be having problems with an app compatibility project (actionbar stuff?) maybe unrelated.", "they'll only be gc'd if the jvm in question is > 1.6. prior to 1.7, all strings were stored in permgen.", "just of curiosity: how does code_removed check, whether the array contains it? does it use code_removed or code_removed?", "right on, in my opinion almost all documentation revolving around beans can't describe the term as concisely as you have. +1", "because java does not support map literals, map instances must always be explicitly instantiated and populated. fortunately, it is possible to approximate the behavior of map literals in java using factory methods. for example: code_removed output: {a=1, b=2, c=3} it is a lot more convenient than creating and populating the map an element at a time.", "after doing the steps of this answer, i could not import the classes in the jar. to fix this, i had to do one more step, i.e add the jar to the classpath - stackoverflow.com/a/51198781/6648326", "yes. i realize that. but have you read my answer? doesn't it cover all of the cases that you mentioned? really my point is that your answer is adding nothing new... and since it is leaving out all of the many other causes, it is actually going to be a hinderance to a lot of readers.", "@fchen, right idea, but the 'e' in a scientific notation may also be followed by a '+' or '-'.", "i never remember how to write this, so i always come back to this same answer. upvoted, because this is clean answer and this code is copy pasted to so many places in my projects, thanks!", "ugh thats so sad - looks like it only supports 10 entries, after which you need to use ofentries. lame.", "you have the following in the main method: //this(); error because \"must be first statement in constructor this statement does not make much sense. if you are trying to say that this() cannot be called from inside main method, then yes it cannot be because main is static and will not have reference to this()", "\"==\" compares reference and not the content.change datos[0] == usuario to datos[0].equals(usuario) to get the correct answer", "this is my copy-paste version: code_removed", "this is very bad, different countries have different format style...", "@zero thanks for returning, but i wasn't contending your comment...rather, i was asking if rupesh's claim is true or false? in other words, if you extend code_removed, do multiple instances of the code_removed actually become different objects? because i think this is wrong...", "best and easy method.. code_removed", "this operator exists in groovy, so those who want to use it still have that as an option.", "for javax.mail.authenticationfailedexception, you need to turn on this setting google.com/settings/security/lesssecureapps", "also you can generate any lower or upper case letters or even special chars thought data from ascii table. for example, generate upper case letters from a (dec 65) to z (dec 90): code_removed generated output for generaterandomstr(65, 90, 100));: code_removed", "i came here looking for somebody who wrote this program so i wouldn't have to. thank you nick!", "simple example for reflection. in a chess game, you do not know what will be moved by the user at run time. reflection can be used to call methods which are already implemented at run time. code_removed", "you have forgotten to do \"t0 = system.currenttimemillis();\" before doing stringbuilder test. so the figure displayed for stringbuilder is actually time it took to run stringbuffer and stringbuilder test. add this line and you'll see that stringbuilder is faster about two times.", "if your public interface states that 'foo' is of type 't' and can be set to anything, you can never change that. you can not latter decide to make it of type 'y', nor can you impose rules such as size constraints. thus if you have public get/set that do nothing much set/get, you are gaining nothing that a public field will not offer and making it more cumbersome to use. if you have a constraint, such as the object can be set to null, or the value has to be within a range, then yes, a public set method would be required, but you still present a contract from setting this value that can't change", "@guus: no, especially not with the error message discussed here. it's more likely to be an artifact of configuration and/or specific loads that trigger the problem. but you really ought to ask this in a separate question (with as much detail as possible), it's getting too much for the comments here.", "this wont work unless you add a new thread: see here ssaurel.com/blog/\u2026", "@rohan, ok so you want a new list? see gavenkoa's answer with java 8 for that.", "how are identical values sorted with code?", "slightly unrelated, but this is imo the single best feature of scala: option[t]. it's awesome.", "code_removed", "@npiv: it's a valid thing to want to be able to do, but it does conflict with other parts of how enums work. basically there are conflicting requirements here.", "i was facing the same issue. i had installed version 8 and update 25 32 bit. to fix, install java se development kit 7 update 71 (64 bit). then through appwiz.cpl, delete the other version i.e. java update 25. done.", "you actually don't need to create an array, you can do simply: code_removed", "or even shorter: if (b && (++counter == howmany))", "the major difference is code_removed is syncronized but code_removed is not.if you need to use more than one thread, then stringbuffer is recommended.but, as per the execution speed code_removed is faster than code_removed, because its not syncronized.", "this is better than the accepted answer imho. one thing: the snippet of code you have doesn't close down the executor and i see millions of questions where people get this wrong, creating a new executor every time they want to spawn a task. code_removed would be better as a static (or injected) field so it only gets created once.", "wow nice! why not change the compiler to realize a java syntax problem.:) bold move!", "what if the number contains commas or decimal points?", "you can split a string by a line break by using the following statement: code_removed you can split a string by a hyphen/character by using the following statement: code_removed", "@aroth - which version of the jdk are you using and which file did you install?", "it prints \"1, 2, 3, 4, 5, \" as output, it prints comma after the last element too.", "using anything other than code_removed to compare enum constants is nonsense. it's like comparing code_removed objects with code_removed \u2013 don't do it! however, there was a nasty bug (bugid 6277781) in sun jdk 6u10 and earlier that might be interesting for historical reasons. this bug prevented proper use of code_removed on deserialized enums, although this is arguably somewhat of a corner case.", "@vinayakb is it possible to replace the body string as generated bitmap qr code?", "my small contribution: what is a transient field? basically, any field modified with the code_removed keyword is a transient field. why are transient fields needed in java? the code_removed keyword gives you some control over the serialization process and allows you to exclude some object properties from this process. the serialization process is used to persist java objects, mostly so that their states can be preserved while they are transferred or inactive. sometimes, it makes sense not to serialize certain attributes of an object. which fields should you mark transient? now we know the purpose of the code_removed keyword and transient fields, it's important to know which fields to mark transient. static fields aren't serialized either, so the corresponding keyword would also do the trick. but this might ruin your class design; this is where the code_removed keyword comes to the rescue. i try not to allow fields whose values can be derived from others to be serialized, so i mark them transient. if you have a field called code_removed whose value can be calculated from other fields (code_removed, code_removed & code_removed), there is no need to serialize it. another good example is with article word counts. if you are saving an entire article, there's really no need to save the word count, because it can be computed when article gets \"deserialized.\" or think about loggers; code_removed instances almost never need to be serialized, so they can be made transient.", "in spring 4, latest version: the @repository annotation is a marker for any class that fulfills the role or stereotype of a repository (also known as data access object or dao). among the uses of this marker is the automatic translation of exceptions as described in section 20.2.2, \u201cexception translation\u201d. spring provides further stereotype annotations: @component, @service, and @controller. @component is a generic stereotype for any spring-managed component. @repository, @service, and @controller are specializations of @component for more specific use cases, for example, in the persistence, service, and presentation layers, respectively. therefore, you can annotate your component classes with @component, but by annotating them with @repository, @service, or @controller instead, your classes are more properly suited for processing by tools or associating with aspects. for example, these stereotype annotations make ideal targets for pointcuts. it is also possible that @repository, @service, and @controller may carry additional semantics in future releases of the spring framework. thus, if you are choosing between using @component or @service for your service layer, @service is clearly the better choice. similarly, as stated above, @repository is already supported as a marker for automatic exception translation in your persistence layer.", "after having really long discussion with cloudbees guys about properly maven packaging of such kind of jars, they made an interesting good proposal for a solution: creation of a fake maven project which attaches a pre-existing jar as a primary artifact, running into belonged pom install:install-file execution. here is an example of such kinf of pom: code_removed but in order to implement it, existing project structure should be changed. first, you should have in mind that for each such kind of jar there should be created different fake maven project (module). and there should be created a parent maven project including all sub-modules which are: all jar wrappers and existing main project. the structure could be: root project (this contains the parent pom file includes all sub-modules with module xml element) (pom packaging) jar 1 wrapper maven child project (pom packaging) jar 2 wrapper maven child project (pom packaging) main existing maven child project (war, jar, ear.... packaging) when parent running via mvn:install or mvn:packaging is forced and sub-modules will be executed. that could be concerned as a minus here, since project structure should be changed, but offers a non static solution at the end", "code_removed should do thing you want. string class has many method to operate with string.", "if you make an extend thread that prints out \"hello\" - and make a class that implements runnable - that prints out \"hello\", does that mean this is still true: \"you're not really specialising the thread's behaviour\"?. i mean is there some mechanical things behind the scenes that make them different - or did jon skeet mean that you can potentially write more kind of code in an thread that extendend - and that that therefore have a greater risk of being screwed up with? how would telling an extend thread to print hello be more specializing than telling runnable to print hello? how?", "this is an awful lot of upvotes for an answer that, while informative, does not in any way actually answer the question.", "adding java_home environment variable (under system variables) did the trick for me. clicking \"back\" and \"next\" buttons didn't work. windows 7 professional x64, jdk 1.7.0_04 (64 bit, i don't have x86 version installed) i think that installer tries to find jdk in specific (1.6?) version and if it can't find it, checks java_home which was not set in my case. i have another computer (the same system but with jdk 1.6 x64) and it worked without java_home variable. you don't have to install 32 bit version of jdk:)", "don't we need to close inputstream object passed to ioutils.tostring(inpustream)???", "code_removed hashtable is a data structure that retains values of key-value pair. it doesn\u2019t allow null for both the keys and the values. you will get a code_removed if you add null value. it is synchronized. so it comes with its cost. only one thread can access hashtable at a particular time. example: code_removed hashmap: hashmap is like hashtable but it also accepts key value pair. it allows null for both the keys and the values. its performance better is better than code_removed, because it is code_removed. example: code_removed", "you can use this code also, with some precautions. option #1: handle the exception explicitly, for example, showing a message dialog and then stop the execution of the current workflow. for example: code_removed option #2: reset the affected variable if the execution flow can continue in case of an exception. for example, with some modifications in the catch block code_removed using a string constant for comparison or any sort of computing is always a good idea, because a constant never returns a null value.", "possible duplicate of difference between a += 10 and a = a + 10 in java?", "you can use google's adb tool to get code_removed to analyze the issue. code_removed open code_removed file and search for your application name. there should be information on why it failed, the line number,class name etc.", "code_removed why", "@shervin lots of things were talked about. i think proposals were in to three digits. but i don't think it was ever intended to pick this one up.", "using exceptions for control flow is not exactly a best practice. so, no it is no option.", "i was unable to solve this problem with the solutions stated here (although the answer stated has, no doubt, cleared my concepts). i faced this problem two times and each time i have tried different solutions (in the eclipse ide). firstly, i have come across with multiple code_removed methods in different classes of my project. so, i had deleted the code_removed method from subsequent classes. secondly, i tried following solution: right click on my main project directory. head to source then clean up and stick with the default settings and on finish. after some background tasks you will be directed to your main project directory. after that i close my project, reopen it, and boom, i finally solved my problem.", "i like c# as much as the next guy, but its no use adding a.net c# code snippet for a java question when the features don't exist in java", "i would like to determine the operating system of the host that my java program is running programmatically (for example: i would like to be able to load different properties based on whether i am on a windows or unix platform). what is the safest way to do this with 100% reliability?", "in java, arrays don't override code_removed, so if you try to print one directly, you get the classname + @ + the hex of the code_removed of the array, as defined by code_removed: code_removed but usually we'd actually want something more like code_removed. what's the simplest way of doing that? here are some example inputs and outputs: code_removed", "also note that code_removed normally contains code_removed for testing as this is the first thing you would wish to test for if you wanted to test if two objects are equal. and code_removed actually does look at values for primitive types, for objects it checks the reference.", "the non-reduced solution to this problem is: code_removed reducing using k-maps, one gets: code_removed one could reduce this further by using exclusive or on the a'bc and abc' minterms and combining the abc and ab'c minterms: code_removed", "in a thread on code_removed, hunter gratzner gives some arguments against the presence of a code_removed construct in java. the main argument is that a class code_removed doesn't convey any semantics about the relationship between the two values (how do you know what \"first\" and \"second\" mean?). a better practice is to write a very simple class, like the one mike proposed, for each application you would have made of the code_removed class. code_removed is an example of a pair that carry its meaning in its name. to sum up, in my opinion it is better to have a class code_removed, a class code_removed and a class code_removed rather than a generic code_removed that doesn't tell me anything about what it's supposed to do.", "worked for me +1", "the basic difference between servlets and jsp is that in servlets we write java code and in that we embed html code and there is just reverse case with jsp. in jsp we write html code and in that we embed java code using tags provided by jsp.", "c# prints \"terkcq onbmmjujsrb\":)", "my preferred way of thinking of things is to say that references can encapsulate identity, mutable state, both, or neither. additionally, references can encapsulate mutable state either because they identify an immutable object, or because the object they identify will never be exposed to anything that might mutate it. it's too bad java has no concept of such distinctions, since things like equality checking and cloning could be handled 99% automatically if it did.", "i have the following json text. how can i parse it to get code_removed, code_removed, code_removed, etc.? code_removed", "docs.oracle.com/javase/7/docs/technotes/guides/language/\u2026 states: the java compiler generates generally more efficient bytecode from switch statements that use string objects than from chained if-then-else statements.", "when you need a lot of random numbers, i do not recommend the random class in the api. it has just a too small period. try the mersenne twister instead. there is a java implementation.", "jdk is a superset of jre, and contains everything that is in jre, plus tools such as the compilers and debuggers necessary for developing applets and applications. jre provides the libraries, the java virtual machine (jvm), and other components to run applets and applications written in the java programming language.", "you really ought to get a framework in place via a repository and identifying your dependencies up front. using the system scope is a common mistake people use, because they \"don't care about the dependency management.\" the trouble is that doing this you end up with a perverted maven build that will not show maven in a normal condition. you would be better off following an approach like this.", "an interesting and related rule is benford's law, stating that in many natural data sources, the leading numbers \"1\" and \"2\" appear much more frequently, for a similar reason: to go from 9 to 10 takes a much smaller factor than from 10 to 20. in this case, to go from code_removed to code_removed takes much less than to go from code_removed to code_removed.", "also hashtable is synchronized. anyways,, i like your answer, clean and clear.", "if you have a second project added to your build path make sure it has the same compiler version as your first one: properties -> java compiler -> compiler compliance level", "is logger a built in logger or one that you created and write to a file.", "yes (sic!). that's all gwt developers need to know about it.", "@\u30c4pratikbutani\u30c4 since is now out android studio 1.0 i think adt is now no more supported, i suggest you to migrate to android studio.", "jre: java runtime environment. it is basically the java virtual machine where your java programs run on. it also includes browser plugins for applet execution. jdk: it's the full featured software development kit for java, including jre, and the compilers and tools (like javadoc, and java debugger) to create and compile programs. usually, when you only care about running java programs on your browser or computer you will only install jre. it's all you need. on the other hand, if you are planning to do some java programming, you will also need jdk. sometimes, even though you are not planning to do any java development on a computer, you still need the jdk installed. for example, if you are deploying a webapp with jsp, you are technically just running java programs inside the application server. why would you need jdk then? because application server will convert jsp into servlets and use jdk to compile the servlets. i am sure there might be more examples.", "not sure if this is what you want, but this takes about 1 millisecond. (javascript, not java.) code_removed", "here is my shortest solution: code_removed", "we can just treat the reference as an equivalence of pointer in c++.", "i implemented this without commons and got a less than obvious exception thrown. i then implemented this using commons and it told me exactly what was wrong. moral of the story: why live in the dark ages if you don't have to?", "@joshas i can confirm. the only way seems to reinstall everything:(", "@tgm1024: as others explained in comments above yours, this is just a thin wrapper that doesn't do any copying. stackoverflow.com/questions/1128723/\u2026", "async work on most case", "what do you mean by \"non-standard\" code?", "@charles: lots of places were had less conventional offsets back then. in some countries, different towns each had their own offset to be as close to geographically correct as possible.", "stackoverflow.com/questions/1386275/\u2026", "nobody should be using the jdk internal apis, though.", "logically we have: code_removed \u21d2 code_removed but not vice-versa!", "so elegant! i had to check with pen and paper to believe it:) kudos to you sir!", "bombe's answer is correct, however note that unless you absolutely must use md5 (e.g. forced on you for interoperability), a better choice is sha1 as md5 has weaknesses for long term use. i should add that sha1 also has theoretical vulnerabilities, but not as severe. the current state of the art in hashing is that there are a number of candidate replacement hash functions but none have yet emerged as the standard best practice to replace sha1. so, depending on your needs you would be well advised to make your hash algorithm configurable so it can be replaced in future.", "this is the best way to answer the question imo... first, we must understand that, in java, the parameter passing behavior... code_removed is exactly the same as... code_removed not considering stack locations, which aren't relevant in this discussion. so, in fact, what we're looking for in java is how variable assigment works, which could be classified, imo, as mutable or immutable assignment (pass-by-reference or pass-by-value, respectivelly), when an assignment does change or does not change a previous assignment. having this in mind, we can run some java code to find the answer by ourselves. code_removed that's the output of my run: [1] create some new myinteger objects... obj1 = new -> obj1 value: 9 obj2 = new -> obj2 value: 8 obj3 = new -> obj3 value: 7 [2] now lets assign some of them to another object... obj3 = obj2 -> obj3 value: 8 obj2 = obj1 -> obj2 value: 9 [3] so, if obj3 = obj2 and obj2 = obj1, what is the value of obj3? obj3 -> obj3 value: 8 [4] lets assign to obj1 value the number 1... obj1 -> obj1 value: 1 [5] so, if obj2 = obj1, what is the value of obj2? obj2 -> obj2 value: 1 [6] end. you can see in [3] that assigning to code_removed the variable code_removed doesn't change the previous assignment of code_removed to code_removed, so they were immutable assignments (pass-by-value) or copy of variables. but the assignment of a new value to code_removed in [4] just changed the value of code_removed in [5], which looks like a mutable assignment (pass-by-reference), not like a copy. so how could this happen? i think it's the confusing point to most people, but still java did the variable copy. the point is... in java, the content of a primitive type variable is different from the content of a complex type variable. a single instance of a complex type can allocate a good amount of the available memory, so java would end up all the memory really fast doing content copies through variable assignment... and it would keep the cpu much more busy too. to avoid this, a complex type variable doesn't hold the object instance itself... it holds the memory address where the instance is stored, as the cost of doing address copy is much lower. so, after [2], code_removed and code_removed are two distinct copies of the same memory address that holds the object instance. thus, updating the object in this address through one variable will change the result you'll get on the other variable just like in [4] and [5], but still these variables are distinct copies through what i call immutable assignment. hope it's clear now.", "be aware! using line.split this way will not parse properly if a field contains a comma and it is surrounded by quotes. this split will ignore that and just separate the field in chunks using the internal comma. hth, marcelo.", "ijidea 13, i got after adding \"artifact...:war exploded: library gson-2 required for module... is missing from artifact\"", "enum singleton the simplest way to implement a singleton that is thread-safe is using an enum code_removed this code works since the introduction of enum in java 1.5 double checked locking if you want to code a \u201cclassic\u201d singleton that works in a multithreaded environment (starting from java 1.5) you should use this one. code_removed this is not thread-safe before 1.5 because the implementation of the volatile keyword was different. early loading singleton (works even before java 1.5) this implementation instantiates the singleton when the class is loaded and provides thread safety. code_removed", "updated for jdk 10.0.2 code_removed updated for jdk 10.0.1 code_removed updated for jdk 9 it looks like you can download it now directly from java.net without sending a header code_removed updated for jdk 8u171 rpm: code_removed updated for jdk 8u151 tar gz: code_removed updated for jdk 8u151 tar gz: code_removed rpm: code_removed updated for jdk 8u131 rpm: code_removed tar gz: code_removed rpm using curl: code_removed in all cases above, subst 'i586' for 'x64' to download the 32-bit build. -j -> junk cookies -k -> ignore certificates -l -> follow redirects -h [arg] -> headers code_removed can be used in place of code_removed. update for jdk 7u79 tar gz: code_removed rpm using curl: code_removed once again, make sure you specify the correct url for the version you are downloading. you can find the url here: oracle jdk download site original answer from 9th june 2012 if you are looking to download the oracle jdk from the command line using code_removed, there is a workaround. run the code_removed command as follows: code_removed be sure to replace the download link with the correct one for the version you are downloading.", "you said that if-else is faster than switch but this stackoverflow.com/questions/6805026/is-switch-faster-than-if question tells the different story.", "in practice, closely related to stackoverflow.com/questions/29140402/\u2026", "@samueledwinward thats the whole reason i made this post... the regex example used other people's provided answers and showed how inefficient it is. even if you attempt regex with pre-compiling it ahead of time and only using that, the time differences are: 2587 ms for the regex i posted from other provided people, 950 ms when compiled ahead of time, 144 ms when doing it as a numeric array (for 1 mil iterations of the same string). compiling ahead of time obviously would help, but sadly it's still quite inferior to the array way... unless there's some insane optimization i don't know of.", "this is a nice one line solution. fyi, for anyone using code_removed, the full line is: code_removed", "i'd thought the \"@\" operator was not part of standard pascal, but was implemented as a common extension. is it part of the standard? my point was that in a language with true pass-by-ref, and no ability to construct a non-ephemeral pointer to an ephemeral object, code which holds the only reference to an array, anywhere in the universe, before passing the array by reference can know that unless the recipient \"cheats\" it will still hold the only reference afterward. the only safe way to accomplish that in java would be to construct a temporary object...", "can i tell jackson also to ignore null objects? like {[\"bla\": {\"name\": \"bla1\"},null]}", "what is the usage doing like this list<number> can allow to do all operation what list<? super number > can do and list<number> can allow all operation what list<? extends number > can do", "[continued] to use examples like code_removed, where it makes sense to say that code_removed (\"can be compared to any code_removed\") does not imply code_removed (\"can be compared to any code_removed\").", "see also stackoverflow.com/questions/157944/create-arraylist-from-arr\u200c\u200bay", "at the risk of not adding a great deal of value to the existing answers, but having gone through all this mess myself, i would like to see if i can consolidate how i addressed the problem: maintain separate development from your normal machine environments. the reason for this is that there are probably many applications running on your machine that you are not aware of that need java to be updated occasionally, for example banking and security applications. when those updates occur they change the environmental variables and so if you are using those in your development environment the update will almost certainly break your eclipse setup. install versions of eclipse, either 32 and 64 bit depending on your plugins etc. the reason is that many plugins still require 32bit and trying to install them into a 64bit environment causes many obscure (very obscure) errors. this means for example you may have to have separate instances of eclipse for your java ee, php, python, assembler, etc, development environments. this may appear to be onerous, but for me this has been a blessing. install two java runtimes once again one 32bit and one 64bit and then edit the eclipse.ini for each of your installations to point to the correct jre, not the jre home in the environmental variables. i create a directory in code_removed and code_removed and in your eclipse.ini file you add the -vm code_removed line to point to your needed java runtime. once the above is done you can install java sdks as much as you like but your development environment will never break. if you need to update your development runtime environment just alter the -vm path in your eclipse.ini", "@lorenzo: no, in java everything is passed by value. primitives are passed by value, and object references are passed by value. the objects themselves are never passed to a method, but the objects are always in the heap and only a reference to the object is passed to the method.", "it is called telescoping constructor anti-pattern or constructor chaining. yes, you can definitely do. i see many examples above and i want to add by saying that if you know that you need only two or three constructor, it might be ok. but if you need more, please try to use different design pattern like builder pattern. as for example: code_removed you may need more. builder pattern would be a great solution in this case. here is an article, it might be helpful", "adding org.junit.jupiter:junit-jupiter-engine:5.0.0-rc2 dependency (in addition to the already existing junit:junit:4.12) to be able to use assertthrows is perhaps not the preferred solution, but did not cause any issues for me.", "this will return code_removed for a single plus code_removed or minus code_removed, and code_removed for code_removed", "there are some cases where exists() will return an incorrect result. for example, when using an nfs file system there is an issue with stale file handles: bugs.java.com/bugdatabase/view_bug.do?bug_id=5003595 it's kind of obscure, but has been the cause of some frustrating bugs in production code before.", "thnks it works for me....:)", "@geza i redid the loop part using code_removed with 16 digits of precision for the modulus part and i got 50% failures.", "you need to use jsonnode and objectmapper class from the jackson library to fetch the nodes of your json tree.add the below dependency in your pom.xml to get an access to the jackson classes. code_removed you shall give a try on the below code, this would work: code_removed", "on linux just as on mac.", "once java-8 is out (march 2014) you'll be able to use streams: code_removed printing all the lines in the file: code_removed", "no, a code_removed is not a code_removed. consider what you can do with a code_removed - you can add any animal to it... including a cat. now, can you logically add a cat to a litter of puppies? absolutely not. code_removed suddenly you have a very confused cat. now, you can't add a code_removed to a code_removed because you don't know it's a code_removed. you can retrieve a value and know that it will be an code_removed, but you can't add arbitrary animals. the reverse is true for code_removed - in that case you can add an code_removed to it safely, but you don't know anything about what might be retrieved from it, because it could be a code_removed.", "threadlocal is a specially provisioned functionality by jvm to provide an isolated storage space for threads only. like the value of instance scoped variable are bound to a given instance of a class only. each object has its only values and they can not see each other value. so is the concept of threadlocal variables, they are local to the thread in the sense of object instances other thread except for the one which created it, can not see it. see here code_removed", "i'm with you bemrose. at least they gave us an code_removed method instead of a (static) code_removed method in code_removed...:rollseyes::)", "if you wish to keep the carriage return characters from the string into a file here is an code example: code_removed", "i know it's a bit late, but i think there are some people who are interested in performance. i've done a little performance test. i wrote a class \"numberholder\" which, well, holds an integer. you can either read that integer by using the getter method code_removed or by directly accessing the number by using code_removed. my programm reads the number 1,000,000,000 times, via both ways. that process is repeated five times and the time is printed. i've got the following result: code_removed (time 1 is the direct way, time 2 is the getter) you see, the getter is (almost) always a bit faster. then i tried with different numbers of cycles. instead of 1 million, i used 10 million and 0.1 million. the results: 10 million cycles: code_removed with 10 million cycles, the times are almost the same. here are 100 thousand (0.1 million) cycles: code_removed also with different amounts of cycles, the getter is a little bit faster than the regular way. i hope this helped you.", "code_removed", "different ways to print arrays in java: simple way code_removed output: [one, two, three, four] using code_removed code_removed output: [one, two, three, four] printing array of arrays code_removed output: [[ljava.lang.string;@1ad086a [[ljava.lang.string;@10385c1, [ljava.lang.string;@42719c] [[fifth, sixth], [seventh, eighth]] resource: access an array", "removeif example should be code_removed", "i got a exception in thread \"awt-eventqueue-0\" java.lang.stackoverflowerror when i ran this.", "android provides code_removedclass ( here the implementation: code_removed", "@jonskeet yes! we can chain to one other constructor but actually we can have a very long chain", "a clear understanding of these terms(jvm, jdk, jre) are essential to grasp their usage and differences. jvm java virtual machine (jvm) is a run-time system that executes java bytecode. the jvm is like a virtual computer that can execute a set of compiled instructions and manipulate memory locations. when a java compiler compiles source code, it generates a highly optimized set of instructions called bytecode in a.class file. the jvm interprets these bytecode instructions and converts them to machine-specific code for execution. jdk the java development kit (jdk) is a software development environment that you can use to develop and execute java applications. it includes the jre and a set of programming tools, such as a java compiler, interpreter, appletviewer, and document viewer. the jdk is implemented through the java se, java ee, or java me platforms. jre the java runtime environment (jre) is a part of the jdk that includes a jvm, core classes, and several libraries that support application development. though the jre is available as part of the jdk, you can also download and use it separately. for complete understanding you can see my blog: jdk jre jvm and differences", "-1 for this answer. bad bad idea to do network/ file io on main thread of the application. you should not manipulate the policies just to get things working. use separate thread for networking rather.", "do you use.tostring() on that?", "thanks for stating the straight fact: because java.lang.enum is declared final.", "the java 9 method is clean and all, until you realize how it was implemented", "it display only 0% out of 100 only other work properly", "i did not have to uninstall the jdk's either, but i chose to clean my system to wipe out future error causes. i had also mentioned the vm arguments, and explained why they could obviously not work for me. it is your choice how you want to set up your system, depending on what you really need.", "@gevorg - the c/c++ languages don't own the concept of a \"pointer\". there are other languages that use pointers but do not allow the same types of manipulation of pointers that c/c++ allow. java has pointers; they're just protected against mischief.", "you could use code_removed command in your terminal to know the path where java being installed.", "java 7 working with all versions of android. one exception: code_removed works only since kitkat.", "@joeslice that only works if the jars are in the directory root, right? it doesn't seem to work for jars inside sub-directories inside 'lib'.", "\"if that's how dumb your programmers are, \"safe\" is the one thing you're not.\" -- i don't agree with this quote. this is what type checking is all about: preventing \"dumb\" mistakes at compile time, thus even before the code is run. even smart people do dumb mistakes, better some guarantees than promises.", "@cutmancometh i have understood your answer very well. but i am confused that if this answer is true, then why a simple swap fails? i am talking about a swap method that takes two arguments and then inside the method you create a temp object and then do the swapping. if possible for you, can you explain that scenario in your answer? please", "not all business logic should go into services! services, in terms of ddd, should only contain domain logic that affects more than one entity. see answer stackoverflow.com/a/41358034/238134", "@erickson i don't know what you were saying about it, but it seemed to include bits coming in to it, which the code_removed method never uses. it's using code_removeds and i don't see how 130 bits is relevant in any respect. you also seem to be saying using 32 instead of 36 is of some benefit, which i can't see any evidence of either. that's not to say i couldn't be missing something, but your explanation doesn't make it obvious.", "@restinpeace, that is a correct assumption. reflection relies on introspection and so encompasses that as a piece. my comment was to clarify that reflection allows runtime modifications. the answer gives an example that shows these runtime modifications occurring, but defines reflection as just the ability to do the introspection. this question has very high seo for reflection and i thought it important to add additional clarification.", "as answered before, there are many ways of dealing with exceptions in junit. but with java 8 there is another one: using lambda expressions. with lambda expressions we can achieve a syntax like this: code_removed assertthrown accepts a functional interface, whose instances can be created with lambda expressions, method references, or constructor references. assertthrown accepting that interface will expect and be ready to handle an exception. this is relatively simple yet powerful technique. have a look at this blog post describing this technique: the source code can be found here: disclosure: i am the author of the blog and the project.", "code_removed has an imprecision in rounding problem values near a boundary. e.g. x.xx5 and code_removed. the product saved in code_removed incurs a rounding that will result in the wrong code_removed value from time to time. it would have made more sense here to maintain the extra precision of code_removed with code_removed rather than code_removed", "would be good to mention this is for 'org.json' lib. however, i do not think this is a good way to do it at all being very verbose, and 'org.json' lib itself being obsolete (slow, cumbersome api). there are better choices: gson, jackson, boon, genson to use.", "+1: lovely solution to the puzzle, but hopefully we don't see anything like this in the real world:)", "i benchmarked it for the first 100 million integers.. this approximately halves the time required.", "how to mock methods with void return type? i implemented an observer pattern but i can't mock it with mockito because i don't know how. and i tried to find an example on the internet, but didn't succeed. my class looks like code_removed the system are not triggered with mock. =( i want to show above mentioned system state. and make assertion according to them.", "@bert f i still don't get it: if 'only vegetables or subclasses of vegetables can be fed to the box foo', then what does '<? super vegetables> mean?", "@pascalthivent manually updating a release number in a pom is a pain if you are doing continuous releases. i use the versions plugin combined with the scm plugin to get past this (see my answer).", "okay, this question is already answered, but i'll drop my answer anyway. it might help someone. i've been looking for a solution for android (api 7). joda was out of the question - it is huge and suffers from slow initialization. it also seemed a major overkill for that particular purpose. answers involving code_removed won't work on android api 7. ended up implementing this simple class. it covers only the most common form of iso 8601 strings, but this should be enough in some cases (when you're quite sure that the input will be in this format). code_removed performance note: i instantiate new simpledateformat every time as means to avoid a bug in android 2.1. if you're as astonished as i was, see this riddle. for other java engines, you may cache the instance in a private static field (using threadlocal, to be thread safe).", "nice but still it's reinventing the wheel as almost all \"solutions\" here. also, fails on 'null' (as almost all the others).", "louis wasserman (yes, one of the google guava guys), actually dislikes this answer quite a bit: \"it breaks in several really confusing ways if you even look at it funny. if the backing map changes, it will break. if multiple keys map to the same value, it will break. if you call get on a key that isn't in the backing map, it will break. if you do anything whatsoever that would cause a lookup to happen on a key that isn't in the map -- a map.equals call, containskey, anything -- it will break with really weird stack traces.\" plus.google.com/102216152814616302326/posts/beqldk712mj", "regarding your 3rd point. that's not true. i can add @requestmapping annotation even to methods under service class as well(i mean classes annotated with @service).", "no, but it makes the intent a lot clearer. see the first comment on the accepted answer.", "@kilaka yeah use name() instead of getdisplayname() since name() is final and getdisplayname() is not", "try this,simple and easy code_removed", "if you know the size, then java provides the code for you. see my answer or google for \"datainputstream\" and it's readfully method.", "balusc, thank you. i split the benchmark into several smaller methods for hotspot convenience and now it seems to run equally fast with all compilers.", "@mykhayloadamovych: the benefit of code_removed or code_removed isn't in the case where your code_removed might be null, but in the case where it should never be null. if you have a type that explicitly means \"this value might be null -- use with caution\", and you use and return such a type consistently, then whenever you see a plain old code_removed in your code, you can assume it is never null. (course, this would be a lot more useful if enforceable by the compiler.)", "@avgvstvs: \u201call strings were stored in permgen\u201d is just dead wrong. only interned strings were stored there and if they weren\u2019t originating from string literals referenced by code, they were still garbage collected. just think about it. if strings were generally never gced in jvms prior to 1.7, how could any java application survive more than a few minutes?", "@supercat no, it code_removeds just fine, as evidenced by the code_removed statement. it's during the code_removed that everything blows up and the program exits.", "you need to end the last environment variable with a semi colon. before adding the new path. i.e \"c: yargato bin;c: java bin;c: programfiles java......; also end it with a semicolon", "you should either use java7 try-with-resources or put the close() in a finally block, in order to make sure that the file is closed in case of exception", "mate, you were right:-)", "the only thing that worked was a fresh a fresh download of adt bundle. i replaced the older eclipse folder and merged and overwrote the sdk folder. worked!", "it seems, you have a fundamental misunderstanding about string deduplication. it doesn\u2019t \u201cintern strings\u201d, all it does, is letting strings with the same contents point to the same array, which actually reduces the number of array instances containing the plaintext password, as all but one array instance can be reclaimed and overwritten by other objects immediately. these strings are still collected like any other string. maybe it helps, if you understand that the de-duplication is actually done by the garbage collector, for strings that have survived multiple gc cycles only.", "the threadlocal.get() method will call threadlocal.initialvalue() (once) for each thread, which means that a simpledateformat object is created for each thread. isn't it better then just to have simpledateformat as local variables(since we don't have to deal with garbage collection issues)?", "@boutta - ada has this style of break spelled with an code_removed statement, and it has a code_removed, so you can put the label either end of the loop. iirc, code_removed is much more frowned on than the code_removed version though. even for code_removed, some people will beat you with a pretty big stick for using a \"hidden goto\", but if you use a blatant goto...", "the six types of object reachability states in java - strongly reachable objects - gc will not collect (reclaim the memory occupied by) this kind of objects. these are reachable via a root node or another strongly reachable object (i.e. via local variables, class variables, instance variables etc.) softly reachable objects - gc may attempt to collect this kind of objects depending on memory contention. these are reachable from the root via one or more soft reference objects weakly reachable objects - gc must collect this kind of objects. these are reachable from the root via one or more weak reference objects resurrect-able objects - gc is already in the process of collecting these objects. but they may go back to one of the states - strong/soft/weak by the execution of some finalizer phantomly reachable object - gc is already in the process of collecting these objects and has determined to not be resurrect-able by any finalizer (if it declares a finalize() method itself, then its finalizer will have been run). these are reachable from the root via one or more phantom reference objects unreachable object - an object is neither strongly, softly, weakly, nor phantom reachable, and is not resurrectable. these objects are ready for reclamation for more details: \u00ab collapse", "try-with-resources is supported on api level 19 and higher", "@jonskeet - in this question stackoverflow.com/questions/22397861/\u2026, most answers say that string immutability is great for security, which is opposite of your answer here. their \"reasoning\" - strings are often used to store connections, passwords etc. and immutability prevents them from being changed. they don't mention how a mutable string value getting changed could be a security problem. there is no mention of techniques that can be used to change mutable strings. could you please clarify? thanks.", "sorting the keys requires the comparator to look up each value for each comparison. a more scalable solution would use the entryset directly, since then the value would be immediately available for each comparison (although i haven't backed this up by numbers). here's a generic version of such a thing: code_removed there are ways to lessen memory rotation for the above solution. the first arraylist created could for instance be re-used as a return value; this would require suppression of some generics warnings, but it might be worth it for re-usable library code. also, the comparator does not have to be re-allocated at every invocation. here's a more efficient albeit less appealing version: code_removed finally, if you need to continously access the sorted information (rather than just sorting it once in a while), you can use an additional multi map. let me know if you need more details...", "it's possible to use streams to do this. to remove the need to explicitly use code_removed, it's possible to import code_removed statically (as recommended by effective java, third edition). code_removed", "code_removed: it validates the schema and makes no changes to the db. assume you have added a new column in the mapping file and perform the insert operation, it will throw an exception \"missing the xyz column\" because the existing schema is different than the object you are going to insert. if you alter the table by adding that new column manually then perform the insert operation then it will definitely insert all columns along with the new column to the table. means it doesn't make any changes/alters the existing schema/table. code_removed: it alters the existing table in the database when you perform operation. you can add or remove columns with this option of hbm2ddl. but if you are going to add a new column that is 'not null' then it will ignore adding that particular column to the db. because the table must be empty if you want to add a 'not null' column to the existing table.", "in the last proposition (numberformat), you are missing a null check at the parse method. otherwise isnumeric(\"\") will return true as position index will stay unchanged!", "this works for me. code_removed", "daemon thread in java are those thread which runs in background and mostly created by jvm for performing background task like garbage collection and other house keeping tasks. points to note: any thread created by main thread, which runs main method in java is by default non daemon because thread inherits its daemon nature from the thread which creates it i.e. parent thread and since main thread is a non daemon thread, any other thread created from it will remain non-daemon until explicitly made daemon by calling setdaemon(true). thread.setdaemon(true) makes a thread daemon but it can only be called before starting thread in java. it will throw illegalthreadstateexception if corresponding thread is already started and running. difference between daemon and non daemon thread in java: 1) jvm doesn't wait for any daemon thread to finish before existing. 2) daemon thread are treated differently than user thread when jvm terminates, finally blocks are not called, stacks are not unwounded and jvm just exits.", "// please check below code code_removed", "code_removed is not equal to code_removed but it means, something like this: code_removed you can just save 47 keystrokes if you write like this code_removed", "code_removed you can also use code_removed. it also works for base 8 and 16: code_removed if you want to get code_removed instead of code_removed you can use: unboxing: code_removed code_removed: code_removed", "hi, mine is program files <x86> java jdk1.8.0_45 bin but i don't know what to do from here... i tried many things but none worked...", "thus far, nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a code_removed is \"lots more\" than an code_removed so i did some number crunching to demonstrate exactly how much both lists take up for n null references. since references are either 32 or 64 bits (even when null) on their relative systems, i have included 4 sets of data for 32 and 64 bit code_removed and code_removed. note: the sizes shown for the code_removed lines are for trimmed lists - in practice, the capacity of the backing array in an code_removed is generally larger than its current element count. note 2: (thanks beeonrope) as compressedoops is default now from mid jdk6 and up, the values below for 64-bit machines will basically match their 32-bit counterparts, unless of course you specifically turn it off. the result clearly shows that code_removed is a whole lot more than code_removed, especially with a very high element count. if memory is a factor, steer clear of code_removed. the formulas i used follow, let me know if i have done anything wrong and i will fix it up. 'b' is either 4 or 8 for 32 or 64 bit systems, and 'n' is the number of elements. note the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not. code_removed: code_removed code_removed: code_removed", "yes, its in legacy codebase.", "code_removed is around since java 5.", "java beans is a standard, and its basic syntax requirements have been clearly explained by the other answers. however, imo, it is more than a simple syntax standard. the real meaning or intended usage of java beans is, together with various tool supports around the standard, to facilitate code reuse and component-based software engineering, i.e. enable developers to build applications by assembling existing components (classes) and without having to write any code (or only have to write a little glue code). unfortunately this technology is way under-estimated and under-utilized by the industry, which can be told from the answers in this thread. if you read oracle's tutorial on java beans, you can get a better understanding in that.", "there is also the very important issue of sharing code with others, if you treat object fields as parts of the outside interface for other people to use then changing the field to a function might be impossible without breaking changes in other peoples code.", "excellent answer, the key statement: \"when passing reference t to the function it will not directly pass the actual reference value of object test, but it will create a copy of t and then pass it to the function\"", "works to download the straight rpm also! just change the url... thanks!", "how to delete adt manually. please explain", "there is absolutely no need to seed code_removed, it will be seeded by the system. directly calling code_removed is very dangerous, it may replace the (really random) seed with the date. and that will certainly not result in a code_removed, as anybody can guess the time and try and seed their own code_removed instance with that information.", "in general it's not required at all. @andrewbacker's case would require two different compilers on the same.java file with both versions of the.class files communicating with each other--most of the time you just create the class and distribute it. if that's the case, then not having an suid would work fine.", "aside from breaking old programs (which arguably could just run on older versions of the framework if they can't upgrade) -- it tempts developers into using the methods for new development. i agree: they're deprecated for a reason.", "you saved my day", "... if we think in terms of some lower-level oo language, with \"pointers\" to objects, such a field would contain the address in memory (such as \"0x70ff1234\") at which the object data is found. that address is the \"field value\" that is being copied (assigned). you are correct that the end result is that both objects have fields that refer to (point at) the same object.", "i think this is the best way. check out java.sun.com/docs/books/tutorial/essential/io/scanning.html", "when you evaluate the code, it is very clear that (==) compares according to memory address, while equals(object o) compares hashcode() of the instances. that's why it is said do not break the contract between equals() and hashcode() if you do not face surprises later. code_removed", "did java 8 change the way the bytecode works? if not, it should be fine to use any version of java, theoretically, as long as it compiles.", "@michael borgwardt for concurrenthashmap for eg. suppose there are multiple threads. some of them are updating the map and some of them are getting data from that same map. so in this scenario when threads are trying to read is it guaranteed that they will get the latest data that has been updated since reader threads does not have to hold locks.", "what does static import have to do with making it more readable?", "please explain the use of code_removed and code_removed parameters in jvms. what are the default values for them?", "for method 1, if you are intitializing the progressbar in a fragment then do this:", "thanks. i knew where my jdks were, i didn't know where the java plugin installed its jre.", "@peterrader that's really interesting, but regarding jbtools i think there is now an experimental support working with eclipse luna(4.1.0.beta1)... anyway, thanks for the additional infos:)", "since hashtable in java is a subclass of dictionary class which is now obsolete due to the existance of map interface it is not used anymore. moreover there isn't anything you can't do with a class that implements the map interface that you can do with a hashtable.", "i feel it is better to explicitly give the encoding option and use the fileinputstream rather than directly the filereader? see this question too stackoverflow.com/questions/696626/\u2026 `reader = new inputstreamreader(new fileinputstream(\"<filepath>\", \"utf-8\");", "@peterlawrey it must be enabled with a jvm argument, but it is there. can read about it here: blog.codecentric.de/en/2014/08/\u2026", "yeah install the 32 bit version of the java se sdk (or any of the combinations). that should help solve your problem.", "this method will add an extra separator at the end of the file, when there isn't one in the actual file (for an a file that ends with no newline).", "+1 for correct arm with java 7. here is good question about this tricky theme: stackoverflow.com/questions/12552863/\u2026.", "that is true. thats why i listed it as another option;-)", "did you consider using apache commons net? since 3.3, just one jar (and you can depend on it using gradle or maven) and you're done:", "@violetgiraffe when you need to stop handler from runnable you need to declare it final.", "i always use apache commons ioutils mentioned in the higher rated answer, but as for the 16k buffer size, most streaming is done still today using 4k buffer size, because that ends up being optimal. allocating a larger buffer will not get better performance but will just eat up memory unnecessarily. 4k is ideal.", "ok, i didn't get the part with the manipulation of the 's' var. but i find that kind of bad style since s is representing the size. then i prefer the answer from ddyer with explicit vars: stackoverflow.com/a/25124317/15108", "for me this error occurred simply because i forgot tell eclipse that i wanted a runnable jar file and not a simple library jar file. so when you create the jar file in eclipse make sure that you click the right radio button", "do i need to give the path to the downloaded folder in tar xzf command", "jonskeet or @bgr why are break labels not ok? or why do you prefer the other way?", "linkedlists are excellent if you just are going to iterate over them. to mee, it seems as if linked lists are more elegant, but maybe it's just because i learned lisp before java.", "i guess @vlad is referring to the method of reading entire file into memory explained here java2s.com/tutorial/java/0180__file/\u2026", "downvoted for poor quality link. there is a completely pointless code_removed, and the wrong stream is closed. nothing wrong with the java tutorial, and no need to cite arbitrary third-party internet rubbish like this.", "@michael, @krougan: not a joke. i am well aware that my solution isn't as performant as the others; i think it's clearer and more general, and i think that has value. you're entitled to your contrary opinion, of course.", "would the conditional be faster than the hack if there was no branch prediction? the conditional would be (check) (jump) (add), whereas the hack uses 4 consecutive arithmetic operations", "if you modify your list, then use code_removed and iterate from last index (that is code_removed respectively). if you fail again, check your list structure.", "you ought to have an @lombok.value annotation there and you get equals, hashcode, getters, private final on fields, and a tostring method as well for free. at that point the pair<t,z> thing is strictly inferior, since it wouldn't handle primitive types well.", "@konrad & nate: while a hashtable or a finite state machine would work in a switch, it would take a freakin' lot of case items for the intrinsic overhead of either to be overcome. my \"wild-ass guess\" is that 80% of all switches have less than 10 cases, and 99.9% have less then 20. at those sizes, it would be very hard to beat chained if()s for speed.", "equals() method is used to determine the equality of two objects. as int value of 10 is always equal to 10. but this equals() method is about equality of two objects. when we say object, it will have properties. to decide about equality those properties are considered. it is not necessary that all properties must be taken into account to determine the equality and with respect to the class definition and context it can be decided. then the equals() method can be overridden. we should always override hashcode() method whenever we override equals() method. if not, what will happen? if we use hashtables in our application, it will not behave as expected. as the hashcode is used in determining the equality of values stored, it will not return the right corresponding value for a key. default implementation given is hashcode() method in object class uses the internal address of the object and converts it into integer and returns it. code_removed example code output: code_removed", "but on the same page, see the link to types.cs.washington.edu/jsr308 for info about using the checker framework to add the @nullable and @nonnull type annotations in java 7.", "@pavelrepin @patrick in my case, an empty inputstream caused a npe during scanner construction. i had to add code_removed right at the beginning of the method; i believe this answer needs to be updated to better handle null inputstreams.", "yep, thanks for the update.", "i like to think of pass-by-value (as pertains to parameters of functions) as meaning that every function makes a local copy of the objects passed. in general, relying on a satellite method do it's job on some larger state seems more nebulous than explicitly defining the state passed and returned.", "just to have fun with my own comment from 9 years ago, these days i use groovy's \"string s=new file(\"somefile.txt\").text\" to read an entire file all at once and it works great. i am happy with using groovy for my non-production (scripting) code and--well honestly forcing you to deal with encoding and extremely long files the way java does is a really good idea for production code anyway so it works for it's purpose, groovy works for quick scripts which java isn't great at--just use the right tool for the job and it all works out.", "that's my preferred solution. even shorter: bigdecimal.valueof(doublevar).setscale(yourscalehere, bigdecimal.round_half_up); bigdecimal.valueof(double val) actually calls double.tostring() under the hood;)", "@robertgrant if you want to continue instead of break, move the outer loop outside of the code_removed method and return from method to continue.", "some of the links in the answers above seem to be broken. i have added pointers to current source code in the code below and offer an approach for handling the check with an enum as an answer so that a switch statement can be used when evaluating the result: code_removed the helper class is: code_removed", "all those finals, clutter...", "don't forget that code_removed throws an code_removed while code_removed does not, if this is a consideration.", "crete a class like bean class and implement the code_removed interface. then we can pass it through the code_removed method, for example: code_removed then get it from the other activity, for example: code_removed", "@viruzzo take a look at the javadocs. the code_removed method of code_removed is deprecated in favour of code_removed \"for security reasons\".", "one relatively modern advantage of getters/setters is that is makes it easier to browse code in tagged (indexed) code editors. e.g. if you want to see who sets a member, you can open the call hierarchy of the setter. on the other hand, if the member is public, the tools don't make it possible to filter read/write access to the member. so you have to trudge though all uses of the member.", "as a code_removed-version has not been mentioned yet i introduce it (reusing op's enum): code_removed since this don't give any additional value to the code_removed method, it only makes sense to define an additional method if we want have a different behavior. if we don't want to raise an code_removed we can change the implementation to: code_removed by providing a default value we keep the contract of code_removed without throwing an code_removed in that manner that in no case code_removed is returned. therefore we throw a code_removed if the name is code_removed and in case of code_removed if code_removed is code_removed. that's how code_removed works. this approach adopts the design of the code_removed-interface which provides a method code_removed as of java 8.", "how to use this code if i want to use any other email client such as of my org? would changing just the host name and port be sufficient?", "i actually create a new module in the \"modules\" pane (named for example \"jarsforlogging\"), then add all the jars i need (located in some directory far away from the project tree) to this new module and mark the jars as \"export\". finally, i add the newly created module to the dependencies of the original module. a bit more hierarchical that way.", "@vinayak.b i am experiencing authenticationfailedexception at transport.send(message). i am using simulators right now but my internet works fine. antivirus is disabled too and i have checked my pass and email too. any ideas?", "as everybody already have said, you use code_removed, which is called an explicit constructor invocation. however, keep in mind that within such an explicit constructor invocation statement you may not refer to any instance variables or any instance methods or any inner classes declared in this class or any superclass, or code_removed or code_removed. as stated in jls (\u00a78.8.7.1).", "imo the point is not that char arrays are inherently safer, but that you can wipe them (overwrite the chars) as soon as you've used them so that they don't linger in memory. you can't do the same with strings, which are immutable.", "as i commented on rwoo's answer, i think the drawback with his library is that you can't proxy every object [for example classes that are final?]... but i'm not sure without trying it out.", "a bit late here:) but wouldn't you need to put simpledateformat.settimezone(timezone.gettimezone(\"gmt\")) here unless that is your actual timezone?", "why does it need to have a no-arg constructor?", "is this functionality going to be put into a later java version? can someone explain why i can't do this, as in, the technical way java's code_removed statement works?", "there is such a method in apache commons-lang: code_removed. there is one more general: code_removed, which can be used to implement a degrading strategy: code_removed", "this solution did not work for me. i am using bigdecimal as my value object and pair<k, v> for the key (from apache commons). the values are not sorted when i access the map after sorting.", "see places where java beans used?. it's a class following certain conventions.", "@programmerbruce -1 change your answer accordingly since you're aware of the change.", "as a side comment, if you instantiate a thread and do not call its start() method you are creating a memory leak in java < 5 (this does not happen with runnables): stackoverflow.com/questions/107823/\u2026", "this error means you're trying to load a java \"class\" file that was compiled with a newer version of java than you have installed. for example, your code_removed file could have been compiled for jdk 7, and you're trying to run it with jdk 6. so the solution is to either: upgrade your java runtime or recompile the class if you have the source, using your local java compiler (if you have one). javac filename.java for developers, this can happen if another developer checks in a.class file, and they've got a newer version of java than you have!", "if you want to iterate through the map in the order that the elements were added, use code_removed as opposed to just code_removed. this approach has worked for me in the past: code_removed output: code_removed", "as of java 1.8.162, this is not the output.", "the problem with the \"user.dir\" property is, as soon someone pass it as code_removed or set it inside the code with code_removed all code relying on it fails.", "@bob, there is another way to do it, by extending code_removed and override code_removed but it's a way too dirty way to asses the case:)", "@joshas i can confirm. the only way seems to reinstall everything:(", "@yassinhajaj i meant, there is a gotcha in needing the try with resource", "you can do it like this code_removed", "works for windows xp as well. thanks!", "@cutmancometh if it is a stupid argument, how can we describe the distinction? it exists in other languages. it is significant to java in that other languages share a largely common call syntax. consider c#'s code_removed.", "ok (filling space...)", "never delete code_removed - very bad idea.", "i'm not a java guy, so please forgive me for my ignorance, but what sort of helper classes were you thinking of in the todo comments?", "good answer, although its better to use system.getproperty( \"line.separator\" ) for a new line rather than \" n\".", "major problem. if you use the first answer (google takes you here), change the comparator to add an equal clause, otherwise you cannot get values from the sorted_map by keys: code_removed", "thanks for your reply, but your solution only works if i know the name of the class that contains the main method. and it was a typo... it was supposed to be \"app.jar\". but how do you explain why it runs on other systems by just double clicking the file?", "this doesn't work. the this(5) call must be the first line in the constructor.", "java modifies the meaning of 'pass by reference' from languages like c/c++. in c/c++, the term 'pass by reference' means passing the value of the variable's address (this is what a pointer is!), not the variable itself. you makes changes to the object/variable at 'xyz' address in memory (you change the original). this done when changing the original is intended (why pass the whole thing?). passing by value passes a copy of the actual object/variable to preserve the original. java doesn't give an option. oo objects are passed by reference (in c/c++ terms), primitives are passed by value.", "wondering how i update my version some browser plugin make me do so!!! #java", "where handler come from? is in javase?", "i'm actually getting an error message with \"conflicting dependency\" instead of eclipse saying it will uninstall the version 22.x.", "you may use code_removed and code_removed from cactoos: code_removed", "for 2.5.4 use code_removed", "mostly ditto on simonj. i really dislike the \"\"+i idiom. if you say string.valueof(i), java converts the integer to a string and returns the result. if you say \"\"+i, java creates a stringbuilder object, appends an empty string to it, converts the integer to a string, appends this to the stringbuilder, then converts the stringbuilder to a string. that's a lot of extra steps. i suppose if you do it once in a big program, it's no big deal. but if you're doing this all the time, you're making the computer do a bunch of extra work and creating all these extra objects that then have to be cleaned up. i don't want to get fanatic about micro-optimization, but i don't want to be pointlessly wasteful either.", "can you guys try to print a very long text? when i do it it with a text containing 8 855 704 chars and 197 247 line breaks it only writes 197 127 lines into the file. (using the code from above with a try catch ofc) -> using a filewriter solved my problem. use the.write(string) function there...", "personally i think that \"\" + i does look as the original question poster states \"smelly\". i have used a lot of oo languages besides java. if that syntax was intended to be appropriate then java would just interpret the i alone without needing the \"\" as desired to be converted to a string and do it since the destination type is unambiguous and only a single value would be being supplied on the right. the other seems like a 'trick\" to fool the compiler, bad mojo when different versions of javac made by other manufacturers or from other platforms are considered if the code ever needs to be ported. heck for my money it should like many other ool's just take a typecast: (string) i. winks given my way of learning and for ease of understanding such a construct when reading others code quickly i vote for the integer.tostring(i) method. forgetting a ns or two in how java implements things in the background vs. string.valueof(i) this method feels right to me and says exactly what is happening: i have and integer and i wish it converted to a string. a good point made a couple times is perhaps just using stringbuilder up front is a good answer to building strings mixed of text and ints or other objects since thats what will be used in the background anyways right? just my two cents thrown into the already well paid kitty of the answers to the mans question... smiles edit to my own answer after some reflection: ok, ok, i was thinking on this some more and string.valueof(i) is also perfectly good as well it says: i want a string that represents the value of an integer. lol, english is by far more difficult to parse then java! but, i leave the rest of my answer/comment... i was always taught to use the lowest level of a method/function chain if possible and still maintains readablity so if string.valueof calls integer.tostring then why use a whole orange if your just gonna peel it anyways, hmmm? to clarify my comment about stringbuilder, i build a lot of strings with combos of mostly literal text and int's and they wind up being long and ugly with calls to the above mentioned routines imbedded between the +'s, so seems to me if those become sb objects anyways and the append method has overloads it might be cleaner to just go ahead and use it... so i guess i am up to 5 cents on this one now, eh? lol...", "adhavan, i got a question. when you create the first intent class, you pass in fromclass.this as the first argument. is there a way to retrieve this object in the receiving activity class?", "to get the updated position of card, this minor thing can be compromised.", "the way to avoid unnecessary code_removed is simple to state: code_removed but, although it can be stated simply enough, achieving it is harder. the key lies in the code_removed part, because how can you be sure that a variable can't be null? there are no quick-fix, easy answers to this, but here are some pointers: clean code. the most important thing for being able to reason about the behaviour of a piece of code is that it is written in a matter that is easy to understand. name your variables based on what they represent, name your methods after what they do, apply the code_removed (the code_removed in code_removed: it means that each piece of code should have a single responsibility, and do this and nothing else). once your code is clean, it is much easier to reason about it, also across multiple tiers/layers of code. with messy code, trying to understand what a method does might make you forget why you are reading the method in the first place. (tip: read \"clean code\" by robert c. martin) avoid returning code_removed values. if a code_removed value would keep your program from functioning correctly, throw an code_removed instead (make sure to add the appropriate error-handling.) cases where returning a code_removed value might be acceptable is for instance trying to fetch an object from the database. in these cases, write code that handles the code_removed values, and make a note behind your ear that here we have something that might return code_removed. handle returned code_removed values as close to the caller of the method returning code_removed as possible (don't just blindly pass it back up the call-chain.) never ever pass explicit code_removed values as parameters (at least not across classes). if you are ever in a position where passing a code_removed-parameter is the only option, creating a new method that does not have this parameter is the way to go. validate your input! identify the \"entry-points\" to your application. they can everything from webservices, rest-services, remote ejb classes, controllers, etc. for each method in these entry-points, ask yourself: \"will this method execute correctly if this parameter is null?\" if the answer is no, add code_removed. this will throw an code_removed if the required parameter is missing. the good thing about this type of validation in the entry-points, is that you can then easily assume in the code being executed from the entry-point, that this variable will never be null! also, if this fails, being at the entry-point, debugging is made a lot easier than it would if you just got a code_removed deep down in your code, since a failure like this can only mean one thing: the client didn't send you all the required information. in most cases you want to validate all input parameters, if you find yourself in a position where you need to allow a lot of code_removed-values, it might be a sign of a badly designed interface, which needs refactoring/additions to suite the needs of the clients. when working with code_removeds, return an empty one rather than null! when working with a database, utilize code_removed-constraints. in that way, you'll know that a value read from the database cannot be null, and you won't have to check for it. structure your code and stick with it. doing this allows you to make assumptions about the behaviour of the code, for instance if all input to your application is validated, then you can assume that these values will never be null. if you are not already doing it, write automated tests of your code. by writing tests, you will reason about your code, and you will also become more confident that it does what it's supposed to. also, automated tests guards you from blunders during refactoring, by letting you know immediatly that this piece of code is not doing what it used to. you still have to null-check of course, but it can trimmed down to the bare minimum (i.e. the situation where know you might be getting a null-value, instead of everywhere just to be sure.) when it comes to null-checks, i actually prefer to use the ternary operator (but use with care, when you start nesting them they come really messy.) code_removed", "using code_removed is a bad idea... it makes asynctask \"sync\" again", "this was updated at least to support try with. i would personally still use while though, and get rid of the break by putting the check in the loop", "@zero i am with you brother i get what you are saying. since thread class itself implements runnable interface, so any instance of a class extending the thread class can be passed in to creating code_removed in the running process i.e (as you rightly said) code_removed now these two thread will share same instance i.e code_removed, where as in this case not [please read the below comment for completion]", "what about code_removed, code_removed and code_removed?", "it;s a shame this answer doesn't have more votes. i was looking for the quickest and simplest way to get a text file into a string. this is it and if i didn't scroll down and down and down, i would have missed it. the op should consider accepting this answer to move it to the top.", "code_removed (introduced in java 5) is identical to code_removed, except its methods are not synchronized. this means it has better performance than the latter, but the drawback is that it is not thread-safe. read tutorial for more details.", "same consideration should be applied within finally too.", "in java you don't have getters and setters like that. what you do have is project lombok which uses annotations to much the same effect. so if you want this niceness but in java and not c#, then you know where to go.:)", "this worked perfectly, awesome", "you can use code_removed definition instead of plain text.", "just try it, because it just worked for my friends in class right now", "i just can't believe that they really would generate the classes on the fly. this would mean twice the gc load (class and instance) with every call... and a significant overhead for class creation.", "code_removed", "the accepted answer was not working for me, as of 2017-04-25. however, the simple solution was using the code_removed flag instead of the code_removed option. for example, to get jdk-1.8_131: code_removed that will execute in the background, writing output to code_removed.", "bear in mind that one thing is the working directory, and other the directory whether your class resides. they usually aren't the same.", "while other suggestions here seem valid, there is one other good reason. with plain code_removed you have much higher chances of accidentally printing the password to logs, monitors or some other insecure place. code_removed is less vulnerable. consider this: code_removed prints: code_removed", "in case the position is the problem - you always could use view.settag()/gettag() for example. store the position in the tag in time of binding, then get the position from the tag in the single clicklistener for the whole adapter.", "so your saying that openjdk is the baseline for all the other jdks just that they copy it and then tweak it after it's own specifications?", "instead of code_removed, you can have code_removed...", "i can see what you are doing... csi so xd", "you need to use a formatter, following code uses numberformat code_removed output: 0001", "this code for displaying all information about the system os type,name, java information and so on. code_removed", "welcome to stackoverflow. generally, it is best to avoid resurrecting old threads unless the response adds something significantly different to the thread. while valid, that approach was already mentioned in the accepted answer.", "in particular, code_removed", "this is awesome.:)", "latest version is here: java.net/projects/swingx/sources/svn/content/trunk/swingx-co\u200c\u200bre/\u2026", "+1 just for the idea, but based on previous comment, can we mod the array implementations directly rather than depending on the code_removed common parent? can we work that idea further out? not that i think that modifying default behavior of java.lang.* objects is something i would encourage...", "@joshperry can't use virtual methods in performance-critical places, sorry. i wonder why such a poor question attracted so much attention anyway... i almost doubled my rep. and got my first \"good answer\" badge for doing a useless benchmark.:)", "yet another way to fix this on mac os x with homebrew installed, is this: code_removed", "why would anyone ever put any kind of code_removed in production? come on here. if that's what your code looks like then this implementation changing is the least of your problems.", "in a pure object-oriented world getters and setters is a terrible anti-pattern. read this article: getters/setters. evil. period. in a nutshell, they encourage programmers to think about objects as of data structures, and this type of thinking is pure procedural (like in cobol or c). in an object-oriented language there are no data structures, but only objects that expose behavior (not attributes/properties!) you may find more about them in section 3.5 of elegant objects (my book about object-oriented programming).", "please add explanation to your answer.", "i'm sorry but you really should not post or recommend or even publicize these insecure code_removed and code_removed. you haven't even provided a caveat.", "same is true with netbeans: developmentality.wordpress.com/2010/08/24/\u2026", "@olles\u00f6derstr\u00f6m there is indeed an issue with timezone here. but setting it to gmt or utc causes the hour part to be 12 instead of 0 for all durations shorter than 1 hour.", "this worked for the number format 0x0001 where double.parsedouble wasn't working. +1", "why are you recommending an internal undocumented class?", "if you want unmodifiable map, finally java 9 added a cool factory method code_removed to code_removed interface. similar method is added to set, list as well. code_removed", "@carl was my final sentence somehow unclear? i couldn't care less about that last machine instruction. writing half a page of scripture in place of a simple expression is not clarity at all, it is obfuscation. and if the only way you can think of to demonstrate correctness is absolute exhaustion then how do you ever get anything done?", "beware the license!!", "@kevinmeredith, no, it doesn't. you'd be actually calling code_removed (and code_removed has an code_removed method for all the primitive types).", "i came here looking for somebody who wrote this program so i wouldn't have to. thank you nick!", "@brandaemon agreed. even for intermediates, it's nice to see precisely which type implements the code_removed method.", "see also stackoverflow.com/questions/6271731/\u2026", "@ziggy it's not that i disagree with the null object pattern, and i use it all the time. it's that in this particular case, the method signature is findaction a do_nothing action, by definition, is not found! that's lying to your user. and having the user have to check for do_nothing violates polymorphism - now not all your instances can be used interchangeably. to put it in perspective, let's say the method was bigdecimal findbigdecimal(string whatever) - the null object pattern does not work here. finding something lies to you if zero is returned.", "first create a mapper: code_removed as array: code_removed as list: code_removed another way to specify the list type: code_removed", "code_removed this one works without knowledge of any other classes/libraries etc. it works for any data type. just replace code_removed with anything like code_removed,code_removed or code_removed. it works quite efficiently.", "you should keep a reference to your timer in order to cancel it when it's not needed anymore since according to the android doc: \"when a timer is no longer needed, users should call cancel(), which releases the timer's thread and other resources. timers not explicitly cancelled may hold resources indefinitely.\"", "nice short clean explanation", "the perfect answer. 2 important things to notice: 1) use quotes and 2) use * only, not *.jar", "i'd sum up the length in the same loop where you are doing your null check--but this is a really good summary of the other answers here. i believe it even handles intrinsic types like \"int\" without changing them to integer objects which is really the only reason to deal with them as arrays rather than just changing everything to arraylists. also your method could take 2 arrays and a (...) parameter so the caller knows he needs to pass in at least two arrays before he runs it and sees the error, but that complicates the looping code....", "@muhammadbabar: code_removed is a label. i don't know exactly what code you tried, but the code in my answer compiles and runs just fine.", "@jqno is right - use code_removed instead.", "if you are working on a big project, you may be better of creating your own code_removed and/or code_removed annotations. for example: code_removed if you use the correct retention policy, then the annotations won't be available at runtime. from that point of view, it is just an internal thing. even though this is not a strict science, i think it makes most sense to use an internal class for it. it is an internal thing. (no functional or technical impact) with many many many usages. ide's like intellij support custom code_removed/code_removed annotations. most frameworks prefer to use their own internal version as well. additional questions (see comments): how to configure this in intellij? click the \"police officer\" in the lower right corner of the intellij status bar. and click \"configure inspections\" in the popup. next...", "this helped me! gradle tutorials had specified using the top-level code_removed variable set, but that only helps with code_removed command, not with creating an executable.jar", "i just want to add some point to all that was listed. with reflection api you can write universal code_removed method for any object. it is useful at debugging. here is some example: code_removed", "char[]? why not byte[]? in any thread dump/heap analyzer you can see strings, and it's easy to notice if one contains password. for char[] it's harder, but still, if your heap analyzer will display chars one by one it'll be same as string. for byte[] it's unlikely.", "'cause newline character is also allowed... i had it tested with c++ and c# these languages are skiping the lines after reading // but java seems to parse the line complete and interprete the code as newline char.", "about the most compact way to do this is: code_removed", "@user1 - i like using libraries in my code so i can get my job done faster. it's awesome when your managers say \"wow james! how did you get that done so fast?!\". but when we have to spend time reinventing the wheel just because we have misplaced ideas about including a common, reusable, tried and tested utility, we're giving up time we could be spending furthering our project's goals. when we reinvent the wheel, we work twice as hard yet get to the finish line much later. once we're at the finish line, there is no one there to congratulate us. when building a house, don't build the hammer too", "all this debate is actually because guys at sun made a terrible naming mistake. they used the name reference instead of pointers. well it was not actually a mistake. acording to a guy, who worked with another guy from the original sun team, the usage of reference word instead of pointers was requested by the sale department. the sale department wanted to push java as a secure language, and one of the strong point they where advertising was \"java's advantages that it does not allow pointer arithmetic as c++ does\".", "ok, thanks. good luck.", "i waited till october hoping this would go smoothly. it didn't.", "the java-mockery would have been fine if you had pointed to the apache commong lang, which contains a pair class.", "it doesnt allow to uninstall earlier version also...", "code evolves. code_removed is great for when you need data member protection. eventually all classes should be sort of \"miniprograms\" that have a well-defined interface that you can't just screw with the internals of. that said, software development isn't about setting down that final version of the class as if you're pressing some cast iron statue on the first try. while you're working with it, code is more like clay. it evolves as you develop it and learn more about the problem domain you are solving. during development classes may interact with each other than they should (dependency you plan to factor out), merge together, or split apart. so i think the debate boils down to people not wanting to religiously write code_removed so you have: code_removed instead of code_removed not only is code_removed visually noisy, it gives this illusion that code_removed is somehow a more complex process than it really is. how you (as the class writer) regard the sanctity of code_removed is particularly confusing to a user of your class if it has a passthru setter -- then it looks like you're putting up these gates to \"protect\" something you insist is valuable, (the sanctity of code_removed) but yet even you concede code_removed's protection isn't worth much by the ability for anyone to just come in and code_removed code_removed to whatever value they want, without you even peeking at what they are doing. so i program as follows (assuming an \"agile\" type approach -- ie when i write code not knowing exactly what it will be doing/don't have time or experience to plan an elaborate waterfall style interface set): 1) start with all public members for basic objects with data and behavior. this is why in all my c++ \"example\" code you'll notice me using code_removed instead of code_removed everywhere. 2) when an object's internal behavior for a data member becomes complex enough, (for example, it likes to keep an internal code_removed in some kind of order), accessor type functions are written. because i'm programming by myself, i don't always set the member code_removed right away, but somewhere down the evolution of the class the member will be \"promoted\" to either code_removed or code_removed. 3) classes that are fully fleshed out and have strict rules about their internals (ie they know exactly what they are doing, and you are not to \"fuck\" (technical term) with its internals) are given the code_removed designation, default private members, and only a select few members are allowed to be code_removed. i find this approach allows me to avoid sitting there and religiously writing getter/setters when a lot of data members get migrated out, shifted around, etc. during the early stages of a class's evolution.", "are there any advantages with this approach?", "you could check if the string is a number first: stackoverflow.com/questions/1102891/\u2026", "very nice questions but they are 2 in one. why do we have both is not the same as how they can (and not are!) implemented at a lower level. i've answered to that too.", "this removes about everything else from the path? do this only if you are only using java and nothing else in your system.", "both solutions are bad if used extensibly. throwing exception is costly and creating a regular expressions is costly as well. the regular expression must be created once and reused.", "if a process has access to memory of your application, then that is already a security breach, right?", "wouldn't compiler directive be a better use for conditions you want to compile out?", "this worked perfectly and fit right into the method that i needed to do the call from. thanks.", "and passing null string in matches(...) function will throw nullpointer exception.", "in my version of intellij 2017.1.4, there is no \"dependencies\" tab under modules.", "apache commons io contains some great methods for doing this, in particular fileutils contains the following method: code_removed which allows you to write text to a file in one method call: code_removed you might also want to consider specifying the encoding for the file as well.", "android studio 3.0 started to provide built-in support for some of java 8 language features, which are: lambda expressions method references type annotations (information is available at compile time, but not at runtime) repeating annotations default and static interface methods also starting from api level 24 the following java 8 api are available: code_removed code_removed code_removed code_removed code_removed code_removed besides that, the code_removed support was extended to all android api levels. more java 8 features are promised to be added in the future. to start using supported java 8 language features, update the android plugin to 3.0.0-alpha1 (or higher) and add the following to your module\u2019s build.gradle file: code_removed for more details visit:", "a snippet on how to use the plugin to cross-compilte would be very good instead of visiting/opening the link", "also fixed my problem.", "+1 great answer. but don't go dogmatic, sometime using scriptlets is ok, but that should be the exception that proves the rule.", "@ ricky clarkson: i don't see how this factory should return parametrized foos. could you please explain how you get foo<t> out of this? it seems to me this gives only unparametrized foo. isn't the t in make10 simply foo here?", "daemon thread in java are those thread which runs in background and mostly created by jvm for performing background task like garbage collection and other house keeping tasks. points to note: any thread created by main thread, which runs main method in java is by default non daemon because thread inherits its daemon nature from the thread which creates it i.e. parent thread and since main thread is a non daemon thread, any other thread created from it will remain non-daemon until explicitly made daemon by calling setdaemon(true). thread.setdaemon(true) makes a thread daemon but it can only be called before starting thread in java. it will throw illegalthreadstateexception if corresponding thread is already started and running. difference between daemon and non daemon thread in java: 1) jvm doesn't wait for any daemon thread to finish before existing. 2) daemon thread are treated differently than user thread when jvm terminates, finally blocks are not called, stacks are not unwounded and jvm just exits.", "here's another way to do it without using external libraries: code_removed", "hi rich! it appears the release and latest version markers are no longer supported in maven 3.x.", "according to windows, semicolon separates one environment path from another. so it must not end with a semicolon but be sure to put a semicolon before adding a new one else you will cause more errors. this is not according to oracle but windows definitions", "this is valid as of java 7", "it can be as simple as: code_removed", "javax.mail.authenticationfailedexception error came what can i do?", "@alvaro.delasema this doesn't work for anyone using the adt-bundle from the android developer site (i think). eclipse fails to open once adt is uninstalled", "instead of using ctrl + shift + alt + s, the easier keyboard way is to 1)left click the first line(project name) in the project window. 2)press f4.", "plagiarized from here.", "an official answer would be from intel - avoiding the cost of branch misprediction intel - branch and loop reorganization to prevent mispredicts scientific papers - branch prediction computer architecture books: j.l. hennessy, d.a. patterson: computer architecture: a quantitative approach articles in scientific publications: t.y. yeh, y.n. patt made a lot of these on branch predictions. you can also see from this lovely diagram why the branch predictor gets confused. each element in the original code is a random value code_removed so the predictor will change sides as the code_removed blow. on the other hand, once it's sorted, the predictor will first move into a state of strongly not taken and when the values change to the high value the predictor will in three runs through change all the way from strongly not taken to strongly taken.", "\"pass-by-copy-of-the-variable-value\" is slightly misleading. an actual argument is a value, which is the result of evaluating an expression. there need be no variable in the expression.", "joshua bloch, the author of linkedlist: does anyone actually use linkedlist? i wrote it, and i never use it. link: i'm sorry for the answer for being not that informative as the other answers, but i thought it would be the most interesting and self-explanatory.", "why is 3 + 4.6 rounded to 7, not 8?", "same error in administrator mode. might be that my version is just too old, i'm using eclipse from 20131030 adt bundle.", "code_removed if you'd need to have a list of one item! collections is from java.util package.", "character sets do may vary from platform to platform, but utf-8 is guaranteed to exist.", "don't full support.", "@andijay: \"if you get paid by the clock cycle, this is what you should be doing\" -- i disagree. if i was paid by clock cycle, i would use the code_removed to make my code as slow as possible: the more clock cycles it requires, the more money for me;)", "you have to use the.remove in the iterator and that is only able to remove the current element, so no:)", "note that this could have been avoided completely if the language specification had forbidden using code_removed notation to represent anything representable in ascii.", "are there any advantages with this approach?", "considering for general bit length (though i have used specific type here), i tried to design simplistic algo as below. simple and obvious check for 0,1,2 or <0 is required initially. following is simple in sense that it doesn't try to use any existing maths functions. most of the operator can be replaced with bit-wise operators. i haven't tested with any bench mark data though. i'm neither expert at maths or computer algorithm design in particular, i would love to see you pointing out problem. i know there is lots of improvement chances there. code_removed", "in addition: make sure that file system permissions are set correctly for the code_removed files. use code_removed to modify them on linux or macos.", "java 8 has a code_removed method. have a look at this answer if you are using java 8 (or newer) stackoverflow.com/a/22577565/1115554", "oh, thats quite bad, i will add a warning to my answer.", "assuming that you are using java 1.5, and that you cannot add google collections, i would do something very similar to what the google guys did. this is a slight variation on jon's comments. first add this interface to your codebase. code_removed its implementers can answer when a certain predicate is true of a certain type. e.g. if code_removed were code_removed and code_removed implements code_removed, then code_removed returns whether the passed in code_removed is authorized. then in some utility class, you could say code_removed so, assuming that you have the use of the above might be code_removed if performance on the linear check is of concern, then i might want to have a domain object that has the target collection. the domain object that has the target collection would have filtering logic for the methods that initialize, add and set the target collection. update: in the utility class (let's say predicate), i have added a select method with an option for default value when the predicate doesn't return the expected value, and also a static property for params to be used inside the new ipredicate. code_removed the following example looks for missing objects between collections: code_removed the following example, looks for an instance in a collection, and returns the first element of the collection as default value when the instance is not found: code_removed update (after java 8 release): it's been several years since i (alan) first posted this answer, and i still cannot believe i am collecting so points for this answer. at any rate, now that java 8 has introduced closures to the language, my answer would now be considerably different, and simpler. with java 8, there is no need for a distinct static utility class. so if you want to find the 1st element that matches your predicate. code_removed the jdk 8 api for optionals has the ability to code_removed, code_removed, code_removed, code_removed and code_removed, as well as other 'monadic' functions such as code_removed, code_removed and code_removed. if you want to simply collect all the users which match the predicate, then use the code_removed to terminate the stream in the desired collection. code_removed see here for more examples on how java 8 streams work.", "this was updated at least to support try with. i would personally still use while though, and get rid of the break by putting the check in the loop", "change the initialization statement to code_removed. otherwise you may only capture part of the file.", "@calum and @pool - as noted below in alex miller's answer, using code_removed without passing it into a new code_removed object will fix the size of the list. one of the more common reasons to use an code_removed is to be able to dynamically change its size, and your suggestion would prevent this.", "splendid, i wonder how many people can guess you are completely ignoring real memory/storage usage on this answer, you should be clear about it when giving pure theoretical answers on a stack overflow thread (may i suggest an edit of you answer again?) otherwise people might misleadingly think the code you provide (which hopefully you always do for this kind of questions?) is the best option.", "i would use something like this: code_removed variable code_removed could be any date and/or time value, see javadoc for code_removed.", "a suitable solution in android: code_removed", "there is a variation on the same theme that uses a for loop, instead of a while loop, to limit the scope of the line variable. whether it's \"better\" is a matter of personal taste. code_removed", "why do you have the code_removed there? doesn't just code_removed do the same?", "@narendrapathai can you please have a look at the generated byte code? i'm not familiar with this naming scheme, and creating a new code_removed is normal.", "in order to help those getting a network on main thread exception with an sdk target >9. this is using droopie's code above but will work similarly for any. code_removed you can use asynctask as below code_removed", "code_removed function is a method of code_removed class which should be overridden by programmer. code_removed class overrides it to check if two strings are equal i.e. in content and not reference. code_removed operator checks if the references of both the objects are the same. consider the programs code_removed here the code_removed and code_removed, both refer to same code_removed code_removed. hence the expression code_removed is code_removed. code_removed here code_removed and code_removed are two different strings with the same content code_removed. hence here the expression code_removed is code_removed where as code_removed is code_removed. hope you understood the difference between code_removed and code_removed thanks.", "@software monkey: i wanted to know how to initialize an arraylist. it's not real code, i was just testing things out. so, yes i might change it to list, but that would not answer my question.", "the top answer of spektom works perfect. if you are writing the code_removed inline and not extending as a class, and on top of this, if there is a need to get a response out of the code_removed, one can use the code_removed method as below. code_removed (from his example.)", "i think the underlying theory here is to distinguish between the attributes, aggregates and associatinos of an object. the asssociations should not participate in code_removed. if a mad scientist created a duplicate of me we would be equivalent. but we would not have the same father.", "on the download page of eclipse, it should be written \"jre 32 bits\" or \"jre 64 bits\" and not \"windows 32 bits\" or \"windows 64 bits\". be sure to use the correct version compatible with your jde, as answered previously.", "i allowed myself to make some minor modifications. why do you add code_removed that often? why do you split declaration of spot and initialisxation? what is the advantage of indexes 1,2,3,4 instead of 0,1,2,3? most importantly: you took a random value, and compared with if-else 4 times a new value, which could always mismatch, without gaining more randomness. but feel free to rollback.", "i like this utility. we've added a \"default\" parameter in case the enumeration cannot be determined: final @nullable t def", "if i simply write @notnull, it refers to code_removed. omg...", "yeah how do you delete adt??? how do you do instal new software???", "one of my favorite uses of reflection is the below java dump method. it takes any object as a parameter and uses the java reflection api print out every field name and value. code_removed", "-1: this is a rather blinkered view. yes, it's true that arraylist is a very versatile tool. however, it has its limitations. there are cases in which this will cause you trouble, and you will have to use linkedlist. of course, it is a very specialized solution, and, as any specialized tool, in most cases it is outperformed by a versatile one. but that doesn't mean that it \"sucks\" or something like that, you just have to know when to use it.", "for me a combination of the accepted answer by sean a.o. harney and the resulting comment by cort3z seems to be the best solution. used the following snippet: code_removed hope this could help someone.", "yeah it is a good practice and useful when you have many error messages, so that you make sure that this specific one will be thrown (many possible exceptions)", "if you're using a technology that has a minimal jdk. here's a way without any java libs: code_removed", "number 6 is basically the same that spring's code_removed does (but with 4k buffer which can make a big difference...)", "@jamesblack - yep, and to make sure all the bases were covered i put the jar's under code_removed, code_removed, and code_removed. running 'java -version' returns the expected details.", "the problem with the \"user.dir\" property is, as soon someone pass it as code_removed or set it inside the code with code_removed all code relying on it fails.", "this is in 14 too", "this is much less random than it should be given the string length as code_removed produces a code_removed between 0 and 1, so the exponent part is mostly unused. use code_removed for a random code_removed instead of this ugly hack.", "two things to note: 1) i recommend using \"${project.baseuri}repo\" instead of \"file://${project.basedir}/repo\" to get an rfc-compliant url also on windows. 2) if you structure your project into submodules, this approach seems to fail because ${project.baseuri} gets resolved to the module's subdirectory. any idea how to resolve this problem?", "i got \"variable may not have been initialized\" for the code_removed in code_removed. a code_removed solves the problem but mentioning it in the answer is not a bad idea.", "keep in mind that code_removed was legacy class before java collections framework (jcf) was introduced and was later retrofitted to implement the code_removed interface. so was code_removed and code_removed. therefore, always stay away from them in new code since there always better alternative in the jcf as others had pointed out. here is the java collection cheat sheet that you will find useful. notice the gray block contains the legacy class hashtable,vector and stack.", "if you use whole 64-bit trio and it still doesn't work (i've come to this problem while launching android monitor in intellij idea), probably wrong jvm.dll is being used opposed to what your java expects. just follow these steps: find the jvm.dll in your jre directory: code_removed find the jvm.dll in your jdk directory: code_removed copy the code_removed from jre drectory into your jdk directory and overwrite the jvm.dll in jdk. don't forget to make a backup, just in case. no need to install or uninstall anything related to java.", "the following javafx classes have static methods to determine current os (iswindows(),islinux()...): com.sun.javafx.platformutil com.sun.media.jfxmediaimpl.hostutils com.sun.javafx.util.utils example: code_removed", "why do we need to uninstall the previous version manually? i tried that 15 min ago and i could not restart eclipse because some libraries could not be found. these issues should be handled internally by eclipse, this is a massive waste of time", "during compile time, java behaves as pass by reference.during runtime it's pass by value.", "have made this answer with an updated approach with jdk-11 introducing a new an equally performant api to code_removed and similar in syntax to code_removed.", "would this approach work if the code is deployed using a ci build server? it looks like automated builds would not have access to the dependency.", "meet jorman jorman is a successful businessman and has 2 houses. but others don't know that. is it the same jorman? when you ask neighbours from either madison or burke streets, this is the only thing they can say: using the residence alone, it's tough to confirm that it's the same jorman. since they're 2 different addresses, it's just natural to assume that those are 2 different persons. that's how the operator code_removed behaves. so it will say that code_removed is false, because it only compares the addresses. an investigator to the rescue what if we sent an investigator? we know that it's the same jorman, but we need to prove it. our detective will look closely at all physical aspects. with thorough inquiry, the agent will be able to conclude whether it's the same person or not. let's see it happen in java terms. here's the source code of string's code_removed method: it compares the strings character by character, in order to come to a conclusion that they are indeed equal. that's how the string code_removed method behaves. so code_removed will return true, because it performs a logical comparison.", "absolutely. but for the user to make sure his password isn't compromised, the software handling the password has to take care to reduce the chance that malware (on the client) can pick up passwords from the client application memory. to achieve that, i believe storing the password in a char[] and overwriting this afterwards is good advice.", "or even shorter: if (b && (++counter == howmany))", "in pre-7 how about: code_removed", "please let me know if my question is unclear. thanks.", "its like a pipeline connecting code_removed in between u can add as many channels and pipes. the faucet can be of any type automatic or manual for flow of data and a route to channelize the flow. it supports and have implementation for all types and kinds of processing. and for same processing many approaches because it has many components and each component can also provide the desired output using different methods under it. for instance, file transfer can be done in camel with types file moved or copied and also from folder, server or queue. code_removed from/to----folder, direct, seda, vm can be anything", "guava provides a one-liner for this: code_removed", "what's the best way to get the current date/time in java?", "what is code_removed for in example 11?", "@ams, this annotation should wrapper a class", "wonderful, got the answer! we could do it in code_removed's our custom code_removed methods implementation or at viewholder's overridden code_removed method in a code_removed with code_removed! i think you may suggest the same! thanks!", "if you are using java 8, code_removed and code_removed can make this work quite simple. code_removed", "see xefer.com/2006/12/switchonstring for a nice write-up of this method.", "private treemap<string,integer> mysection2 = new treemap<>(); mysection2.put(\"abc1\", 2); mysection2.put(\"abc2\",5); mysection2.put(\"abc3\",3); for(integer x: mysection2.values()) { log.e(\"log\",\"treemap====\"+x); } this is giving me the same order as items were inserted?please suggest how is it different from linkedhashmaps?", "as it stands, this answer is almost link-only. can you add some example code or something into this answer itself?", "a good alternative is to stay away from null at all: yegor256.com/2014/05/13/why-null-is-bad.html", "here are some libraries that have multiple degrees of tuples for your convenience: javatuples. tuples from degree 1-10 is all it has. javaslang. tuples from degree 0-8 and lots of other functional goodies. joo\u03bb. tuples from degree 0-16 and some other functional goodies. (disclaimer, i work for the maintainer company) functional java. tuples from degree 0-8 and lots of other functional goodies. other libraries have been mentioned to contain at least the code_removed tuple. specifically, in the context of functional programming which makes use of a lot of structural typing, rather than nominal typing (as advocated in the accepted answer), those libraries and their tuples come in very handy.", "switches based on integers can be optimized to very efficent code. switches based on other data type can only be compiled to a series of if() statements. for that reason c & c++ only allow switches on integer types, since it was pointless with other types. the designers of c# decided that the style was important, even if there was no advantage. the designers of java apparently thought like the designers of c.", "i really want to know more about the update, export and the values that could be given to code_removed i need to know when to use the update and when not? and what is the alternative? these are changes that could happen over db: new tables new columns in old tables columns deleted data type of a column changed a type of a column changed its attributes tables dropped values of a column changed in each case what is the best solution?", "what about code_removed, code_removed and code_removed?", "@pino yes, thread itself is also a runnable. however, if you extend it to just use it as a runnable, what's the point? why not just use a plain runnable without all the baggage. so, i'd argue, that if you extend thread, you also would execute it by using its start method, which can only be used once. that's the point nidhish-krishnan wanted to make in his answer. note, that mine is just a compilation or brief summary of other answers here.", "since java 1.5, simple one line concatenation with \"+\" and stringbuilder.append() generate exactly the same bytecode. so for the sake of code readability, use \"+\". 2 exceptions: multithreaded environment: stringbuffer concatenation in loops: stringbuilder/stringbuffer", "you only have to add the millisecond field in your date format string: code_removed the api doc of simpledateformat describes the format string in detail.", "it's contravariance.", "my small contribution: first and most significant different between code_removed and code_removed is that, code_removed is not thread-safe while code_removed is a thread-safe collection. second important difference between code_removed and code_removed is performance, since code_removed is not synchronized it perform better than code_removed. third difference on code_removed vs code_removed is that code_removed is obsolete class and you should be using code_removed in place of code_removed in java.", "what's the advantage of using getters and setters - that only get and set - instead of simply using public fields for those variables? if getters and setters are ever doing more than just the simple get/set, i can figure this one out very quickly, but i'm not 100% clear on how: code_removed is any worse than: code_removed whereas the former takes a lot less boilerplate code.", "in dijkstra's \"goto considered harmful\" paper, what he specifically objected to was the labels, not the goto. he observed that the number of bugs seems to increase with the number of labels in a program, and that labels and gotos make programs difficult to analyze.", "thanks had the same problem where my path was set to c: programdata oracle java javapath and i had moved it to the end.", "produces code_removed for code_removed and code_removed. use this instead.", "hi, thanks for guid. can we use both downloadmanager and update ui at same time?", "this trick works on vista too... thanks!", "watch out -- dateformat and derived classes are not multithread compatible! using static simpledateformat objects such as date_format_1 and date_format_2 means that multiple threads calling the iso8601dateformatter functions will share the same dateformat object. this leads to data corruption and incorrect dates being returned from the dateformat calls. to fix this, you should just make the pattern strings constants and create local simpledateformat variables whenever needed. this will ensure that each object is just used by one thread.", "in general, both equals() and \u201c==\u201d operator in java are used to compare objects to check equality but here are some of the differences between the two: main difference between.equals() method and == operator is that one is a method and other is the operator. we can use == operators for reference comparison (address comparison) and.equals() method for content comparison. in simple words, == checks if both objects point to the same memory location whereas.equals() evaluates to the comparison of values in the objects. if a class does not override the equals method, then by default it uses equals(object o) method of the closest parent class that has overridden this method. see this for detail", "rolled back the edit to this answer because the point was to narrow the scope of the code_removed variable. the edit declared it twice, which would be a compile error.", "@fool4jesus, i'm sorry, i don't really remember my motivation behind my comment, but it seems you're correct.", "i have to correct myself one more time. beginning with java 9/10+, several \"com.sun.*\" packages/apis are about to be removed. check out this link for more info. i actually stumbled over this because we use some of these packages. migrating to eclipse 4.8/jdk 10, we now have to fix these and several other compiler errors due to missing references.", "correct, but harder to read", "oh, i got the impression this somehow got around that constraint. so how is this different from my answer?", "by not implementing code_removed this code is definitively ugly although useful. it needs a cast (ie code_removed) to work.", "@artbristol, thanks! i don't disagree on the new executor (we do what you suggest in our code). in writing the original answer, i was trying to write minimal code analagous to the original fragment. we have to hope that many readers of these answers use them as jumping off points. i'm not trying to write a replacement for the javadoc. i'm effectively writing marketing material for it: if you like this method, you should see all the other great things we have to offer...!", "i found a woraround. this won't compile: code_removed this works: code_removed", "for swift: stackoverflow.com/questions/26845307/\u2026", "you don't need the foo.txt, just put in an empty string to get the directory", "first lets see the similarities: both stringbuilder and stringbuffer are mutable. that means you can change the content of them, with in the same location. differences: stringbuffer is mutable and synchronized as well. where as stringbuilder is mutable but not synchronized by default. meaning of synchronized (synchronization): when some thing is synchronized, then multiple threads can access, and modify it with out any problem or side effect. stringbuffer is synchronized, so you can use it with multiple threads with out any problem. which one to use when? stringbuilder: when you need a string, which can be modifiable, and only one thread is accessing and modifying it. stringbuffer: when you need a string, which can be modifiable, and multiple threads are accessing and modifying it. note: don't use stringbuffer unnecessarily, i.e., don't use it if only one thread is modifying and accessing it because it has lot of locking and unlocking code for synchronization which will unnecessarily take up cpu time. don't use locks unless it is required.", "@paulomatuki, @mark, hi, have you guys solve the code_removed problem?", "this will not work for 123.456;(", "i had to add.sss for fractional seconds but works great thx. why do you do code_removed - i dont see the point in this", "there is absolutely no need to seed code_removed, it will be seeded by the system. directly calling code_removed is very dangerous, it may replace the (really random) seed with the date. and that will certainly not result in a code_removed, as anybody can guess the time and try and seed their own code_removed instance with that information.", "an interesting idea, but i don't think the low-level code would know what a particular exception \"means\" to the caller, so i don't think it would ever make sense for the thrower to decide which handlers should execute.", "when all else fails, read the documentation.", "doesn't this compile a new regular expression every time? that doesn't seem very efficient.", "i never use labels. it seems like a bad practice to get into. here's what i would do: code_removed", "@ycomp i suspect this name conflict may be by design: the assertj library therefore strongly encourages you never to use the junit code_removed, always the assertj one. also the junit method returns only a \"regular\" type, whereas the assertj method returns an code_removed subclass... allowing stringing of methods as above (or whatever the technical terms is for this...).", "it would look something like this. very crufty. code_removed there is a good writeup on for each in the sun documentation.", "i love the answer from @bert f but this is the way my brain sees it. i have an x in my hand. if i want to write my x into a list, that list needs to be either a list of x or a list of things that my x can be upcast to as i write them in i.e. any superclass of x... code_removed if i get a list and i want to read an x out of that list, that better be a list of x or a list of things that can be upcast to x as i read them out, i.e. anything that extends x code_removed hope this helps.", "this cant be used when you have a variable inside. you have make it final", "code_removed (introduced in java 5) is identical to code_removed, except its methods are not synchronized. this means it has better performance than the latter, but the drawback is that it is not thread-safe. read tutorial for more details.", "on the line where you write code_removed, eclipse gives me a friendly warning saying, code_removed. and it suggests to change code_removed to code_removed in both cases. is that okay?", "the issue with code_removed is solved by using a bitwise operator to clear the most significant bit. this will work for all values.", "@dastagir hope that works. i botched my enviornment today.", "there are some small differences depending whether you are talking about \"primitives\" or \"object types\"; the same can be said if you are talking about \"static\" or \"non-static\" members; you can also mix all the above... here is an example (you can run it): code_removed you can compare the explanations for \"==\" (equality operator) and \".equals(...)\" (method in the java.lang.object class) through these links: ==: .equals(...):", "what's the difference, the enum references one place in memory, so you can use ==.", "imagine you have an abstract superclass that is generic: code_removed and then you have a second class that extends foo with a generic bar that extends t: code_removed you can get the class code_removed in the foo class by selecting the code_removed (from bert bruynooghe answer) and infering it using code_removed instance: code_removed you have to note this operation is not ideal, so it is a good idea to cache the computed value to avoid multiple calculations on this. one of the typical uses is in generic dao implementation. the final implementation: code_removed the value returned is bar.class when invoked from foo class in other function or from bar class.", "the question was about inputstream. you only know the size because you also have the file object. you can however have an inputstream provided to you by some third party lib. or you might want some logic that works for files, network streams and mocks all the same.", "@calum and @pool - as noted below in alex miller's answer, using code_removed without passing it into a new code_removed object will fix the size of the list. one of the more common reasons to use an code_removed is to be able to dynamically change its size, and your suggestion would prevent this.", "a - explanation you can use jackson libraries, for binding json string into pojo (plain old java object) instances. pojo is simply a class with only private fields and public getter/setter methods. jackson is going to traverse the methods (using reflection), and maps the json object into the pojo instance as the field names of the class fits to the field names of the json object. in your json object, which is actually a composite object, the main object consists o two sub-objects. so, our pojo classes should have the same hierarchy. i'll call the whole json object as page object. page object consist of a pageinfo object, and a post object array. so we have to create three different pojo classes; page class, a composite of pageinfo class and array of post instances pageinfo class posts class the only package i've used is jackson objectmapper, what we do is binding data; code_removed the required dependencies, the jar files is listed below; jackson-core-2.5.1.jar jackson-databind-2.5.1.jar jackson-annotations-2.5.0.jar here is the required code; b - main pojo class: page code_removed c - child pojo class: pageinfo code_removed d - child pojo class: post code_removed e - sample json file: samplejsonfile.json i've just copied your json sample into this file and put it under the project folder. code_removed f - demo code code_removed g - demo output code_removed", "it seems unneccessary to use code_removed twice, just use string concatenation: code_removed", "dont forget to sudo", "@laszlok simply the compile time type checking is reason big enough to choose code_removed over code_removed. of course it is a personal preference to weight \"compile-time type checking\" vs \"ease of replacing an enum with a class\" but i simply cannot agree on you keep on mentioning \"using ==... for no good reason\"", "a - explanation you can use jackson libraries, for binding json string into pojo (plain old java object) instances. pojo is simply a class with only private fields and public getter/setter methods. jackson is going to traverse the methods (using reflection), and maps the json object into the pojo instance as the field names of the class fits to the field names of the json object. in your json object, which is actually a composite object, the main object consists o two sub-objects. so, our pojo classes should have the same hierarchy. i'll call the whole json object as page object. page object consist of a pageinfo object, and a post object array. so we have to create three different pojo classes; page class, a composite of pageinfo class and array of post instances pageinfo class posts class the only package i've used is jackson objectmapper, what we do is binding data; code_removed the required dependencies, the jar files is listed below; jackson-core-2.5.1.jar jackson-databind-2.5.1.jar jackson-annotations-2.5.0.jar here is the required code; b - main pojo class: page code_removed c - child pojo class: pageinfo code_removed d - child pojo class: post code_removed e - sample json file: samplejsonfile.json i've just copied your json sample into this file and put it under the project folder. code_removed f - demo code code_removed g - demo output code_removed", "the list to be sorted is \"new linkedlist\"?? gee. thankfully collections.sort() dump the list to an array first, to avoid precisely this kind of error (but still, dumping an arraylist to an array should be faster than doing the same for a linkedlist).", "@doctororeo code_removed is the same as code_removed in this case, so if at least two are true code_removed must not equal code_removed (i.e one of them is true) and code_removed must be true, otherwise code_removed must equal code_removed and code_removed must be true.", "@midnightstar take a look at this: stackoverflow.com/questions/16067199/\u2026 there are more threads, if you want to expand on that.", "my not very revealing answer: code_removed", "version 1: code_removed lazy loading, thread safe with blocking, low performance because of code_removed. version 2: code_removed lazy loading, thread safe with non-blocking, high performance.", "when inheriting from thread, one nearly always wants to override the behavior of the code_removed method.", "note: when using the system scope (as mentioned on this page), maven needs absolute paths. if your jars are under your project's root, you'll want to prefix your systempath values with ${basedir}.", "true and true but moreover, it points how why individual property setters open the door for invalid states with absolutely no remedy for ensuring the integrity of any given object that allows the abstraction to leak.", "i like articles from nat pryce. here are the links: avoiding nulls with polymorphic dispatch avoiding nulls with \"tell, don't ask\" style in the articles there is also a link to a git repository for a java maybe type which i find interesting, but i don't think it alone could decrease the checking code bloat. after doing some research on the internet, i think != null code bloat could be decreased mainly by careful design.", "this is the most direct answer to the question.", "this isn't very random (predictably alternates between upper case and lower case), and doesn't use characters '0'-'9'.", "object[] obj = stock_list.toarray();", "+1 it could have been added as rule 8 of the accepted answer: rule 8: because so many things can go wrong, you should probably use an existing library rather than trying to do it yourself!", "at first i thought the code_removed after code_removed is put by mistake but..... the standard symbol for `current directory' is a single period (.) in both unix and windows systems.", "and then, just to confuse newcomers, the brilliant new modifier code_removed was added to interface methods in java 8:)", "quickly: you can do: code_removed and to reverse code_removed", "if the threadpool keeps the threads alive, then their threadlocals will too, but they will be overwritten by the new values when the thread in the pool is allocated again no? why would it leak? it just seems to me that you'd have a fix increase of memory maybe, equal to num thread * size of threadlocal value, but your threadpool should manage itself to a reasonable size, so this isn't really a memory leak, increasing maxpermsize should in fact be a good solution.", "i think code_removed only stores it into variable so my suggestions only apply in the next block when user want to cope with the exception", "alternatively, you can use maven-assembly-plugin, as shown in the below example: code_removed in this example all the dependency jars as specified in section will be automatically included in your single jar. note that jar-with-dependencies should be literally put as, not to be replaced with the jar file names you want to include.", "code_removed will execute and that is for sure. code_removed will not execute in below cases: case 1: when you are executing code_removed. case 2: when your jvm / thread crashes. case 3: when your execution is stopped in between manually.", "simple way to say is: if you implement interface that means you are implementing all methods of it and if you extending the class you are inheriting method of your choice... in this case,there is only a one method named run() so better to implement runnable interface..", "since technologies appear everyday, the answer will change in the time. i took a look at lambdaj and seems very interesting. you can try solving these tasks with lambdaj. you can find it here: here you have an example: sort iterative code_removed sort with lambda code_removed of course, having this kind of beauty impacts in the performance (an average of 2 times), but can you find a more readable code?", "for \"if (false)\", check end of doc docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14\u200c\u200b.21", "network-based operations cannot be run on the main thread. you need to run all network-based tasks on a child thread or implement asynctask. this is how you run a task in a child thread: code_removed", "i was unable to solve this problem with the solutions stated here (although the answer stated has, no doubt, cleared my concepts). i faced this problem two times and each time i have tried different solutions (in the eclipse ide). firstly, i have come across with multiple code_removed methods in different classes of my project. so, i had deleted the code_removed method from subsequent classes. secondly, i tried following solution: right click on my main project directory. head to source then clean up and stick with the default settings and on finish. after some background tasks you will be directed to your main project directory. after that i close my project, reopen it, and boom, i finally solved my problem.", "i had the same issue after upgrading from java 6 to java 7. after i removed java 6 (64 bit) and reinstalled java 7 (64 bit), eclipse worked.:)", "another solution if the text is not the same to the enumeration value: code_removed", "for me a combination of the accepted answer by sean a.o. harney and the resulting comment by cort3z seems to be the best solution. used the following snippet: code_removed hope this could help someone.", "i found this source very interesting. in fact, it is the lambda that turns into a double colon. the double colon is more readable. we follow those steps: step1: code_removed step2: code_removed step3: code_removed", "maybe a bit late, but i made it multi-core-using multi-threaded. i posted it here: pastebin.com/xzqtgrdq i changed a bit of your code because of problems with multi-core.", "this aproach doesn't work with 2.5.1", "hi @chharvey, link only answers get 6 upvotes? please add some points that could support the link.what if oracle changes their link?", "in the first case you might be adding an extra newline at the end. in the second case you might be omitting one. so both are equally wrong. see this article", "@avgvstvs: well, string constants are, as the jls mandates, always interned, hence the statement that interned strings ended up in the permgen space, applied to string constants implicitly. the only difference is that string constants were created in the permgen space in the first place, whereas calling code_removed on an arbitrary string could cause the allocation of an equivalent string in the permgen space. the latter could get gc\u2019ed, if there was no literal string of the same contents sharing that object\u2026", "the missing proguard isn't really an issue. just download it from the proguard site and extract the content into tools/proguard.", "woah... the most correct answer and its gets downvoted, where's the justice? in java null is always a valid value. it's the corollary to everything is an object - null is an everything (of course we're ignoring primitives here but you get the idea). personally i favour the approach taken by nice, though we could make it so that methods can be invoked on nullable types and promote npes to checked exceptions. this would have to be done via a compiler switch though as it would break all existing code:(", "with guava you can write: code_removed in guava there are also other useful static constructors. you can read about them here.", "the question says \"numeric\" which could include non-integer values.", "@palec this is interesting, but can you quote from the docs where it says that code_removed is executed in parallel? i thought this was only the case when you explicitly make the stream parallel using code_removed.", "it's pretty straightforward answer. -> say you want range between 0-9, 0 is min and 9 is max. the below function will print anything between 0 and 9. it's same for all ranges. code_removed", "yes, that's possible for instance in this answer i sort by the property code_removed of the class code_removed code_removed if you notice here i'm creating a anonymous inner class ( which is the java for closures ) and passing it directly to the code_removed method of the class code_removed your object may also implement code_removed ( that's what string and most of the core libraries in java does ) but that would define the \"natural sort order\" of the class it self, and doesn't let you plug new ones.", "sorry for the random nooby question, but why do you have a call to super() in the constructor?", "@irani: there's a stray code_removed in the middle of your revised code_removed causing: code_removed. (also, thanks for revising!)", "the for-each loop in java uses the underlying iterator mechanism. so it's identical to the following: code_removed", "i don't think i've seen this solution yet: code_removed its advantage is that once it reaches the number that you're looking for, it breaks. so if this was \"at least 2 out of this 1,000,000 values are true\" where the first two are actually true, then it should go faster than some of the more \"normal\" solutions.", "the downside of code_removed is that it's a) based on a dead jsr, b) hard to find an artifact that just provides the annotations and is maintained. the one from findbugs is not: search.maven.org/\u2026", "have a look at this post. examples of gof design patterns in java's core libraries from the best answer's \"singleton\" section, singleton (recognizeable by creational methods returning the same instance (usually of itself) everytime) java.lang.runtime#getruntime() java.awt.desktop#getdesktop() java.lang.system#getsecuritymanager() you can also learn the example of singleton from java native classes themselves.", "the example is a bad one, since the middle name is clearly not a transient property.", "adt download failed at the end for linux 64 bit. and the replacing tools folder also not at all work.", "pointers are immutable, primitives in general are mutable. string is also not a primitive, it is an object. moreover, the underlying structure of the string is a mutable array. the only immutable thing about it is the length, that being the inherent nature of arrays.", "using eclipse.exe -vm \"c: program files java jdk1.8.0_25 bin\" in windows 7 64 bit works like a charm", "@hoeloe i assume it doesn't matter when you are trying to throw uncatchable exceptions. both should never be done in serious code.", "this answer is only half of the story. it fails to mention any of the pitfalls when overriding the equals method in a subclass. it is actually misleading in that simply adding appendsuper in a derived class will solve the problem. it will almost certainly break either symmetry or transitivity.", "it isn't always the first class. hardly ever. command line should be code_removed.", "i've merged the solutions of user157196 and carter page: code_removed", "how can jackson be configured to ignore a field value during serialization if that field's value is null. for example: code_removed", "yeah, it's a risky solution from the performance point of view. it might be fast, but i wouldn't bet my application's performance on it;)", "code_removed", "also read @daniel james ans, he explained well - stackoverflow.com/questions/1055243/is-a-java-hashmap-really\u200c\u200b-o1/\u2026", "i wanted to answer this question but was marked as a duplicate which prevents me from posting as well. so posting it here instead! if its a new implementation you can try re-writing the logic as if-else_if-else statements. code_removed otherwise you can try setting a flag when that special condition has occured and check for that flag in each of your loop-conditions. code_removed if you are simply porting the logic from one programming language to java and just want to get the thing working you can try using labels", "the three others answers provide you a good vision of what a code_removed version is. i just wanted to add some information regarding the behavior of maven when it finds a code_removed dependency. when you build an application, maven will search for dependencies in the local repository. if a stable version is not found there, it will search the remote repositories (defined in code_removed or code_removed) to retrieve this dependency. then, it will copy it into the local repository, to make it available for the next builds. for example, a code_removed library is considered as a stable version, and if maven finds it in the local repository, it will use this one for the current build. now, if you need a code_removed library, maven will know that this version is not stable and is subject to changes. that's why maven will try to find a newer version in the remote repositories, even if a version of this library is found on the local repository. however, this check is made only once per day. that means that if you have a code_removed (i.e. this library has been generated on 2011/05/06 at 11:00:00) in your local repository, and if you run the maven build again the same day, maven will not check the repositories for a newer version. maven provides you a way to can change this update policy in your repository definition: code_removed where code_removed can be: always: maven will check for a newer version on every build; daily, the default value; interval:xxx: an interval in minutes (xxx) never: maven will never try to retrieve another version. it will do that only if it doesn't exist locally. with the configuration, code_removed version will be handled as the stable libraries. (model of the settings.xml can be found here)", "still amazed that none recommended the guava library for this. code_removed", "this is called appcompat.", "yes, but what if the maven pom is not called pom.xml? then it seems like i can't read maven dependencies.", "the last item in the list is code_removed. the collection is backed by an array and arrays start at index 0. so element 1 in the list is at index 0 in the array element 2 in the list is at index 1 in the array element 3 in the list is at index 2 in the array and so on..", "if you're only interested in the keys, you can iterate through the code_removed of the map: code_removed if you only need the values, use code_removed: code_removed finally, if you want both the key and value, use code_removed: code_removed one caveat: if you want to remove items mid-iteration, you'll need to do so via an iterator (see karim79's answer). however, changing item values is ok (see code_removed).", "that's funny since the other system is running win7 and this pc with the problems runs win8.", "hey thanks for the reference @shmosel, but i was looking more for empirical knowledge. for those who have used guava, why would guava be chosen over hashset?", "if hardware/os behaves incorrectly", "i dont know if its works, but you could try to overide the throwable contructor, throwing another error...", "if you are using http get please remove this line code_removed", "project euler is mentioned in the tags and many of the problems in it require checking numbers >> 2^64. most of the optimizations mentioned above don't work easily when you are working with an 80 byte buffer. i used java biginteger and a slightly modified version of newton's method, one that works better with integers. the problem was that exact squares n^2 converged to (n-1) instead of n because n^2-1 = (n-1)(n+1) and the final error was just one step below the final divisor and the algorithm terminated. it was easy to fix by adding one to the original argument before computing the error. (add two for cube roots, etc.) one nice attribute of this algorithm is that you can immediately tell if the number is a perfect square - the final error (not correction) in newton's method will be zero. a simple modification also lets you quickly calculate floor(sqrt(x)) instead of the closest integer. this is handy with several euler problems.", "@luke-hutchison as i said, this is the solution of sun.misc.ioutils. in the most common cases you don't know the size of an inputstream upfront, so if (length == -1) length = integer.max_value; applies. this solution works, even if the given length is larger than the length of the inputstream.", "@gopsab: what do you mean by \"both times from the same time zone\"? ignore shanghai for the moment - do you live in a time zone that observes daylight saving time? if so, what time does it change? that's a good way of seeing local time change by a different amount from utc...]", "catching an exception is way more expensive. in my test, checking new file().exists() was more than 10 times faster than catching filenotfoundexception. so, if you have a scenario where files normally expected to be missing (such as disk cache), exception is wrong. also, second-guessing the system is cool.", "code_removed you could replace string by a type/class of your liking im sure this can be made shorter and better, but it works and im to lazy to sort it out further...", "@markwhitaker or if goats start using devices.", "yes it is, localdate is the best way to do that,", "@travisschneeberger much of the complexity is because sun chose to use xerces in the jre itself. you can hardly blame the xerces folks for that.", "hibernate is the swiss army knife that was introduced by rod johnson to replace the unwieldy collection of tools you had to use for remote data objects (cactus anyone? ugh). jpa is sun (now oracle) admitting their original collection of tools was dumb, then copying the original swiss army knife with a series of jsr's. only now the screwdriver is missing for some reason.", "just check the path environment variable. in my computer - > properties -> advanced system settings -> environment variables -> (left upper window \"user variables for \"some name of pc\"\" ) just check the path variable. if it doesn't exist create it with the following -- > c: program files (x86) java jre7 bin <-- i was faced with the same problem after had updated my eclipse. i've found that the path asked 64-bit version, but i had the 32-bit in dif path. it was helpful for me. p.s.: i have a 64-bit os, 32-bit jre and 32-bit eclipse. all works fine:)", "i like this one best because you get a chance to strip out noise, by wrapping your println statement, e.g. code_removed", "it's unlikely that every other value than null is acceptable. you could have illegalargumentexception, outofrageexception etc etc. sometimes this makes sense. other times you end up creating a lot of exception classes that doesn't add any value, then you just use illegalargumentexception. it doesn't makes sense to have one exception for null-input, and another one for everything else.", "btw, this could be simplified using the convenience constructors printstream has had since 1.5. this would suffice: printstream out = new printstream(\"filename.txt\");", "+1. just to add: allowing lazy loading. allowing copy on write.", "code_removed probably wouldn't be appropriate here since it only checks if the string is a sequence of digits. would be fine for most ints but not so for numbers with decimals, group separators, etc.", "the other case to get correct byte array via stream, after send request to server and waiting for the response. code_removed", "@zakhariastanley what is good then?", "check, right.. old and simple java class path variable;=)))))) ps.: thx, found it via google and wanted to post it myself..:) the dialog actually say you should do it;) nobody reads today", "the top answer didn't work for me: i had no environment variables defining the java path or no java in my path. however, the path c: programdata oracle java javapath javaw.exe was always present in the eclipse 4.5 (mars) error popup in the code_removed option even if i tried to override in file eclipse.ini. i worked around this by opening a command prompt, cd'ing the directory where the eclipse.exe was and using mklink: code_removed no changes to eclipse.ini were required. i did try to specify the code_removed option of in eclipse.ini, and it was taken into account, but in the error popup a code_removed option was present twice even if only one code_removed was present in eclipse.ini. in my eclipse.ini i have no code_removed option and just the symlink seems to have corrected it.", "setting java_home with a path containing a space character is challenging! i didn't succeeded...", "it's a breeze in groovy; i embed the groovy jar and create a code_removed utility class to do all these things and more which i find exasperating to do in java (since i am stuck using java 6 in the enterprise.) code_removed", "@intellidata - for the declaration code_removed, the code_removed part of the declaration does not describe what you can add to the list - it describes what kinds of lists that the variable code_removed can point to. as an implication of all the different kinds of lists that code_removed can legally point to, only certain types of objects can be added to code_removed that is guaranteed to be acceptable to any type of list that code_removed may be pointed to.", "@mikerodent 4.1 version is generic: public static <k, v> map<k, v> putall(final map<k, v> map, final object[] array)", "@tombrito no performance considerations as there's no performance difference after the code gets jit compiled. virtual method calls are expensive, but they obviously don't apply when the method can be static. method is classes without ancestors get special treatment and so do non-overridden methods (whether code_removed or not).", "how about: code_removed", "i understood, i think, that a \"bean\" is a java class with properties and getters/setters. as much as i understand, it is the equivalent of a c struct. is that true? also, is there a real syntactic difference between a bean and a regular class? is there any special definition or an interface? basically, why is there a term for this? edit: if you can be so kind and add information regarding the code_removed interface, and what it means, to your answer, i'd be very grateful.", "understand it in 2 steps: you can't change the reference to the object itself but you can work with this passed parameter as a reference to the object. if you want to change the value behind the reference you will only declare a new variable on the stack with the same name 'd'. look at the references with the sign code_removed and you will find out that the reference has been changed. code_removed", "@antti syk\u00e4ri sorry for asking i'm a newbie to java, why is code_removed is used in code_removed without it will it not combine the 2 arrays", "how is this answer correct? the very concept of \"pass-by-value\", just like \"value types\", implies your are dealing with data that lives directly in variables and is thus copied on assignment. just because java doesn't provide access to raw pointers doesn't matter: objects act fundamentally different to primitive data types. they are not both pass-by-value", "nice answer...deserves upvote", "fyi: in c# the behaviour is identical apart from the fact that replacing the statement in the code_removed-clause with code_removed is not allowed (compiler-error).", "+1: this is a neater approach than my answer (assuming we're using java 5 or later)", "once java-8 is out (march 2014) you'll be able to use streams: code_removed printing all the lines in the file: code_removed", "code_removed creates a code_removed, not a code_removed.", "a diagram is better than thousands of description. this diagram illustrates the architecture of camel.", "if you already know the length of the data to read from the stream, this is no better than code_removed.", "i suspect the reason it doesn't work is because the collection returned by values() is dependent on the underlying map; by making a copy constructor call instead, you allocate storage and copy the values into that storage, thus breaking the connection...", "@agrimpathak that depends. for not too large input, an algorithm with higher complexity is faster than an algorithm with lower complexity when the constants are smaller for the algorithm with higher complexity. where the break-even point is can be hard to predict. also, compare this, locality is important. big-o is important, but it is not the sole criterion for performance.", "by the way, this applies to the entire left hand side expression, not only the index providing sub-expression. this expression may be arbitrarily complex. see for example code_removed\u2026", "another way to implement pair with. public immutable fields, i.e. simple data structure. comparable. simple hash and equals. simple factory so you don't have to provide the types. e.g. pair.of(\"hello\", 1); code_removed", "@petervdl heartbleed happened because someone got the great idea that reusing memory was cheaper than allocating new (cleared) memory, you cannot reuse a string in java, just hope that nobody ever gets the idea to put your char[] into a reuse list for better performance.", "just use the openjdk and it will work.", "@dfeuer for the benchmark it's important to give answer asap, and the trailing zero count itself gives no answer; it's just a preparatory step. i86/amd64 do it. no idea about the small cpus in mobiles, but at worst, java has to generate an and instruction for them, which is surely simpler than the other way round.", "the for code_removed syntax is much better.", "that means other developers can change the logic in another programming language too?", "for big lists you avoid linkedlists because of memory bloat, for small lists you use arraylists because the resizes are not expensive", "i have created a thread devoted to these kind of questions for any programming languages here. java is also mentioned. here is the short summary: java passes it parameters by value \"by value\" is the only way in java to pass a parameter to a method using methods from the object given as parameter will alter the object as the references point to the original objects. (if that method itself alters some values)", "@nalandial: actually, with a little effort on the part of the compiler, it's not expensive at all because when the set of strings is known, it's pretty easy to generate a perfect hash (this isn't done by.net, though; probably not worth the effort, either).", "+1. i tried both baksmali and dex2jar. dex2jar+jd-gui wins for giving you perfectly readable source code for most.dex files.", "@pkalinow if you study this topic closer you will find out that null object design pattern won't fix the multithreading problems. so it's irrelevant. and to be honest, i've found places where this pattern would fit in nicely, so my original answer is a bit wrong, actually.", "i feel bad for anyone who cheekily used this function, expecting it to return code_removed forever.", "quite interesting to see that linkedlist requires as much memory as arraylist for storing a single element. how unintuitive! what happens if you run your example with -xx:+usecompressedoops?", "wikipedia has some examples of singletons, also in java. the java 5 implementation looks pretty complete, and is thread-safe (double-checked locking applied).", "code_removed and code_removed do not allow code_removed keys or code_removed values. code_removed synchronizes all operations (code_removed, code_removed, code_removed, etc). code_removed supports full concurrency of retrievals, and adjustable expected concurrency for updates. as usual, there are concurrency--overhead--speed tradeoffs involved. you really need to consider the detailed concurrency requirements of your application to make a decision, and then test your code to see if it's good enough.", "@konrad & nate: while a hashtable or a finite state machine would work in a switch, it would take a freakin' lot of case items for the intrinsic overhead of either to be overcome. my \"wild-ass guess\" is that 80% of all switches have less than 10 cases, and 99.9% have less then 20. at those sizes, it would be very hard to beat chained if()s for speed.", "java is reference based and mostly it acts call by reference.", "if you consider an object should not be null (or it is a bug) use an assert. if your method doesn't accept null params say it in the javadoc and use an assert. you have to check for object!= null only if you want to handle the case where the object may be null... there is a proposal to add new annotations in java7 to help with null / notnull params:", "@francis: i assume you mean \"you can only chain to one other constructor\" - currently your statement makes it sound like you can only have one constructor per class, which is clearly not true.", "code_removed", "another key difference between hashtable and hashmap is that iterator in the hashmap is fail-fast while the enumerator for the hashtable is not and throw concurrentmodificationexception if any other thread modifies the map structurally by adding or removing any element except iterator's own remove() method. but this is not a guaranteed behavior and will be done by jvm on best effort.\" my source:", "to all saying that there is no possible use for this feature: android throws this exception regardless of context. we have a service running in a separate process so that multiple applications can share a common service through our library. there is no ui, there is only this networking service - it does not need strict policy checking because we're already interacting with it in a way that does not impede our ui", "the problem with this it that it breaks transitivity. if you add code_removed, then code_removed and code_removed but code_removed.", "will work only if the inputstream is one-liner", "if you don't handle exception, before terminating the program, jvm executes finally block. it will not executed only if normal execution of program will fail mean's termination of program due to these following reasons.. by causing a fatal error that causes the process to abort. termination of program due to memory corrupt. by calling system.exit() if program goes into infinity loop.", "@gb96 i added your change to my example.", "@dividebyzero not to make it easier, to make it more secure (as in, for example, not possible to walk off the end of an array). even good c/c++ programmers have that happen.", "the other innovation in arm is the addition of the s instruction suffix, also optional on (almost) all instructions, which if absent, prevents instructions from changing status bits (with the exception of the cmp instruction, whose job is to set status bits, so it doesn't need the s suffix). this allows you to avoid cmp instructions in many cases, as long as the comparison is with zero or similar (eg. subs r0, r0, #1 will set the z (zero) bit when r0 reaches zero). conditionals and the s suffix incur zero overhead. it's quite a beautiful isa.", "wah i re-downloaded jdk installer on my slow line only to realise that i do have jdk installed! and this worked thanks!", "is there anything wrong here that i am getting down vote?!", "first you need to select an implementation library to do that. the java api for json processing (jsr 353) provides portable apis to parse, generate, transform, and query json using object model and streaming apis. the reference implementation is here: here you can find a list of implementations of jsr 353: what are the api that does implement jsr-353 (json) and to help you decide... i found this article as well: if you go for jackson, here is a good article about conversion between json to/from java using jackson: hope it helps!", "@blueraja-dannypflughoeft the simple questions get upvoted, because everyone understands them, and this question actually got a few good answers as well.", "the question is about a c++ equivalent pair - which is ordered. also i think that as long as one has a reference to pair's object and those are mutable inserting pairs in collections might lead to undefined behavior.", "after having pondered this, i have successfully created an uncatchable exception. i chose to name it code_removed, however, rather than chuck, because it is one mushroom-cloud-laying-mother-exception. furthermore, it might not be exactly what you had in mind, but it certainly can't be caught. observe: code_removed et voila! uncaught exception. output: run: say 'what' again! i dare you! i double dare you! java result: 8 build successful (total time: 0 seconds) when i have a little more time, i'll see if i can't come up with something else, as well. also, check this out: code_removed causes a stack overflow - again, exceptions remain uncaught.", "you need to go to the code_removed and change code_removed to required code_removed level.", "@rolfrander somehow i get the feeling that you use a single login for all your clients and don't have any security/validation serverside. its your duty to make sure that a user can't compromise the database (access restrictions and validation serverside) and the users duty to make sure that his account can't be compromised (his password).", "as some others have noted, the correct answer is to use either code_removed or code_removed. floating-point doesn't have decimal places so you cannot possibly round/truncate to a specific number of them in the first place. you have to work in a decimal radix, and that is what those two classes do. i am posting the following code as a counter-example to all the answers in this thread and indeed all over stackoverflow (and elsewhere) that recommend multiplication followed by truncation followed by division. it is incumbent on advocates of this technique to explain why the following code produces the wrong output in over 92% of cases. code_removed output of this program: code_removed edit: to address some comments below i redid the modulus part of the test loop using code_removed and code_removed for the modulus operation as follows: code_removed result: code_removed", "md5 is perfectly fine if you don't need the best security, and if you're doing something like checking file integrity then security is not a consideration. in such as case you might want to consider something simpler and faster, such as adler32, which is also supported by the java libraries.", "nice solution! that's exactly how i'd do it in practice if putting it in an extra function is not preferable for some reason.", "here is a comparison of speed for six possible implementations.", "this question is often asked in interview to check whether candidate understands correct usage of collection classes and is aware of alternative solutions available. the hashmap class is roughly equivalent to hashtable, except that it is non synchronized and permits nulls. (hashmap allows null values as key and value whereas hashtable doesn't allow nulls). hashmap does not guarantee that the order of the map will remain constant over time. hashmap is non synchronized whereas hashtable is synchronized. iterator in the hashmap is fail-safe while the enumerator for the hashtable is not and throw concurrentmodificationexception if any other thread modifies the map structurally by adding or removing any element except iterator's own remove() method. but this is not a guaranteed behavior and will be done by jvm on best effort. note on some important terms synchronized means only one thread can modify a hash table at one point of time. basically, it means that any thread before performing an update on a hashtable will have to acquire a lock on the object while others will wait for lock to be released. fail-safe is relevant from the context of iterators. if an iterator has been created on a collection object and some other thread tries to modify the collection object \"structurally\", a concurrent modification exception will be thrown. it is possible for other threads though to invoke \"set\" method since it doesn't modify the collection \"structurally\". however, if prior to calling \"set\", the collection has been modified structurally, \"illegalargumentexception\" will be thrown. structurally modification means deleting or inserting element which could effectively change the structure of map. hashmap can be synchronized by code_removed map provides collection views instead of direct support for iteration via enumeration objects. collection views greatly enhance the expressiveness of the interface, as discussed later in this section. map allows you to iterate over keys, values, or key-value pairs; hashtable does not provide the third option. map provides a safe way to remove entries in the midst of iteration; hashtable did not. finally, map fixes a minor deficiency in the hashtable interface. hashtable has a method called contains, which returns true if the hashtable contains a given value. given its name, you'd expect this method to return true if the hashtable contained a given key, because the key is the primary access mechanism for a hashtable. the map interface eliminates this source of confusion by renaming the method containsvalue. also, this improves the interface's consistency \u2014 containsvalue parallels containskey. the map interface", "the most scarce resource is often programmer's time and attention. this code consumes more of that resource than alternatives.", "short version: using three dots: code_removed (based on @vitaliifedorenko's answer)", "@dhfromkorea nope. totally different. in practice 'serialized' is the process of taking an object, which may be stored in various places memory, and 'serializing' it into a single dimensional array of bytes. this is done for storage or transmission.", "i think that none of the above answers explain to you the real difference between a nested class and a static nested class in term of application design: overview a nested class could be nonstatic or static and in each case is a class defined within another class. a nested class should exist only to serve is enclosing class, if a nested class is useful by other classes (not only the enclosing), should be declared as a top level class. difference nonstatic nested class: is implicitly associated with the enclosing instance of the containing class, this means that it is possible to invoke methods and access variables of the enclosing instance. one common use of a nonstatic nested class is to define an adapter class. static nested class: can't access enclosing class instance and invoke methods on it, so should be used when the nested class doesn't require access to an instance of the enclosing class. a common use of static nested class is to implement a components of the outer object. conclusion so the main difference between the two from a design standpoint is: nonstatic nested class can access instance of the container class, while static can't.", "i think that latest/release is very important for plugins which provide deploy functionality. for example we use plugin which deploy new version of artifacts to the our servers. if servers will change we release new version of plugin and all projects that use this plugin must by manually updated to use new version of deploy plugin.", "i think that composition being philosophically purer is an argument for extending an object. since this answer is saying implementing runnable is preferred to extending thread, perhaps composition has nothing to do with the rationale.", "you are just modifying the check. no real benefit is received. even though we put extra efforts to implement the suggested pattern, the code is still not clean.", "or code_removed:-)", "suppose a thread a is in a synchronized block, and while it is in the cpu from this thread is taken and given to another thread b. now in which state thread a will go, will the other threads waiting on this synchronized block come inside now?", "interesting idea. i would like to point out that this does not transpose to scala which has a meaningful tostring for arrays.", "it's a black mark against java that some people think that code_removed is more readable than code_removed", "sessions - what chris thompson said. instantiation - a servlet is instantiated when the container receives the first request mapped to the servlet (unless the servlet is configured to load on startup with the code_removed element in code_removed). the same instance is used to serve subsequent requests.", "please clear the above question, char and string both are different...!", "@brady: yes, i think so. that works fine for me, at least. as a developer, i essentially ignore the jre. if there are special cases where you specifically want the jre, i'm not aware of them.", "this blogpost should be useful - code for producing alphanumeric strings: rationaljava.com/2015/06/\u2026", "after having really long discussion with cloudbees guys about properly maven packaging of such kind of jars, they made an interesting good proposal for a solution: creation of a fake maven project which attaches a pre-existing jar as a primary artifact, running into belonged pom install:install-file execution. here is an example of such kinf of pom: code_removed but in order to implement it, existing project structure should be changed. first, you should have in mind that for each such kind of jar there should be created different fake maven project (module). and there should be created a parent maven project including all sub-modules which are: all jar wrappers and existing main project. the structure could be: root project (this contains the parent pom file includes all sub-modules with module xml element) (pom packaging) jar 1 wrapper maven child project (pom packaging) jar 2 wrapper maven child project (pom packaging) main existing maven child project (war, jar, ear.... packaging) when parent running via mvn:install or mvn:packaging is forced and sub-modules will be executed. that could be concerned as a minus here, since project structure should be changed, but offers a non static solution at the end", "code_removed", "java does not have a goto feature like there is in c++. but still, code_removed is a reserved keyword in java. they might implement it in the future. for your question, the answer is that there is something called label in java to which you can apply a code_removed and code_removed statement. find the code below: code_removed", "@erickson any specific reason for choosing 130 bits in base 32? why not use 128 bits in base 16 (hex)? wouldn't it be similar in terms of security?", "try downloading and installing the zipped version rather than the.exe installer.", "@narendrapathai omg! hope they fix this before the official release.", "@nickbreen i've updated the link thanks", "666 upvotes doesn't seem to be coincidence", "you cannot do this, because of a conflicting dependency as explained in original question, almost in linux. removing old adt plugin by hand is not recommended, as explained here. if you search for adt plugin updated, eclipse says that there is none, so you can not update adt normal way. google's adt plugin update is broken! for me what worked is install adt bundle in new place and reinstall all tools again. this method needs some work, but it worked for me. i explained it in my answer, how to do it carefully, saving your devoloping keys, settings and projects.", "you should maybe update the last paragraph in your answer to note that joda-time is not so relevant if you use java 8 and don't need to be backwards compatible.", "it seems, that it does not work anymore:(", "@suboptimal if user setted -duser.dir, propable he want to run this in custom working directory.", "ran a loop of 100k with bigdecimal (took 225 ms) and math.round (2 ms) way and here is the timing...time taken: 225 milli seconds to convert using to: 9232.13 time taken: 2 milli seconds to convert to: 9232.13 techiesinfo.com", "i hope you want to access the current directory including the package i.e. if your java program is in code_removed and you want to print until code_removed then you can try the following code: code_removed note: this code is only tested in windows with oracle jre.", "code_removed", "nice answer. a small thing though: for code_removed inserting at back is not always o(1). maybe most of the times. but when it needs to reallocate the internal array a full copy will occur and a cost of o(n) will be incurred.", "it's not just android: docs.oracle.com/javaee/7/api/javax/json/jsonobject.html", "can't we just use a treemap instead? did i miss anything?", "could you please add a code/link for code_removed we are getting code_removed exception.", "code_removed? encoding???", "imho, this is a implementation of null object pattern with a yourself implementation of optional (contract). how it behaves on persistence class class? i do not see applicable in that case.", "@eljenso - the reason i generally favour the subclass syntax for this is that it puts the initialisation inline, where it belongs. a second-best choice is to call a static method that returns the initialised map. but i'm afraid i'd look at your code and have to spend a few seconds working out where my_map comes from, and that's time that i don't want to have to waste. any improvement to readability is a bonus, and the performance consequences are minimal, so it seems like the best option to me.", "take a look to code_removed for a standard java api that serializes to xml too (although not precisely for deep copy purposes).", "had to downvote this one for all the unnecessary list object creation.", "a small addition to the create-drop option. if this option is used it does not drop the whole schema instead it drops the tables whose mappings are available while running this. for example if a database with schema s has a, b, c tables and java code has mappings for a and b only then hibernate will not drop the table c.", "@immibis 4 years and a month late, but fixed for ya.;d", "code_removed this annotation is used on classes to indicate a spring component.it marks the java class as a bean or component so that the component-scanning mechanism of spring can add it into the application context. code_removed this annotation is used on java classes that directly access the database.it works as a marker for any class that fulfills the role of repository or data access object.this annotation has an automatic translation feature. for example, when an exception occurs in the @repository, there is a handler for that exception and there is no need to add a try-catch block. code_removed it marks a java class that performs some service, such as executing business logic, performing calculations, and calling external apis. this annotation is a specialized form of the code_removed annotation intended to be used in the service layer. code_removed this annotation is used to indicate the class is a spring controller.", "@billr - not at all like propaganda or being politically correct... computer language design has very precise meanings for pass-by-value and pass-by-reference. if you cannot change the actual thing passed (the pointer to the dog, in these examples) it's pass-by-value. by your logic, c has pass-by-reference semantics (which it more obviously does not)", "linkedlist: insert in middle o(1) - is wrong! i found out that even insertion into 1/10th position of the linkedlist size is slower than inserting an element into 1/10th position of an arraylist. and even worse: the end of collection. inserting into last positions (not the very last) of arraylist is faster then into last positions (not the very last) of linkedlist", "@synderesis i added a paragraph. is that what you were asking?", "for your code to work you need to add itemlayoutview.setonclicklistener(this); in the viewholder constructor.", "remember to put this in your pom so it doesn't change back when updated. <properties> <maven.compiler.source>1.8</maven.compiler.source> <maven.compiler.target>1.8</maven.compiler.target> </properties>", "new code_removed and asynctask solutions have been explained already. code_removed should ideally be used for short operations. normal code_removed is not preferable for android. have a look at alternate solution using handlerthread and handler handlerthread handy class for starting a new thread that has a looper. the looper can then be used to create handler classes. note that code_removed must still be called. handler: a handler allows you to send and process message and runnable objects associated with a thread's messagequeue. each handler instance is associated with a single thread and that thread's message queue. when you create a new handler, it is bound to the thread / message queue of the thread that is creating it -- from that point on, it will deliver messages and runnables to that message queue and execute them as they come out of the message queue. solution: create code_removed call code_removed on code_removed create code_removed by getting code_removed from code_removed embed your network operation related code in code_removed object submit code_removed task to code_removed sample code snippet, which address code_removed code_removed pros of using this approach: creating new code_removed for each network operation is expensive. the code_removed will be destroyed and re-created for next network operations. but with code_removed and code_removed approach, you can submit many network operations (as runnable tasks) to single code_removed by using code_removed.", "with a java 8 collector, this can be done with the following code: code_removed also, the simplest solution in java 8: code_removed or code_removed", "by the way, 8 years later i'd have to say i now find myself using annotations to do nearly all the things that i used to use initialized string arrays for.", "@holger, you are correct i conflated constant pool and string pool, but it is also false that permgen space only applied to interned strings. prior to 1.7, both the constant_pool and the string_pool resided in permgen space. that means the only class of strings that were allocated to the heap were as you said, code_removed or code_removed i managed applications with lots of string constants, and we had lots of permgen creep as a result. until 1.7.", "i had the same situation but any of above tips didn't help:) in our environment we had tomcat running as a service on windows. we installed java 1.7 and set up java_home on this version. off course the sources were built on java 1.7. nevertheless the tomcat said that it use previous version of jvm. after a deep analized turn out that the tomcat service installed on windows still keeping the old value for java_home pointing to java 1.6. after installing new tomcat service everything were resolved. so the conclusion is: when you change java version and tomcat running as a service, you have to reinstall tomcat service.", "@deanhiller notice that code_removed is code_removed, and therefore cannot be mocked. instead try code_removed-ing an instance that does what you need. there should be no need to mock code_removed.", "here you also find info how to automatically generate the artifact from your jar file: devcenter.heroku.com/articles/local-maven-dependencies", "the code_removed javadoc describes what they are: java.sun.com/javase/6/docs/api/java/lang/thread.html", "i have a string like this: code_removed i want to remove the whitespaces in the string. i tried code_removed but this removes only whitespaces before and after the whole string. i also tried code_removed but then the code_removed also gets removed. how can i achieve a string with: code_removed", "code_removed is a contradiction in terms.", "first, it's kind of weird, to see you run code_removed and not code_removed second, to make a jar executable... you need to jar a file called meta-inf/manifest.mf the file itself should have (at least) this one liner: code_removed where code_removed is the class holding the public static void main(string[] args) entry point. note that there are several ways to get this done either with the cli, maven, ant or gradle: for cli, the following command will do: (tks @dvvrt) code_removed for maven, something like the following snippet should do the trick. note that this is only the plugin definition, not the full pom.xml: code_removed (pick a code_removed appropriate to your project.) for ant, the snippet below should help: code_removed credits michael niemand - for gradle: code_removed", "i guess you want to convert the values contained in the code_removed to a code_removed? easiest is to call the code_removed method of the code_removed interface. this will return the code_removed of value objects contained in the code_removed. note that this code_removed is backed by the code_removed object and any changes to the code_removed object will reflect here. so if you want a separate copy not bound to your code_removed object, simply create a new code_removed object like an code_removed passing the value code_removed as below. code_removed", "@lealo: the size is irrelevant to the point here. yes, code_removed implements code_removed, but that was a design mistake imo.", "why is code_removed convoluted?", "thanks for that solution. ordering the library also worked as well.", "what is the main difference between code_removed and code_removed? is there any performance issues when deciding on any one of these?", "good answer. one suggestion for minor improvement: both gson and jackson also support use of json tree representation (for jackson these are code_removeds, gson has something similar). might be good to show snippets, since that is similar to the only way org.json offers.", "i wanted to clarify if i understand this correctly: code_removed -> is a reference comparison, i.e. both objects point to the same memory location code_removed -> evaluates to the comparison of values in the objects am i correct in my understanding?", "try these 4 statements.. as per the point recalled by fred, it is not recommended to append a code_removed with code_removed operator since every time a new code_removed is appended to the existing code_removed creating a new code_removed object again and assigning its address to code_removed while the old code_removed object becomes garbage. code_removed not recommended, but this is also a way code_removed", "do we still need to add it as a dependency?", "don't forget to add permissions to your manifest file if you're gonna be downloading stuff from the internet! code_removed", "hashmap:- it is a class available inside java.util package and it is used to store the element in key and value format. hashtable:-it is a legacy class which is being recognized inside collection framework", "code_removed is faster executing too (see bugs.sun.com/bugdatabase/view_bug.do?bug_id=6375302 )", "@mysticial: thanks for such a nice insight. after going through this came to my mind couple of questions: code_removed this sounds more of artificial intelligence. so is it safe to say modern compilers are equipped with ai algorithms for branch prediction? code_removed that sounds to me of multiple threads. does cpu internally breaks code blocks into threads? (one your comment also mentions code_removed). if yes, what role does compiler play?", "if you set the serialversionuid always to the same value the generator would produce, you don't really need it at all. after all, its raison d'\u00eatre is to stay same after changes, when the class is still compatible.", "yes, you're right. and that's why i/o in java still sucks. the attempt of making it generic is always stopped at 60-70% and methods like code_removed keep on ending up in the wrong places.", "hi frdz its not working for me..error:: android.os.networkonmainthreadexception", "@balusc: object.tostring() can hardly be considered to be a factory method; the class relationship is right but the intention is wrong. it's hard to draw the line of course, but any method creating and returning another object can't be called a factory method. maybe you can say that purpose of tostring isn't to create a string but the return info about the receiver, therefore it is not a factory method.", "real world or not, yegor is completely right. if what you have is truly a \"struct\" and you don't need to write any code that references it by name, put it in a hashtable or other data structure. if you do need to write code for it then put it as a member of a class and put the code that manipulates that variable in the same class and omit the setter & getter. ps. although i mostly share yegor's viewpoint, i have come to believe that annotated beans without code are somewhat useful data structures--also getters are sometimes necessary, setters shouldn't ever exist.", "static initialization is inherently synchronized, so there's absolutely no reason to use code_removed here, where the map is never modified after initialization. hence why even e.g. the example in the jls itself uses a regular code_removed.", "is it save to keep the getinstance() as a static variable in some converter class? i tried to look it up in the javadoc but couldn't find anything. kinda hard to know if there will be problems in concurrent usage?", "@jtahlborn: rather than having checked-ness be a characteristic of an exception type, it should be a characteristic of catch and throw sites. if a call to code_removed is wrapped in a code_removed, the catch should only grab a code_removed which code_removed either threw or was expecting to \"pass through\". it should not catch a code_removed which occurred (contrary to code_removed's expectation) in a method code_removed called.", "unfortunately, the time zone formats available to simpledateformat (java 6 and earlier) are not iso 8601 compliant. simpledateformat understands time zone strings like \"gmt+01:00\" or \"+0100\", the latter according to rfc # 822. even if java 7 added support for time zone descriptors according to iso 8601, simpledateformat is still not able to properly parse a complete date string, as it has no support for optional parts. reformatting your input string using regexp is certainly one possibility, but the replacement rules are not as simple as in your question: some time zones are not full hours off utc, so the string does not necessarily end with \":00\". iso8601 allows only the number of hours to be included in the time zone, so \"+01\" is equivalent to \"+01:00\" iso8601 allows the usage of \"z\" to indicate utc instead of \"+00:00\". the easier solution is possibly to use the data type converter in jaxb, since jaxb must be able to parse iso8601 date string according to the xml schema specification. code_removed will give you a code_removed object and you can simply use gettime() on it, if you need a code_removed object. you could probably use joda-time as well, but i don't know why you should bother with that.", "there is no \"module\" in project settings in the latest version 12.1.4", "neither. i want to test the behaviour of the class. what is important, is that if i try to retrieve something that isn't there, i get an exception. the fact that the data structure is code_removed that responds to code_removed is irrelevant. if i chose in the future to move to a primitive array, i would then have to change this test implementation. the data structure should be hidden, so that the test can focus on the behaviour of the class.", "no, it would not be what happens when you throw such an exception. an uncaught exception will terminate a single thread, it will not exit the jvm, in some contexts system.exit itself will even cause a securityexception - not every piece of code is allowed to shutdown a program.", "since technologies appear everyday, the answer will change in the time. i took a look at lambdaj and seems very interesting. you can try solving these tasks with lambdaj. you can find it here: here you have an example: sort iterative code_removed sort with lambda code_removed of course, having this kind of beauty impacts in the performance (an average of 2 times), but can you find a more readable code?", "you can use code_removed api or code_removed property. but if you want your own constant, you'll need to define it yourself.", "@eugenetskhovrebov your way is the cleanest for inlining. the others require casting or declaring. i suggest adding it as its own answer to help highlight it, and give you some rep.", "code_removed", "@max4ever most android apps are minimalized by proguard, putting only the classes and functions you need into your app. that makes it equal to roll your own, or copy the source of the apache thing. and whoever doesn't use that minimalization doesn't need to complain about 700kb or 78kb:)", "sorry i did not see that you had binding in your answer as well i feel that your answer is also very elegant.", "that class is now deprecated, the new one is stddateformat. otherwise it works the same.", "guava since v16 provides alternative short autoclosing solution for files and classpath resources.", "yep, that is way i wrote about being careful and gave a link to the description.", "check out daniel d\u00edaz answer,you need to completely uninstall the previous update and install the fresh one. check out this link", "just write a helper function that does that for you", "code_removed jsp have it's own life cycle jsp_init() jsp_service() jsp_destroy after first request jsp convert to.java file. there is three type of tag we are using 1.)scriptless code_removed here developer can declare all those things which developer want to take the data 2.)expression tag code_removed here developer can use some print related data 3.)declaration code_removed here developer can declare some method related data. code_removed servlet have it's own life cycle. code_removed after first request container will read the data from web.xml file then after out welcome fill will be display. now onward after performing action it will search the url and after this process it will search the particular servlet there it self. service operation will perform. code_removed jsf have it's own ui and it's life cycle can perform in six way, code_removed for ui here for table here we are using panel grid and there is different faces for this that is. code_removed", "well, you could also make use of @nullable annotation to make it \"readable\";-)", "@ruchirbaronia, \"world\" = all code in the application, regardless where it is.", "if hardware/os behaves incorrectly", "reverse engineering does not necessarily mean decompiling. in fact, proguard-obfuscated jars won't decompile correctly.", "your expensive way does not work for me! i get cannot find symbol for method biginteger(int,java.security.securerandom)", "nulls should be avoided in high-level code. tony hoare, who invented null references, calls them \"a billion-dollar mistake\". take a look here for some ideas.", "i'd just had this happen to me with java 7 and a web application containing 2001670 lines of java code, of which i wrote about 5. \"you should also look at your code\" is not so easy in such cases.", "@cdunn2001 'static inner' is a contradiction in terms.", "\"you can turn this off...\" but the op most likely should not do this.", "the op indicated that they want a reference in code to the stack trace, not to print it out.", "you forgot to specify code_removed", "@isun nothing as such i was facing the same problem..i solved it this way and shared it.it can be done better obviously but opinions are open here and so is mine..thanks neways", "code_removed is converted by the compiler to code_removed - valid for string literals or, more precisely, strings that are the values of constant expressions - so concatwithplusoperator is not doing any concatenation, check bytecode. try it with code_removed or so...", "@amphibient: no, the snapshot is not necessarily more stable: it is just the latest build. the snapshot precedes the actual release, it does not come after it. indeed, version numbers typically do not refer to branches.", "it worked perfectly on a mac.", "use apache string util class is better to avoid nullpointerexception code_removed output code_removed", "great answer (+1). my only criticism is that it took me several reads to figure out how \"validation\" in the final paragraph differed from \"validation\" in the first few (which you threw out in the latter case but promoted in the former); adjusting the wording might help in that regard.", "since this is deprecated in 1.9, use mapper.getserializationconfig().withserializationinclusion(j\u200c\u200bsonserialize.inclusi\u200c\u200bon.non_null);", "any idea about how to create executable jar without including external dependencies(library files)?", "facing this issue(issues.apache.org/jira/browse/massembly-742)", "beside the above good arguments, i will add that lot of people today see code_removed as an obsolete remainder of procedural past of java (back to c times). i don't fully share this opinion, i think code_removed can have its usefulness in some cases, at least because of its speed, and anyway it is better than some series of cascading numerical code_removed i saw in some code... but indeed, it is worth looking at the case where you need a switch, and see if it cannot be replaced by something more oo. for example enums in java 1.5+, perhaps hashtable or some other collection (sometime i regret we don't have (anonymous) functions as first class citizen, as in lua \u2014 which doesn't have switch \u2014 or javascript) or even polymorphism.", "@mlprogrammer-cim i think more details about implementing rxjava approach will help a lot more people, please consider adding full sample or link to refer more on this", "derived from denis tulskiy's answer, this method generates the seed. code_removed", "this type of errors occur basically due to use of different versions of java with different version of eclipse. suppose you are installing the 64-bit jdk on your system. then make sure you install the 64-bit versioned eclipse with it. and if you are installing the 32-bit jdk on your system then make sure you install 32-bit versioned eclipse with it. i had the similar problem. i have installed the 32-bit jdk and was trying to use 64-bit eclipse. but when i installed the 64-bit jdk on my system then eclipse started working without any problem. it is advised to better install the 32-bit version of java along with the 32-bit version eclipse on a system with a 32-bit configuration and similarly for 64-bit systems. this helps to increase performance of the system.", "be very careful when using this method (or any rounding of floating points). it fails for something as simple as 265.335. the intermediate result of 265.335 * 100 (precision of 2 digits) is 26533.499999999996. this means it gets rounded down to 265.33. there simply are inherent problems when converting from floating point numbers to real decimal numbers. see ejp's answer here at stackoverflow.com/a/12684082/144578", "from java 6 you can use code_removed. docs.oracle.com/javase/6/docs/api/java/util/arraydeque.html", "have made this answer with an updated approach with jdk-11 introducing a new an equally performant api to code_removed and similar in syntax to code_removed.", "you only need 45 lines of code, and implementing 7 interfaces to do it.", "if you want speed, given that your integers are of finite size, i suspect that the quickest way would involve (a) partitioning the parameters by size (e.g. into categories by largest bit set), then checking the value against an array of perfect squares within that range.", "i am wondering when to use static methods? say if i have a class with a few getters and setters, a method or two, and i want those methods only to be invokable on an instance object of the class. does this mean i should use a static method? e.g code_removed or code_removed (is this the static way?) i'm rather confused!", "initially i was misled by this article which favours code_removed. later i have been realized that code_removed is going to stay from this article as per the google blog: apache http client has fewer bugs on eclair and froyo. it is the best choice for these releases. for gingerbread, is the best choice. its simple api and small size makes it great fit for android. transparent compression and response caching reduce network use, improve speed and save battery. new applications should use it is where we will be spending our energy going forward. after reading this article and some other stack over flow questions, i am convinced that code_removed is going to stay for longer durations. some of the se questions favouring code_removed: on android, make a post request with url encoded form data without using urlencodedformentity works in java project, not in android", "did you really stumble upon that exact situation in a real-life scenario or was this question only meant to be a puzzler -- just for the fun of it?", "this error means you're trying to load a java \"class\" file that was compiled with a newer version of java than you have installed. for example, your code_removed file could have been compiled for jdk 7, and you're trying to run it with jdk 6. so the solution is to either: upgrade your java runtime or recompile the class if you have the source, using your local java compiler (if you have one). javac filename.java for developers, this can happen if another developer checks in a.class file, and they've got a newer version of java than you have!", "@pacerier: the author of that post is simply wrong. he neglects some other usage scenarios like event subscription, his second point is nonsensical, and his third point assumes that a programmer can do things that may not be possible. his first point is reasonable, but ties in directly with what i said. if code will frequently have to build and compare large immutable objects, for example, the building part will often be cheaper if code creates new objects without regard for whether they already exist, but a comparison between an object and itself (identical references) will be...", "hashtable is a legacy class in the jdk that shouldn't be used anymore. replace usages of it with concurrenthashmap. if you don't require thread safety, use hashmap which isn't threadsafe but faster and uses less memory.", "one possible solution: code_removed", "on the download page of eclipse, it should be written \"jre 32 bits\" or \"jre 64 bits\" and not \"windows 32 bits\" or \"windows 64 bits\". be sure to use the correct version compatible with your jde, as answered previously.", "shouldnt 4 be an instance method? no need to make it static no?", "i tried that but sometimes it is only 31 long.", "the accepted answer is much more delegate thanks for you response @idelvall", "so this is how it was implemented honoring the license. this is awesome:-)", "not sure if this is what you want, but this takes about 1 millisecond. (javascript, not java.) code_removed", "just use stringutils from apache-commons. its a static method called stringutils.deletewhitespace.", "i also disagree with closing as \"not constructive\". fortunately, this could well be closed as duplicate. good answers e.g. in how to create a string from the contents of a file?, what is simplest way to read a file into string?, what are the simplest classes for reading files?", "ok, i now this has been technically answered a million times but i have to say this because this is an un-ending discussion with java programmers. sorry but i disagree will almost all of above. the reason we have to be testing for null in java is because must java programmers don\u2019t know how to handle memory. i say this because i have a long experience programming in c++ and we don\u2019t do this. in other words, you don\u2019t need to. and note that, in java, if you hit a dangling pointer you get a normal exception; in c++ this exception normally is not caught and terminates the program. don\u2019t want to do this? then follow some simple rules ala c/c++. don\u2019t instantiate things so easily, think that every \"new\" can get you in lots of trouble and follow these simple rules. a class shall access memory in only 3 ways -> it can \"have\" class members, and they will follow these rules: all \"has\" members are created \"new\" in the constructor. you will close /de allocate in destructor or equivalent close() function in java for that same class and in no other. this means that you need to have in mind (just like java does) who is the owner or parent of each resource and respect that ownership. an object is only deleted by the class who created it. also -> some members will be \"used\" but not own or \"have\". this are \"own\" in another class and passed as arguments to the constructor. since these are owned by another class, we will never delete or close this, only the parent can. a method in a class can also instantiate local objects for internal use which will never pass out side of the class, or they should have been normal \"has\" objects. finally for all this to work, you need to have a disciplined design with classes in hierarchy form and making no cycles. under this design, and following the above rules, there is no way that a child class in a hierarchy design will ever access a pointer which was destroyed, because that means that a parent was destroyed before a child, which the hierarchical acyclic design will not allow it. finally, also remember when starting your system you should build from top to bottom of the hierarchy and destroy bottom to top. you will never have a null pointer anywhere, or someone is violating the rules.", "you can see my answer. how to convert list to map using generics and inversion of control: stackoverflow.com/a/51334242/2590960", "world is within your project. i should explain further. libraries are within your project, and if you're creating a library, they would expose these public classes and methods as well. so, saying just within your project is a bit off. \"everything that uses it\" is a better description.", "in below showtoast() method you have to pass another parameter for context or application context by doing so you can try it. code_removed", "@holger: non-ascii in identifiers is another can of worms, since it is not only non-ascii alphanumeric, but it includes too much, including control codes: stackoverflow.com/questions/4838507/\u2026", "apache should invent a \"common\" annotation and a tool that can convert it to any other annotation. the solution to the problem of too many standards is to invent a new standard.", "just did something similar in my project. use filewriter will simplify part of your job. and here you can find nice tutorial. code_removed", "this is where the \"java\" system preferences panel seems to install it.", "the principal is the random class constructed with the same seed will generate the same pattern of numbers every time.", "to achieve this we can use this formatter: code_removed or: code_removed use this method to get always two decimals: code_removed defining this values: code_removed using the method we can get this results: code_removed demo online.", "code_removed", "subtle point here... there is an implicit typecast for code_removed when code_removed is a double and code_removed is an int. java always converts an integer into a double when there is an operation between them. to clarify code_removed where code_removed is an integer and code_removed is a double can be described as code_removed see: this description of implicit casting you might want to typecast code_removed to code_removed in this case for clarity.", "there are following way to print array code_removed", "@lealo: the size is irrelevant to the point here. yes, code_removed implements code_removed, but that was a design mistake imo.", "is it like a fine grain reverse proxy?", "@coladict my bad", "@randers00 true. but still the answer is valid and the format really doesn't matter (atleast to me)", "answer need to be update. java 8 will is supported as of android studio 3.0 and gradle plugin 3.0.", "this will give you the path of your current working directory: code_removed and this will give you the path to a file called \"foo.txt\" in the working directory: code_removed edit: to obtain an absolute path of current directory from the root of the filesystem: code_removed", "make sure you grab the complete bundle from android developer site. that worked for me", "@obe: given hierarchical memory structures, it's impossible to say what the expense of a cache miss will be. it might miss in l1 and be resolved in slower l2, or miss in l3 and be resolved in system memory. however, unless for some bizarre reason this cache miss causes memory in a non-resident page to be loaded from disk, you have a good point... memory hasn't had access time in the range of milliseconds in about 25-30 years;)", "another solution (only 35 31 characters): code_removed", "darnit. fix was wrong. re-fixed.", "excellent example of the ways the code_removed construct's type can surprise you. i was thinking as i read, \"it's not impossible --- just use a ternary oper... oh.\".", "can anyone comment how good is this way of deleting an element from a list if my list has a million elements and there are lots of possibilities of running out of java heap space?", "yes, if the class is in the default package, then just specify the class name without a package name. however, it's good practice to always put your code in a package.", "these files mentioned were created or changed on my pc with the last update from oracle - to make it not work! that is really not like it should be... the 32 bit update just silently removed the 64 bit installation", "instead of the do_nothing action i would probably create a hasaction(userinput) method, returning a true or false if there is a valid action for that userinput. then findaction would return the action or throw an exception actionnotfoundexception", "yes, if you call threada call, then not need to call the start method and run method is call after call the threada class only. but if use the threadb call then need to necessary the start thread for call run method. if you have any more help, reply me.", "@luke just copy paste the block in one of your involved classes.", "you can add an instance of a subclass of integer this is wrong: integer is a final class", "code_removed", "i had the same problem. a lot of the solutions mentioned here didn't give me the whole picture, so i'll try to give you a summary of how to pack jar files from the command line. if you want to have your code_removed files in packages, add the package in the beginning of the code_removed. test.java code_removed to compile your code with your code_removed files ending up with the structure given by the package name use: code_removed the code_removed makes the compiler create the directory structure you want. when packaging the code_removed file, you need to instruct the jar routine on how to pack it. here we use the option set code_removed. this is to keep the package structure (option code_removed), specify the entry point so that the manifest file contains meaningful information (option code_removed). option code_removed lets you specify the file name, option code_removed creates an archive and option code_removed sets the output to verbose. the important things to note here are code_removed and code_removed. then comes the name of the jar we want code_removed. then comes the entry point. and then comes code_removed to get the class files from that folder, preserving the folder structure. code_removed check your code_removed file in a zip program. it should have the following structure test.jar code_removed the manifest.mf should contain the following code_removed if you edit your manifest by hand be sure to keep the newline at the end otherwise java doesn't recognize it. execute your code_removed file with code_removed", "as i understand it, it says android n is supporting java 8, so it means apis < android n doesn't have it. is this correct?", "update: i just confirmed that doing this is way faster than using decimalformat. i looped using decimalformat 200 times, and this method. decimalformat took 14ms to complete the 200 loops, this method took less than 1ms. as i suspected, this is faster. if you get paid by the clock cycle, this is what you should be doing. i'm surprised chris cudmore would even say what he said to be honest. allocating objects is always more expensive than casting primitives and using static methods (math.round() as opposed to decimalformat.format()).", "jsf is a web application that is used to simplify development integration of web based user interfaces; jsp is a java based technology used specifically in order to help software developers create dynamic web pages. jsf contains multiple core features, including, but not limited to, managed beans, a template based component system, and two xml based tag libraries; jsp must be compiled in java bytecode in order to function properly.", "generally code_removed is used for code_removed comparison, where you want to verify if two code_removed have an identical value. code_removed for reference comparison (are the two code_removed the same code_removed on the heap) & to check if the code_removed is null. it is also used to compare the values of primitive types.", "unlike some other languages, java does not allow you to choose pass-by-value or pass by-reference\u2014all arguments are passed by value. a method call can pass two types of values to a method\u2014copies of primitive values (e.g., values of int and double) and copies of references to objects. when a method modifies a primitive-type parameter, changes to the parameter have no effect on the original argument value in the calling method. when it comes to objects, objects themselves cannot be passed to methods. so we pass address of the object which is held in reference variable. how java creates and stores objects. when we create an object we store the object\u2019s adress in a reference variable. \u201cscanner input\u201d is the type and reference variable, \u201c=\u201d is the assignment operator, \u201cnew\u201d asks for required amount of space from the system. the constructor to the right of keyword new which creates the object is called implicitly by the keyword new. address of the created object(result of right variable, which is an expression) is assigned to the left variable (which is a reference variable with a name and a type specified) using the assign operator. \u201cnew account()\u201d is called \u201cclass instance creation expression\u201d. although an object\u2019s reference is passed by value, a method can still interact with the referenced object by calling its public methods using the copy of the object\u2019s reference. since the reference stored in the parameter is a copy of the reference that was passed as an argument, the parameter in the called method and the argument in the calling method refer to the same object in memory. passing references to arrays, instead of the array objects themselves, makes sense for performance reasons. because everything in java is passed by value, if array objects were passed, a copy of each element would be passed. for large arrays, this would waste time and consume considerable storage for the copies of the elements. in the image below you can see we have two reference variables(these are called pointers in c/c++. and i think that term makes it easier to understand this feature.) in the main method. primitive and reference variables are kept in stack memory(left side in images below). these reference variables \"point\" (as c/c++ programmers call it) or reference to a and b arrays which are objects(values these reference variables hold are addresses of objects) in heap memory(right side in images below). if we pass the value of array1 reference variable as an argument to the reversearray method, a reference variable is created in the method and that reference variable starts pointing to the same array(a). code_removed ... code_removed so, if we say code_removed in reversearray method, it will make a change in array a. we have another reference variable in reversearray method(array2) that points to an array c. if we were to say code_removed in reversearray method, then the reference variable array1 in method reversearray would stop pointing to array a and start pointing to array c (dotted line in second image). if we return value of reference variable array2 as the return value of method reversearray and assign this value to reference variable array1 in main method, array1 in main will start pointing to array c. you can assign value of array2 in main to array1 too. array1 would start pointing to b.", "+1 for mentioning that this is purely a jls restriction. at the bytecode level, you can do other stuff before calling a constructor.", "permissions code_removed using code_removed", "a clean reinstall of the java jdk did the trick in my case. i am running eclipse 4.4 (luna) like a charm now.", "\"the typical reason to do so is to iterate over maps\". really?", "code_removed is designed for caches. when it is found that a code_removed references an otherwise unreachable object, then it will get cleared immediately. code_removed may be left as is. typically there is some algorithm relating to the amount of free memory and the time last used to determine whether it should be cleared. the current sun algorithm is to clear the reference if it has not been used in as many seconds as there are megabytes of memory free on the java heap (configurable, server hotspot checks against maximum possible heap as set by code_removed). code_removeds will be cleared before code_removed is thrown, unless otherwise reachable.", "if you're concerned about null safety, and this works for string constants as well, put the value to be compared against on the left hand side: \"blah\".equals(variablepossiblynull) and someenum.constant.equals(enumreferencepossiblynull) will both work, but only.equals works for both an enum constant and a string. if you're really paranoid about it, check out objectutils.equals(ob1, ob2) from apache commons lang, that will take care of all cases!", "link works for me", "this one gives the exact md5 as you get from mysql's md5 function or php's md5 functions etc. this is the one i use (you can change according to your needs) code_removed", "@mikerodent i don't have annotation and \"unchecked generic type operation\" is set to warning. removing types from hashmap, causes warning to appear.", "there is another option that hasn't been explored here: declaring xerces dependencies in maven as optional: code_removed basically what this does is to force all dependents to declare their version of xerces or their project won't compile. if they want to override this dependency, they are welcome to do so, but then they will own the potential problem. this creates a strong incentive for downstream projects to: make an active decision. do they go with the same version of xerces or use something else? actually test their parsing (e.g. through unit testing) and classloading as well as not to clutter up their classpath. not all developers keep track of newly introduced dependencies (e.g. with code_removed). this approach will immediately bring the matter to their attention. it works quite well at our organization. before its introduction, we used to live in the same hell the op is describing.", "it was a bug in a test program i wrote.;)", "i'd say default visibility is neither applicable to local variables.", "i guess its not stated, but it is implied. you are a mathematician:-), aren't you?", "this is another answer pointing out the largely semantic nature of the argument. the definition of reference provided in this answer would make java \"pass-by-reference.\" the author essentially admits as much in the last paragraph by stating that it is \"indistinguishable in practice\" from \"pass-by-reference.\" i doubt op is asking because of a desire to understand the java implementation but rather to understand how to correctly use java. if it were indistinguishable in practice, then there would be no point in caring and even thinking about it would be a waste of time.", "careful with the code_removed flag. it might not do what you expect due to mng-4142.", "yes, stringbuilder doesn't need to re-create the string object over and over.", "a!= b? c: a seems more intuitive.", "actually, doing this for anything longer than an hour is not a good idea since the results could be wrong/unintuitive when daylight savings time (days of 23 or 24 hours) or leap years are involved. if i read \"x will happen in 1 year/month\", i'd expect it to be the same date and time.", "you need to use the code_removed method in code_removed. create a new object from that class and operate this method on him and save it to a string. bufferreader javadoc", "@peterlawrey the situation with strings is different - the alphabet size is typically smaller (char vs int)", "code_removed", "when the code hits the bytecode, it is an array. everything else is syntax supported just by the compiler.", "@timohuovinen how is that any different than a user in java assuming that code_removed \"just sets the variable without anything else happening\"? if it's a public methods, then it's a public method. if you use it to achieve some side-effect, and it is public, then you had better be able to count on everything working as if only that intended side effect happened (with all other implementation details and other side effects, resource use, whatever, hidden from the user's concerns). this is absolutely no different with python. python's syntax to achieve the effect is just simpler.", "same demonstrated in a sample app and in emulator youtube.com/watch?v=lclo7q2uhos", "you can use code_removed api or code_removed property. but if you want your own constant, you'll need to define it yourself.", "stackoverflow.com/questions/36951414/\u2026", ">>>> arraylist add --> o(1) <- not tru. in some cases arraylist will have to grow to add one more element", "i wonder the purpose of code_removed in code_removed. they could use code_removed or code_removed instead!", "in java private prevents overrides, protected doesn't (but also isn't totally public), so they all do have their uses.", "what if you want to remove an element other than the element returned in the current iteration?", "is it okay if i use this approach to have touch feedback on click of an item.. view.setcolor(some_color) and then remove this color in scheduler after x seconds...?", "@erickson any specific reason for choosing 130 bits in base 32? why not use 128 bits in base 16 (hex)? wouldn't it be similar in terms of security?", "how about: code_removed", "i tried to incorporated lambdaj but it was too difficult and it was not readable to people that did not know lambdaj. that is just my experience though.", "white space can remove using iswhitespace function from character class. code_removed", "@mjafarmash if the exception you expect to throw is checked, then you would add that exception to the throws clause of the test method. you do the same any time you are testing a method that is declared to throw a checked exception, even if the exception isn't triggered in the particular test case.", "@user3705478, sessions are created per-user. sessions are maintained as long as the client holding that session is active. when the client becomes inactive, the session expires.", "a well-performing approach avoiding try-catch and handling negative numbers and scientific notation. code_removed", "yes, if you call threada call, then not need to call the start method and run method is call after call the threada class only. but if use the threadb call then need to necessary the start thread for call run method. if you have any more help, reply me.", "for template logic or visuals, one could also write custom tag handler classes if the standard taglib doesn't suffice. how about adding this to the answer?", "this is a nice one line solution. fyi, for anyone using code_removed, the full line is: code_removed", "varargs could do that (in a way). other than that, all variables in the declaration of the method must be supplied. if you want a variable to be optional, you can overload the method using a signature which doesn't require the parameter. code_removed", "it could be good to narrow the description as \"every object has also a protected clone method which can be used to copy the object by implementing cloneable interface\".", "@zatenzu a child class could implement serializable", "it's not the wrong way if you just need a code_removed, and don't need an code_removed, which you actually don't most of the time. most of the time when developers create an code_removed it's out of habit, more than out of need.", "and why does eclipse say i need \"private static final long serialversionuid = 1l;\" when i extend the exception class?", "it's possible to write a fully generic version that can even be extended to concatenate any number of arrays. this versions require java 6, as they use code_removed both versions avoid creating any intermediary code_removed objects and use code_removed to ensure that copying large arrays is as fast as possible. for two arrays it looks like this: code_removed and for a arbitrary number of arrays (>= 1) it looks like this: code_removed", "this code is just simply wrong.", "a type independent variation (updated - thanks to volley for instantiating t): code_removed", "yes, my class has an private arraylist<string>.", "possibly useful point: you can't do this with primitives. you'll end up with a single-element code_removed of code_removed where code_removed is that primitive. e.g. code_removed results in a code_removed.", "bonjour dexter ^_^", "is there any way that i can use for smtp.rediffmailpro.com? please help...", "this is how to implement a simple code_removed: code_removed this is how to properly lazy create your code_removed: code_removed", "@schatten well, it's a code_removed instead of code_removed. it's not \"better\", although it describes enum values better in my opinion, because from set's definition, values in set cannot be repeated (like in enum), whereas values in array can be.", "according with the question the answer using java 1.7 is: code_removed however it's better always use the interface: code_removed", "i like to think of pass-by-value (as pertains to parameters of functions) as meaning that every function makes a local copy of the objects passed. in general, relying on a satellite method do it's job on some larger state seems more nebulous than explicitly defining the state passed and returned.", "why in the world would you use uuid to get random bits? why not just use code_removed? or even code_removed?", "sometimes if you want to split code_removed then it won't split; instead you will get a code_removed. in that case, first code_removed and then split: code_removed", "i know this is a few years ago but... looking at the official java classes can help find any form of javadoc formatting you need. for example look at the hashmap javadoc.", "until today, i thought that for example: code_removed is just a shortcut for: code_removed but what if we try this: code_removed then code_removed will not compile but code_removed will compile fine. does it mean that in fact code_removed is a shortcut for something like this code_removed?", "to be on rite track first read about the network requests in android then i would recommend to study \"volley\".", "@josefx - compiler warnings and can lead to errors if the branch the code is forced down has a code_removed statement as this produces unreachable code. this is a useful compiler error; e.g. if you forget code_removed statements in a switch and your code_removed case throws an exception, you will get this error.", "ok bombe, you are right. fixed.", "it's contravariance.", "yes, because exlipse claims, that sdk version 23 needs version 23 adt and eclipse shows that there is no updates available for eclipse adt, updates to ndk won't fix this problem, never. i had to install new version of android developing tools. i used adt bundle for linux 64 bit and unzipped it to new place than original one and installed all tools again as andoide developer page guides us. in linux bundle sdk is still broken, so you must copy annotations.jar to right place as explained here. whole story in explained in my answer. i coulkd save my old workspace and nothing was lost, huh.", "code_removed that's a bit too simplified. it depends heavily on where the removal is happening, if it is at the end then arraylist will be faster, because there is no extra object that has to be gced at some point.", "try this: code_removed", "will work only if the inputstream is one-liner", "exactly. that's why i wrote: be warned that it basically replaces jar version issues with classloader issues", "one-liner: code_removed", "1) since strings are immutable in java if you store the password as plain text, it will be available in memory until garbage collector clears it and since string is used in string pool for reusability, there is pretty high chance that it will remain in memory for the long duration, which poses a security threat. since anyone who has access to memory dump can find the password in clear text and that's another reason you should always use an encrypted password than plain text. since strings are immutable, there are no way contents of strings can be changed because any change will produce new string, while if you char[] you can still set all his element as blank or zero. so storing password in character array mitigates security risk of stealing the password. 2) java itself recommends using getpassword() method of jpasswordfield which returns a char[] and deprecated gettext() method which returns password in clear text stating security reason. it's good to follow advice from java team and adhering to standard rather than going against it.", "this answer assumes that you are using linux, and that you want to install it in a non-standard way / place, and a bunch of other things. a better answer would be \"just follow the installation instructions on the download website\"... unless you are using ubuntu, in which case there are other ways to do it.", "the camel in action book is a very very good book to get to learn the basics and also how to use some of the more complicated features of camel. i highly recommend it! (i am in no way affiliated with the book or publisher)", "this also doesn't work in a static context", "it's needed when you don't want to share some sensitive data that go with serialization.", "code_removed is valid for code_removed and is a valid literal according the jls (\u00a73.10.2)!", "if you are extending or implementing any class/interface that are using generics, you may get the generic type of parent class/interface, without modifying any existing class/interface at all. there could be three possibilities, case 1 when your class is extending a class that is using generics code_removed case 2 when your class is implementing an interface that is using generics code_removed case 3 when your interface is extending an interface that is using generics code_removed", "the fastest way, which also consumes the least resource could be: code_removed", "or (a?1:0)+(b?1:0)+(c?1:0) >= 2", "the docs for code_removed are probably about as good an explanation as you'll get: the serialization runtime associates with each serializable class a version number, called a serialversionuid, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. if the receiver has loaded a class for the object that has a different serialversionuid than that of the corresponding sender's class, then deserialization will result in an code_removed. a serializable class can declare its own serialversionuid explicitly by declaring a field named \"code_removed\" that must be static, final, and of type code_removed: code_removed if a serializable class does not explicitly declare a serialversionuid, then the serialization runtime will calculate a default serialversionuid value for that class based on various aspects of the class, as described in the java(tm) object serialization specification. however, it is strongly recommended that all serializable classes explicitly declare serialversionuid values, since the default serialversionuid computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected code_removed during deserialization. therefore, to guarantee a consistent serialversionuid value across different java compiler implementations, a serializable class must declare an explicit serialversionuid value. it is also strongly advised that explicit serialversionuid declarations use the private modifier where possible, since such declarations apply only to the immediately declaring class--serialversionuid fields are not useful as inherited members.", "@airduster one implementation of this idea that's available on maven is stefanbirkner.github.io/vallado", "immutablemap is not the same as a hashmap, as it will fail on null values, whereas map hashmap will not.", "there are other filter methods in collectionutils that do not modify the original collection."]