["alternative: code_removed", "also if you have models, you will have to rename the model tables. for postgres use code_removed", "return it from the view as you would any other response. code_removed", "as i can't yet comment (muhuk's solution), i'll response as a separate answer. this is a complete code example, that worked for me: code_removed", "@tojjer: looks promising, how do we use the truncate method here though?", "good because sometimes one just wants to use the contents of the file not save the upload...", "@glarrain: true that, thanks.", "it is just a shame that django devs don't have yet a filter to do it (like range, fi).", "it's a way of generating a valid url, generally using data already obtained. for instance, using the title of an article to generate a url. i'd advise to generate the slug, using a function, given a title (or other piece of data), rather than setting it manually. an example: code_removed now let's pretend that we have a django model such as: code_removed how would you reference this object with a url, with a meaningful name? you could use article.id so the url would look like this: code_removed or, you could reference the title like so: code_removed problem is, spaces aren't valid in urls, they need to be replaced by code_removed which is ugly, making it the following: code_removed that's not solving our meaningful url. wouldn't this be better: code_removed that's a slug. code_removed. all letters are downcased and spaces are replaced by hyphens code_removed. see the url of this very webpage for an example!", "@janekolszak i did not know this - only took about a day of lots of cursing and banging on the keyboard - until reading this and swapping over to 2.7. and guess what, everything works hunky-dory~", "mimetype is replaced by content_type for django 1.7", "see stackoverflow.com/questions/88259/\u2026", "very important answer, i wondered why code_removed didn't work. about the fake migration, yes, you may need it, if you e.g. need to only undo the (probably wrong) initial migration, but the migration history thinks, that this migration never happened.", "i am using python version 2.5.4 and install mysql version 5.0 and django. django is working fine with python, but not mysql. i am using it in windows vista.", "let us continue this discussion in chat", "gotta love django, almost 10 years later and the answer is still valid! thx +1 and drink on me.", "so you try to start the server again, while one is already running? that won't work as the first one will be using the http port. you must kill or terminate the first one, before trying to run again (at least run it on the same port).", "i want to use python to convert json data into a python object. i receive json data objects from the facebook api, which i want to store in my database. my current view in django (python) (code_removed contains the json): code_removed this works fine, but how do i handle complex json data objects? wouldn't it be much better if i could somehow convert this json object into a python object for easy use?", "to add to what carles barrob\u00e9s said, you can generate a new key using the method that django uses in code_removed: code_removed", "i prefer calling the module code_removed as opposed to code_removed to group it with code_removed in alphabetical folder listings. keep code_removed out of version control using code_removed as credentials don't belong to git. imagine open sourcing them by accident. i keep in git a template file called code_removed instead.", "code_removed gives you the domain. in a template it would be code_removed.", "do you have 500.html and 404.html and 403.html files in place? i think i recall having an issue with a deployed project that did not have those files in the root of my templates directory.", "@zach: there are examples right at the top of the docs i linked to.", "i just posted a snippet that makes admin.modeladmin support '__' syntax: so you can do: code_removed this is basically just doing the same thing described in the other answers, but it automatically takes care of (1) setting admin_order_field (2) setting short_description and (3) modifying the queryset to avoid a database hit for each row.", "requirements: code_removed, code_removed in case you want to combine code_removed and still come out with a code_removed, you might want to check out django-queryset-sequence. but one note about it. it only takes two code_removed as it's argument. but with python code_removed you can always apply it to multiple code_removeds. code_removed and that's it. below is a situation i ran into and how i employed code_removed, code_removed and code_removed code_removed", "trying this approacg but have code_removed", "the real client ip address is not the first but the last in (see wikipedia page)", "that is an extremely good question. three years ago maybe i would have had an answer for you;)", "or use eclipse / pydev's debugger. :-)", "i had a similar issue getting fedora 20, nginx, node.js, and ghost (blog) to work. it turns out my issue was due to selinux. this should solve the problem: code_removed details i checked for errors in the selinux logs: code_removed and found that running the following commands fixed my issue: code_removed references:", "other solution: set initial after creating the form: code_removed", "this is an expansion on mounir's answer. i've added a bash script that covers this for you. just run code_removed instead of code_removed and it'll work exactly the same way. code_removed", "i had to add this line to settings.py in order to make it work (otherwise it showed an error when accessed from another computer) code_removed then ran the server with: code_removed also ensure that the firewall allows connections to that port", "my take on this issue, i think is the nicest. i keep a my_filters.py on the templatetags directory. code_removed and you would use like this: code_removed", "it is the mimetype, not the list that should be getting him into trouble. while most json is typically an object (\"dictionary\") at the top level, json is perfectly happy with an array at the top-level.", "isn't that a bit too much? though if he just needs openid, he can take a look on which one pinax chose.", "@patrick see djangosnippets.org/snippets/1103 and djangosnippets.org/snippets/1933 \u2013 epecially the latter is a very comprehensive solution", "what if there are more than one parameter? for eg. pagination with two query params limit and skip", "i think this gets executed for each process that loads the project. so, i can't think of why this wouldn't work perfectly under any deployment scenario. this does work for management commands. +1", "you also have to watch out for if a user logs in after just logging out. in other words, the code_removed would be something like code_removed and after the user log ins, he will immediately be logged back out lol, and the loop continues.", "ps tests show that with django 1.7 this only gets executed on first request. updating wsgi.py is also needed to trigger startup before the first request.", "thanks! adding path to 'dirs' worked perfectly.", "thanks to the answers by dominique guardiola and hobs, it helped me solve a hard problem. however there are a couple of issues with the solution, here is my take on it. using code_removed is not a good idea if you have any third party apps that uses south, for example code_removed (basically everything uses south). code_removed will delete all migration history for all apps that you have installed. now consider that you upgrade to the latest version of code_removed, it will contain new migrations like code_removed. south will surely be confused when you try to run that migration without having code_removed through code_removed in the migration history. it is much better/safer to selectively reset only the apps that you are maintaining. first of all, make sure that your apps don't have any desync between migrations on disk, and migrations that have been executed on the database. otherwise there will be headache. 1. delete migration history for my apps code_removed 2. delete migrations for my apps code_removed 3. create new initial migrations for my apps code_removed 4. fake execute the initial migrations for my apps this inserts the migrations into code_removed without touching actual tables: code_removed step 3 and 4 is actually just a longer variant of code_removed, but i prefer that extra control, in such delicate situation as modifying the production database.", "@jorelli request.path won't be null at all, i don't see the sense of this.", "get the following error when we run syncd which lead to create super user: typeerror: create_superuser() got an unexpected keyword argument 'email'", "@jeremycraigmartinez: no... is the form you are trying a bound form (with get/post data passed in)? the docs say this is why initial values are only displayed for unbound forms. for bound forms, the html output will use the bound data., see here", "code_removed", "humanize is built in -- it is part of django.", "note that if you're expecting 100k users per day, that are active for hours at a time (meaning max of 20k+ concurrent users), you're going to need a lot of servers. so has ~15,000 registered users, and most of them are probably not active daily. while the bulk of traffic comes from unregistered users, i'm guessing that very few of them stay on the site more than a couple minutes (i.e. they follow google search results then leave). for that volume, expect at least 30 servers... which is still a rather heavy 1,000 concurrent users per server.", "the site generates a unique token when it makes the form page. this token is required to post/get data back to the server. since the token is generated by your site and provided only when the page with the form is generated, some other site can't mimic your forms -- they won't have the token and therefore can't post to your site.", "alexander's answer is great, but lacks the handling of proxies that sometimes return multiple ip's in the header. the real ip is usually at the end of the list, as explained here: the solution is a simple modification of alexander's code: code_removed", "thanks for complementing, i was not aware of that.:)", "@hugowood, a man in the middle attack would cause one to send credentials to any (*) server", "@rolling stone- thank you, i was adding that after realizing my mistake as you commented. unique=true doesn't work exactly like onetoonefield, i meant to explain that foreignkey only uses a one-to-one relationship if you specify unique=true.", "@hugowood, a man in the middle attack would cause one to send credentials to any (*) server", "use ipython to jump into your code at any level and debug using the power of ipython. once you have installed ipython just put this code in wherever you want to debug: code_removed then, refresh the page, go to your runserver window and you will be in an interactive ipython window. i have a snippet set up in textmate so i just type ipshell and hit tab. i couldn't live without it.", "yup, the ip is at the beginning of the list. this here is wrong.", "thanks, the error message was not obvious to me either, but your explanation about the reverse relation was very helpful.", "i converted the ip into a string but when i pull the values for the \"ip\" and \"lat\" in the browser i see \"none:. here is the code: def home(request): g = geoip() ip = str(get_client_ip(request)) lat = g.lat_lon(ip) return render_to_response('home_page_tmp.html',locals())", "@araneae that's strange: you are right even if documentation says \"the validationerror raised during model validation when the constraint is violated has the unique_together error code.\"", "use xml_models to create django models that use an xml rest api backend (instead of a sql one). this is very useful especially when modelling third party apis - you get all the same queryset syntax that you're used to. you can install it from pypi. xml from an api: code_removed and now in python: code_removed it can also handle relationships and collections. we use it every day in heavily used production code, so even though it's beta it's very usable. it also has a good set of stubs that you can use in your tests. (disclaimer: while i'm not the author of this library, i am now a committer, having made a few minor commits)", "django 1.10 code_removed is deprecated. now we need to use code_removed, introducing in django 1.8 like this: code_removed once you have defined templates, you can safely remove allowed_include_roots, template_context_processors, template_debug, template_dirs, template_loaders, and template_string_if_invalid. about the best location, django looking for template like this: dirs defines a list of directories where the engine should look for template source files, in search order. app_dirs tells whether the engine should look for templates inside installed applications. each backend defines a conventional name for the subdirectory inside applications where its templates should be stored. more information:", "in centos 6 installing the package python-setuptools fixed it. code_removed", "please note: this is an ancient question with ancient answers. most of the linked apps are now unmaintained. these days, most people seem to use django-allauth or python-social-auth. i'll leave the original question intact below for posterity's sake. there are at least half a dozen django apps that provide openid authentication for django: django-openid django-openid-auth another django-openid-auth, which seems to be dead django-authopenid django-socialauth (which also provides authentication with twitter and facebook accounts) django-socialregistration (has facebook and twitter authentication, too) django-openid-consumer, a fork of simon willison's original django-openid. seems more suited for simple blog comments than a full fledged registration workflow django-social-auth i played around with a couple of them. simon willison's django-openid made a good impression, but as he is at the forefront of trendsetting in djangoland, i sometimes have difficulties wrapping my head around his trends (e.g. the whole dynamic urlpatterns system in django-openid). what's more, i couldn't get login to work with google. django-authopenid made a good impression, and it seems to have good integration with django-registration. django-socialauth and django-socialregistration have support for twitter and facebook, which is definitely a plus. who knows if and when facebook will start to be an openid provider...? socialauth seems to have its share of problems, though. so, what is the best openid app out there? please share any positive (and negative) experience. thanks!", "be careful with using request metadata. it's coming from a browser and can be spoofed. in general, you'll probably want to go with what's suggested below by @carlmeyer.", "for folks using django 1.6, they've finally added the code_removed and code_removed convenience methods: docs.djangoproject.com/en/dev/ref/models/querysets/#first", "interesting. thanks.", "in case you have sqlite, it's code_removed.", "+1 for doing it from the code_removed. now it's starting to make sense. code_removed is essentially many-to-one, so you need to do it backwards to get a one-to-many:)", "in django, mvc structure is as chris pratt said, different from classical mvc model used in other frameworks, i think the main reason for doing this is avoiding a too strict application structure, like happens in others mvc frameworks like cakephp. in django, mvc was implemented in the following way: view layer is splitted in two. the views should be used only to manage http requests, they are called and respond to them. views communicate with the rest of your application (forms, modelforms, custom classes, of in simple cases directly with models). to create the interface we use templates. templates are string-like to django, it maps a context into them, and this context was communicated to the view by the application (when view asks). model layer gives encapsulation, abstraction, validation, intelligence and makes your data object-oriented (they say someday dbms will also). this doesn't means that you should make huge models.py files (in fact a very good advice is to split your models in different files, put them into a folder called 'models', make an '__init__.py' file into this folder where you import all your models and finally use the attribute 'app_label' of models.model class). model should abstract you from operating with data, it will make your application simpler. you should also, if required, create external classes, like \"tools\" for your models.you can also use heritage in models, setting the 'abstract' attribute of your model's meta class to 'true'. where is the rest? well, small web applications generally are a sort of an interface to data, in some small program cases using views to query or insert data would be enough. more common cases will use forms or modelforms, which are actually \"controllers\". this is not other than a practical solution to a common problem, and a very fast one. it's what a website use to do. if forms are not enogh for you, then you should create your own classes to do the magic, a very good example of this is admin application: you can read modelamin code, this actually works as a controller. there is not a standard structure, i suggest you to examine existing django apps, it depends on each case. this is what django developers intended, you can add xml parser class, an api connector class, add celery for performing tasks, twisted for a reactor-based application, use only the orm, make a web service, modify the admin application and more... it's your responsability to make good quality code, respect mvc philosophy or not, make it module based and creating your own abstraction layers. it's very flexible. my advice: read as much code as you can, there are lots of django applications around, but don't take them so seriously. each case is different, patterns and theory helps, but not always, this is an imprecise cience, django just provide you good tools that you can use to aliviate some pains (like admin interface, web form validation, i18n, observer pattern implementation, all the previously mentioned and others), but good designs come from experienced designers. ps.: use 'user' class from auth application (from standard django), you can make for example user profiles, or at least read its code, it will be useful for your case.", "without exception: code_removed using an exception: code_removed there is a bit of an argument about when one should use an exception in python. on the one hand, \"it is easier to ask for forgiveness than for permission\". while i agree with this, i believe that an exception should remain, well, the exception, and the \"ideal case\" should run without hitting one.", "'feroxtl' you need to credit @guettli for this answer, as he commented this on the accepted answer a year prior to your post.", "well, the login_required decorator would work just fine as it sets 'next' to whatever page i come from, but when using the decorator anonymous users cant view the site because they will be redirect to the login form right away. i think i just need to figure out how to set the value of 'next' to the url of the page the user comes from.", "for django 1.1. i have this in my models.py: code_removed when updating a row i get: code_removed the relevant part of my database is: code_removed is this cause for concern? side question: in my admin tool, those two fields aren't showing up. is that expected?", "i tried db.rename_column('app_foo', 'rel', 'odd_relation') and received: _mysql_exceptions.operationalerror: (1025, \"error on rename of '. ap_site #sql-1034_20' to '. my_app_db app_foo' (errno: 150)\")", "what if i want to log this error? any solutions?", "okay alexey. you are right here. i have updated the answer.", "maybe this? stackoverflow.com/questions/6178664/\u2026", "it's not a good idea to set a foreign key constraint to 0, because if you do, your database would not ensure it is not violating referential integrity. this could lead to inaccurate, misleading, or incomplete data. you make a foreign key for a reason: because all the values in the child column shall be the same as a value in the parent column. if there are no foreign key constraints, a child row can have a value that is not in the parent row, which would lead to inaccurate data. for instance, let's say you have a website for students to login and every student must register for an account as a user. you have one table for user ids, with user id as a primary key; and another table for student accounts, with student id as a column. since every student must have a user id, it would make sense to make the student id from the student accounts table a foreign key that references the primary key user id in the user ids table. if there are no foreign key checks, a student could end up having a student id and no user id, which means a student can get an account without being a user, which is wrong. imagine if it happens to a large amount of data. that's why you need the foreign key check. it's best to figure out what is causing the error. most likely, you are trying to delete from a parent row without deleting from a child row. try deleting from the child row before deleting from the parent row.", "this answer should be part of django's manual!", "there is an actual python extension for visual studio: it's absolutely fantastic. it feels the same as if i were coding in any native visual studio language. the extension is even compatabile with django. and best of all: it's totally free. even for visual studio, it only requires the visual studio shell to work, which is completely free.", "wondering the reason for 2 code_removeds in code_removed?", "as a footnote, timmy o'mahony can also explain their differences using database hits: link", "i highly recommend epdb (extended python debugger). one thing i love about epdb for debugging django or other python webservers is the epdb.serve() command. this sets a trace and serves this on a local port that you can connect to. typical use case: i have a view that i want to go through step-by-step. i'll insert the following at the point i want to set the trace. code_removed once this code gets executed, i open a python interpreter and connect to the serving instance. i can analyze all the values and step through the code using the standard pdb commands like n, s, etc. code_removed and tons more that you can learn about typing epdb help at any time. if you want to serve or connect to multiple epdb instances at the same time, you can specify the port to listen on (default is 8080). i.e. code_removed host defaults to 'localhost' if not specified. i threw it in here to demonstrate how you can use this to debug something other than a local instance, like a development server on your local lan. obviously, if you do this be careful that the set trace never makes it onto your production server! as a quick note, you can still do the same thing as the accepted answer with epdb (code_removed) but i wanted to highlight the serve functionality since i've found it so useful.", "i want to convert it into an object, something i can access using the \".\". like from the above example -> reponse.name, response.education.id etc....", "you shouldn't downvote people that answer their own questions. it is encouraged, even if it is pre-determined.", "how to pass the data between angular2 and jinja2? any help", "also if you have models, you will have to rename the model tables. for postgres use code_removed", "this can be a problem if you only want the code to run when running a server and not, say, when running tests, if you have tests that import urls", "you're not recommended to do that from the code_removed - and this is intended as you shouldn't really be executing random scripts from the django environment (but there are ways around this, see the other answers). if this is a script that you will be running multiple times, it's a good idea to set it up as a custom command ie code_removed to do this create a file in a subdir of code_removed and code_removed of your code_removed, ie code_removed and in this file define your custom command (ensuring that the name of the file is the name of the command you want to execute from code_removed) code_removed", "but how do i set the models.datefield to current date instead of datetimefield instead in the above example. i have tried using date = models.datefield(default=datetime.datetime.now().date), but it does not evaluate to current date each day in the modelform pl. guide stackoverflow.com/users/84478/carson-myers", "concatenating the querysets into a list is the simplest approach. if the database will be hit for all querysets anyway (e.g. because the result needs to be sorted), this won't add further cost. code_removed using code_removed is faster than looping each list and appending elements one by one, since code_removed is implemented in c. it also consumes less memory than converting each queryset into a list before concatenating. now it's possible to sort the resulting list e.g. by date (as requested in hasen j's comment to another answer). the code_removed function conveniently accepts a generator and returns a list: code_removed if you're using python 2.4 or later, you can use code_removed instead of a lambda. i remember reading about it being faster, but i didn't see a noticeable speed difference for a million item list. code_removed", "try adding the following line in settings.py: code_removed this should work. refer to documentation. update at 2018-04-16: there is also a python way to do this thing: code_removed", "here's a variation on the helper function that allows you to optionally pass in a code_removed instance, in case you want to get the unique object (if present) from a queryset other than the model's code_removed objects queryset (e.g. from a subset of child items belonging to a parent instance): code_removed this can be used in two ways, e.g.: code_removed as previosuly discussed code_removed", "it would probably cause a problem if you are running the same server using multiple processes.", "brilliant. thanks", "following @tobu answer and @mipadi comment, in a more pythonic way, if not interested in the created flag, i would use: code_removed", "so you try to start the server again, while one is already running? that won't work as the first one will be using the http port. you must kill or terminate the first one, before trying to run again (at least run it on the same port).", "@taiwangrapefruittea now there is also implementation for django 1.4 at github. we may see implementations for newer versions in the future:)", "django hasn't got app settings, so i made my own app_settings.py detection. at the bottom of the settings.py i added this code: code_removed it detects app_settings.py in all the installed_apps. instead of importing it, it will read the contents of the app_settings file and will execute it inline. if app_settings is imported directly all sort of django import errors will be raised (because django isn't initialized yet). so my app/app_settings.py will look like this: code_removed now the application only has to be added to the installed_apps, instead of finding all application settings and add them to the settings.py (middleware, urls...) note: it would be better if django had a hook to append extra settings, so application settings could be added on startup (or in runtime).", "@rjferguson you dont need to activate your env to do a code_removed / code_removed. you can simply reference it: code_removed or if you want to install/use pip, same thing: code_removed. i use this all the time, specially when im logged in as a root and all of my application code runs as code_removed i do: code_removed and not even blink. (i know this is almost 2 years later, and you probably know about it now -- this is more for the next guy)", "django's contributed humanize application does this: code_removed be sure to add code_removed to your code_removed list in the code_removed file.", "ok. i am currently using the second method. seems like they are separate mechanisms, and i'm trying to blend them. thanks!", "@danielroseman is it somehow good for performance or good practice to use related_name='+' when backwards relation is not necessary?", "@thnee could you clarify the 'delete from', specifying the tool used?", "this solution doesn't work when the string length is variable, i mean when you don't know in advance its lenght.", "@avelis somebody has created a fork that apparently does support 1.6: pypi.python.org/pypi/django-dajax-ng", "try this in url.py admin.site.site_header = 'my administration' admin.site.index_title = ('my admin') admin.site.site_title = ('my admin page')", "under fedora 17: code_removed:)", "it would probably cause a problem if you are running the same server using multiple processes.", "code_removed worked for me!", "after downloading the module you'll need to edit the site.cfg file with the right path for mysql_config and the run code_removed", "the 'bit extra' i'm looking for, over rtfm, is the django settings environment, database, and fixtures for the tests.", "my answer was accurate at the time of writing it:) it was just after django was updated from 1.2.4 to 1.2.5. it was also when newest jquery version was 1.5. it turns out the source of the problem was bugged jquery (1.5) and this information is now added to django doc, as you have stated. in my case: the cookie was set and the token was not added to the ajax request. given fix worked for bugged jquery 1.5. as of now, you can simply stick to the official docs, using example code given there and using newest jquery. your problem had different source than problems discussed here:)", "i had it on version 2.0.5", "django employs a slightly modified kind of mvc. there's no concept of a \"controller\" in django. the closest proxy is a \"view\", which tends to cause confusion with mvc converts because in mvc a view is more like django's \"template\". in django, a \"model\" is not merely a database abstraction. in some respects, it shares duty with the django's \"view\" as the controller of mvc. it holds the entirety of behavior associated with an instance. if that instance needs to interact with an external api as part of it's behavior, then that's still model code. in fact, models aren't required to interact with the database at all, so you could conceivable have models that entirely exist as an interactive layer to an external api. it's a much more free concept of a \"model\".", "is there a fundamental reason why django couldn't have a rule such that if the foreign key is unique and not null, then code_removed also works?", "having said that the code_removed is needed, i was just reading the other answer to the same question, and interestingly, imagefields also provide a url, so actually the context_processor and media_url are not needed: code_removed", "@juanefren yes, the latest pydev release has django support, and it's actually quite usable: pydev.org/manual_adv_django.html", "unfortunately, when you create your next migration, it doesn't skip the ones in between, so you just migrate through them again later. seems like there could be a better way.", "since django 1.1, you can also use the simpler redirect shortcut: code_removed it also takes an optional permanent=true keyword argument.", "yes. i said so in the original question.", "with django class-based views you can write: code_removed and with django-rest-framework you can write: code_removed", "thanks, that solved my problem with respect to this: code_removed", "i am on django 1.8 and this works (@monajalal settings.py)", "this is the answer that i'm looking for. code_removed code_removed doesn't do what i want because it disables the field, but also removes label / make it invisible.", "@pykler thanks for your comment. that's what i did actually. i wanted to create empty logs folder before code_removed was called. finally i put it before that call.", "if you really like to get this fixed in django leave a comment to code.djangoproject.com/ticket/694 asking core devs to reconsider the code_removed decision.", "it produces this error: code_removed", "with django version 1.3, the class based approach is: code_removed this example lives in in urls.py", "the problem is not in django settings, but in the date passed to the model. here's how a timezone-aware object looks like: code_removed and here's a naive object: code_removed so if you are passing email date anywhere (and it eventually gets to some model), just use django's code_removed. if not, then it's probably an issue with an existing package that fetches date without timezone and you can patch the package, ignore the warning or set use_tz to false.", "side note: this answer pre-dated uuidfield.", "it turns out that postgres was not running. if postgres is not running, it doesn't listen on port 5432. i started it and it worked like a charm.", "when you have list of items and you want to check the possible values from the list then you can't use code_removed. the sql query will be like code_removed which is not true. you have to use code_removed operator for this so you query will be like code_removed for that django provide code_removed operator.", "omg i cant believe this worked, man u ar awsome.", "the django debug toolbar is really fantastic. not really a toolbar, it actually brings up a sidepane that tells you all sorts of information about what brought you the page you're looking at - db queries, the context variables sent to the template, signals, and more.", "i had to sort by a field whose type was the same across 3 different data models, but were named differently. i worked around this by writing a model method within each model to normalize access... article.title, event.name and news.topic all got a code_removed method. worked like a charm! (and also works for imagefields)", "worth noting: the first option which uses the filter returns a queryset. this means that if you do not filter by primary key you will delete multiple records. i realize the question was asking particularly about the id but still worth putting this out there as a friendly reminder.", "i have some stuff in settings.py that i'd like to be able to access from a template, but i can't figure out how to do it. i already tried code_removed but that doesn't seem to work. is this possible?", "for situations where you only have the code_removed object you can use code_removed", "useful to note, when considering field attributes, that postgres docs also say (emphasis mine): \"the longest possible character string that can be stored is about 1 gb. (the maximum value that will be allowed for n in the data type declaration is less than that [...] if you desire to store long strings with no specific upper limit, use text or character varying without a length specifier, rather than making up an arbitrary length limit.)\"", "thanks so much, this answered it for me. i've been searching all over - i wish this were in the docs! (if it is and i just missed it then i'd be delighted to be corrected).", "i'm just guessing at your use case here, is it something like the \"attach another file\" feature in gmail, where the user is presented with a file upload field and new fields are added to the dom on the fly as the user clicks to \"attach another file\" plus button?", "it works for me. but i don't know why we should run this code as we already mentioned these in our wsgi file.", "what about using code_removed, which already comes as a tuple? i'm pretty sure doing code_removed will always work as intended.", "this is very difficult to find in the docs, because it's not grouped with other aggregations like code_removed. it's also extremely important for many cases. i had a case where i needed to pre-check the maximum data size that a query might return won't run the server out of memory, and a variant of this worked perfectly.", "any reason not to use the orm to rename code_removed and code_removed models?", "another way to do this, if you have already initialised a form (with or without data), and you need to add further data before displaying it: code_removed", "worked for me..", "i have just found a terrible problem of pytz (new bug?). it returns the really local timezone, instead of the standard local time. e.g. if you choose asia/shanghai as the os timezone, windows, macos, and linux will all treat it as utc+0800. pytz 2017.2 treats asia/shanghai as utc+0806. same for other cities like europe/london. it is completely useless to me...", "this was really easy to use. thanks.", "is nobody going to mention the combination of: code_removed, code_removed, code_removed?", "this answer adds a code_removed to the third example code_removed, but i think this might be a shortcoming of the question, not of the answer.", "the code_removed facilty which comes with django_extensions is truly awesome. it creates an enhanced debug page that, amongst other things, uses the werkzeug debugger to create interactive debugging consoles for each point in the stack (see screenshot). it also provides a very useful convenience debugging method code_removed for displaying information about an object/frame. to install, you can use pip: code_removed then add code_removed to your code_removed tuple in code_removed and start the development server with the new extension: code_removed this will change the way you debug.", "better install code_removed and then just type code_removed", "delete the rows on the databas, or check option 1 and add timezone.now()", "considering that db interaction is the crust of most django apps, even minor improvements such as this one make a big difference.", "ctrl+z is undo. if you don't see a command prompt, your server is still running.", "i don't know about you, but for me, code_removed is very annoying for big projects! i prefer using o.o.p. (extending) in my projects!", "how can i check, what exception will be thrown, when i try to create an object that breaks this constraint?", "yes, it works for me. django 1.6.x", "writing a custom code_removed on each of my models is much more pain than using the code_removed (as i like to have these fields on all my models). why don't those params work?", "when installing nltk,same problem happens.good question and helpful answer", "go to your setting.py you can add this anywhere in your settings.py file but i prefer to place it at the bottom. login_url = '/login/' note: '/login/' is the url segment that brings the user to the login page. the complete url is similar to this \"myexample.com/login/\".", "the accepted answer which is almost 3 years old explains everything in detail. there's no point in repeating the same info here.", "did not work for me with django 1.9, so this solution it's not working everywhere, as it never was for auto_now*. the only solution that works in every use case (even with the 'update_fields' arg problem) is overriding save", "what's the best way to set a creation date for an object automatically, and also a field that will record when the object was last updated? in my model i have: code_removed and in my view: code_removed i get the error: code_removed do i have to manually set this value myself? i thought that was the point of the parameters passed to the datetimefields (or are they just defaults, and since i've set 'editable=false' they don't get displayed on the form, hence don't get submitted in the request, and therefore don't get put into the form?). what's the best way of doing this? an init method? thanks ps - i'm a django and python newbie...", "according to pip docs example 3 code_removed but based on my experience, using this method will also upgrade any package related to it. example: assume you want to upgrade code_removed that require code_removed using this kind of method it will also upgrade code_removed and code_removed to the newest update. just to be safe do: code_removed doing this will upgrade code_removed and keeping django to 1.2.4 version", "if you are using python3, then try this(my os is ubuntu 16.04): code_removed", "the urlparse module is renamed to urllib.parse in python 3. so, code_removed", "this solved my problem.", "exactly -- south never skips migrations; it expects that the files from 0001-nnnn represent a consistent set of migrations, for any value of nnnn. if that's not the case, then you need to re-order or delete the offending ones yourself.", "your solution might be to add the original ip and/or hostname also: code_removed basically the host header (or code_removed if code_removed is enabled) should match one of the values in code_removed.", "by using code_removed it added extra characters at the end of file, messing up with file extension. e.g. code_removed got changed to code_removed. changing it to code_removed fixed it for me.", "best solution by far.", "how could this be done programmatically? so, for example be able to have code_removed", "i sincerely love you, but nobody can return me the hours i spend finding this.", "i am looking over this website but just can't seem to figure out how to do this as it's not working. i need to check if the current site user is logged in (authenticated), and am trying: code_removed despite being sure that the user is logged in, it returns just: code_removed i'm able to do other requests (from the first section in the url above), such as: code_removed which returns a successful response.", "@tokenmacguy: ya, my bad... didn't notice the missing /", "somewhat related, for the issue of deploying django itself with multiple databases, you may want to take a look at djangostack. you can download a completely free installer that allows you to install apache, python, django, etc. as part of the installation process we allow you to select which database you want to use (mysql, sqlite, postgresql). we use the installers extensively when automating deployments internally (they can be run in unattended mode).", "i have written a small (de)serialization framework called any2any that helps doing complex transformations between two python types. in your case, i guess you want to transform from a dictionary (obtained with code_removed) to an complex object code_removed, with a nested structure code_removed, etc... so that's exactly what this framework is made for. the documentation is not great yet, but by using code_removed, you should be able to do that very easily. please ask if you need help.", "generally speaking, you can divide django configuration into things that are app-specific and things that are server-specific. this falls into the latter category. there are a number of ways you can tackle the problem of server-specific configuration, it is discussed more in this question. for this particular instance, using the approach i outline in my answer to the other question, i'd put a placeholder in code_removed for distribution, and during installation, i'd copy that over to code_removed and edit to suit.", "be aware that using auto_now_add is not the same as using a default because the field will be always equal to now (uneditable).. i know that this was already said, but it's not just a metter of the 'admin' page", "django-db-log, mentioned in another answer, has been replaced with:", "+1,should use this in django 1.5+", "i'm deploying a django app to a dev server and am hitting this error when i run pip install requirements.txt: code_removed pkg_resources appears to be distributed with setuptools. initially i thought this might not be installed to the python in the virtualenv so i installed setuptools (2.6, same version as python) to the python site-packages in the virtualenv with the following command code_removed edit this only happens inside the virtualenv. if i open a console outside the virtualenv then pkg_resources is present but i am still getting the same error. any ideas as to why pkg_resources is not on the path?", "onetoonefield(user, primary_key=true) why primary key = true in django document?????????????????", "i'm embarrassed to admit this, but the problem for me was that a template had been specified as code_removed instead of code_removed. watch out!", "1.11 still doesn't exist. been doing django for a dozen years and i never remember this one:(", "in case you don't know in which app your model exists, you can search it this way: code_removed remember that your_model_name must be lowercase.", "where you write code_removed, what is code_removed? that is not a syntactic construct i have seen.", "one option would be to create a formset with every possible form, but initially set the unrequired forms to hidden - ie, code_removed. when it's necessary to display a form, set it's css display to code_removed or whatever is appropriate. without know more details of what your \"ajax\" is doing, it's hard to give a more detailed response.", "this gets executed after parsing the settings. any idea how to make this load before the settings?", "as mentioned by @frank pape above: you do not need multiple processes for this to fail. just create two different model instances pointing to the same db row. change one and save it. then the second one's diff will be wrong.", "code_removed was covered by an answer that was provided about 5 years before this one. the only thing this answer brings to the table which is perhaps new is code_removed. (even this is debatable: is it substantially different from doing the code_removed suggested about 5 years ago too?) you ought to develop that part of the answer: when would one want to do this instead of the other solutions proposed earlier?", "i use pydev with eclipse really good, set break points, step into code, view values on any objects and variables, try it.", "i have faced the same problem more then once and so implemented using xsendfile module and auth view decorators the django-filelibrary. feel free to use it as inspiration for your own solution.", "pdb is very useful, you are likely to have your connections time out unless you're very fast at debugging.", "this seems to be an unnecessarily harsh vote down!", "tried printing simple text in urls.py, but there was absolutely no output. what is happening?", "true, but using the code_removed generic view that comes with django is simpler still and more readable. see carles answer stackoverflow.com/questions/523356/python-django-page-redire\u200c\u200bct/\u2026", "query attribute? what? where is that - i checked the link but it is a giant un-alphabetical (why would anyone make a list that isn't alphabetical?) list...", "this is a terrible solution. overriding translation strings is just an awful idea.", "is there an equivalent of this with homebrew for mac? i keep getting in my terminal: \"update command not found\".", "note shai berger's answer below", "that fixed my problem, tyvm", "for django 2.0.*, check out the docs here.", "if i set the django_settings_module through an environmental variable, do i still need os.environ.setdefault(\"django_settings_module\", \"projectname.settings.production\") in my wsgi.py file? also, i've set the environmental var using: export django_settings_module=projectname.settings.local, but then it is lost when i close the terminal. what can i do to ensure it is saved? should i add that line to the bashrc file?", "save even more loc by using the @render_to decorator available in django-annoying. bitbucket.org/offline/django-annoying", "i think this works with the latest code_removed", "@solartic: you're right, thanks. i didn't mention this because the code_removed field created by django for formsets gets pretty hairy\u2026", "i like scott's approach much better, based on the inheritance of the user object rather than directly off the model. can anyone say if this approach is not wise?", "this answer says \"there are some differences\", and then names one difference. are there others?", "so...when would one even want to use a code_removed with code_removed rather than a code_removed? i see in other questions that django even warns that a code_removed usually best serve's one's interests. the reverse code_removed will never have more than one element, right?", "is there a better place to do this than using urls.py?", "i've set up django server with nginx, and it gets 403 error in some of the pages. where can i find the django logs? where can i see the errors in detail?", "should easily be #1", "anyway django itselfs sets a default session_cookie_domain. think about this setting if you need to share cookie across multiple subdomains.", "they all work just fine", "finally! thank you!!:d", "super helpful. it wasn't obvious to me at first, but you can use this to add multiple classes too: code_removed", "@sajid: to be a little clearer: last listed editors don't necessarily have the first thing to do with the post's statements, meaning, accuracy, or helpfulness. sometimes they just fixed some formatting, some grammar, a broken link, or the like.", "not sure about the number of daily visits but here are a few examples of large django sites: disqus.com (talk from djangocon) bitbucket.org (write up) lanyrd.com (source) support.mozilla.com (source code) addons.mozilla.org (source code) (talk from djangocon) theonion.com (write up) the guardian.co.uk comment system uses django (source) instagram pinterest rdio screencast on how to deploy django with scaling in mind here is a link to list of high traffic django sites on quora.", "django < 1.7 has a handy management command that will give you the necessary sql to drop all the tables for an app. see the sqlclear docs for more information. basically, running code_removed gets you get the sql statements that should be executed to get rid of all traces of the app in your db. you still need to copy and paste (or pipe) those statements into your sql client. for django 1.7 and up, use code_removed (see the migrate docs), which runs the database cleaning automatically. to remove the app from your project, all you need to do is remove it from code_removed in your project's code_removed. django will no longer load the app. if you no longer want the app's files hanging around, delete the app directory from your project directory or other location on your pythonpath where it resides. (optional) if the app stored media files, cache files, or other temporary files somewhere, you may want to delete those as well. also be wary of lingering session data that might be leftover from the app. (optional) i would also remove any stale content types. like so. code_removed", "interesting project, keep it up!", "thanks @stupidbodo fixed it", "tl;dr: the trick is to modify code_removed before you import code_removed in any code_removed, this will greatly simplify things. just thinking about all these intertwining files gives me a headache. combining, importing (sometimes conditionally), overriding, patching of what was already set in case code_removed setting changed later on. what a nightmare! through the years i went through all different solutions. they all somewhat work, but are so painful to manage. wtf! do we really need all that hassle? we started with just one code_removed file. now we need a documentation just to correctly combine all these together in a correct order! i hope i finally hit the (my) sweet spot with the solution below. let's recap the goals (some common, some mine) keep secrets a secret \u2014 don't store them in a repo. set/read keys and secrets through environment settings, 12 factor style. have sensible fallback defaults. ideally for local development you don't need anything more beside defaults. \u2026but try to keep defaults production safe. it's better to miss a setting override locally, than having to remember to adjust default settings safe for production. have the ability to switch code_removed on/off in a way that can have an effect on other settings (eg. using javascript compressed or not). switching between purpose settings, like local/testing/staging/production, should be based only on code_removed, nothing more. \u2026but allow further parametrization through environment settings like code_removed. \u2026also allow them to use different purpose settings and run them locally side by side, eg. production setup on local developer machine, to access production database or smoke test compressed style sheets. fail if an environment variable is not explicitly set (requiring an empty value at minimum), especially in production, eg. code_removed. respond to default code_removed set in manage.py during django-admin startproject keep conditionals to a minimum, if the condition is the purposed environment type (eg. for production set log file and it's rotation), override settings in associated purposed settings file. do not's do not let django read django_settings_module setting form a file. ugh! think of how meta this is. if you need to have a file (like docker env) read that into the environment before staring up a django process. do not override django_settings_module in your project/app code, eg. based on hostname or process name. if you are lazy to set environment variable (like for code_removed) do it in tooling just before you run your project code. avoid magic and patching of how django reads it's settings, preprocess the settings but do not interfere afterwards. no complicated logic based nonsense. configuration should be fixed and materialized not computed on the fly. providing a fallback defaults is just enough logic here. do you really want to debug, why locally you have correct set of settings but in production on a remote server, on one of hundred machines, something computed differently? oh! unit tests? for settings? seriously? solution my strategy consists of excellent django-environ used with code_removed style files, providing code_removed defaults for local development, some minimal and short code_removed files that have an code_removed after the code_removed was set from an code_removed file. this effectively give us a kind of settings injection. the trick here is to modify code_removed before you import code_removed. to see the full example go do the repo: code_removed settings/.env a defaults for local development. a secret file, to mostly set required environment variables. set them to empty values if they are not required in local development. we provide defaults here and not in code_removed to fail on any other machine if the're missing from the environment. settings/local.py what happens in here, is loading environment from code_removed, then importing common settings from code_removed. after that we can override a few to ease local development. code_removed settings/production.py for production we should not expect an environment file, but it's easier to have one if we're testing something. but anyway, lest's provide few defaults inline, so code_removed can respond accordingly. code_removed the main point of interest here are code_removed and code_removed overrides, they will be applied to the python code_removed only if they are missing from the environment and the file. these will be our production defaults, no need to put them in the environment or file, but they can be overridden if needed. neat! settings/base.py these are your mostly vanilla django settings, with a few conditionals and lot's of reading them from the environment. almost everything is in here, keeping all the purposed environments consistent and as similar as possible. the main differences are below (i hope these are self explanatory): code_removed code_removed code_removed the last bit shows the power here. code_removed has a sensible default, which can be overridden in code_removed and even that that can be overridden by an environment setting! yay! in effect we have a mixed hierarchy of importance: settings/.py - sets defaults based on purpose, does not store secrets settings/base.py - is mostly controlled by environment process environment settings - 12 factor baby! settings/.env - local defaults for easy startup", "i prefer this: code_removed", "tl;dr: the trick is to modify code_removed before you import code_removed in any code_removed, this will greatly simplify things. just thinking about all these intertwining files gives me a headache. combining, importing (sometimes conditionally), overriding, patching of what was already set in case code_removed setting changed later on. what a nightmare! through the years i went through all different solutions. they all somewhat work, but are so painful to manage. wtf! do we really need all that hassle? we started with just one code_removed file. now we need a documentation just to correctly combine all these together in a correct order! i hope i finally hit the (my) sweet spot with the solution below. let's recap the goals (some common, some mine) keep secrets a secret \u2014 don't store them in a repo. set/read keys and secrets through environment settings, 12 factor style. have sensible fallback defaults. ideally for local development you don't need anything more beside defaults. \u2026but try to keep defaults production safe. it's better to miss a setting override locally, than having to remember to adjust default settings safe for production. have the ability to switch code_removed on/off in a way that can have an effect on other settings (eg. using javascript compressed or not). switching between purpose settings, like local/testing/staging/production, should be based only on code_removed, nothing more. \u2026but allow further parametrization through environment settings like code_removed. \u2026also allow them to use different purpose settings and run them locally side by side, eg. production setup on local developer machine, to access production database or smoke test compressed style sheets. fail if an environment variable is not explicitly set (requiring an empty value at minimum), especially in production, eg. code_removed. respond to default code_removed set in manage.py during django-admin startproject keep conditionals to a minimum, if the condition is the purposed environment type (eg. for production set log file and it's rotation), override settings in associated purposed settings file. do not's do not let django read django_settings_module setting form a file. ugh! think of how meta this is. if you need to have a file (like docker env) read that into the environment before staring up a django process. do not override django_settings_module in your project/app code, eg. based on hostname or process name. if you are lazy to set environment variable (like for code_removed) do it in tooling just before you run your project code. avoid magic and patching of how django reads it's settings, preprocess the settings but do not interfere afterwards. no complicated logic based nonsense. configuration should be fixed and materialized not computed on the fly. providing a fallback defaults is just enough logic here. do you really want to debug, why locally you have correct set of settings but in production on a remote server, on one of hundred machines, something computed differently? oh! unit tests? for settings? seriously? solution my strategy consists of excellent django-environ used with code_removed style files, providing code_removed defaults for local development, some minimal and short code_removed files that have an code_removed after the code_removed was set from an code_removed file. this effectively give us a kind of settings injection. the trick here is to modify code_removed before you import code_removed. to see the full example go do the repo: code_removed settings/.env a defaults for local development. a secret file, to mostly set required environment variables. set them to empty values if they are not required in local development. we provide defaults here and not in code_removed to fail on any other machine if the're missing from the environment. settings/local.py what happens in here, is loading environment from code_removed, then importing common settings from code_removed. after that we can override a few to ease local development. code_removed settings/production.py for production we should not expect an environment file, but it's easier to have one if we're testing something. but anyway, lest's provide few defaults inline, so code_removed can respond accordingly. code_removed the main point of interest here are code_removed and code_removed overrides, they will be applied to the python code_removed only if they are missing from the environment and the file. these will be our production defaults, no need to put them in the environment or file, but they can be overridden if needed. neat! settings/base.py these are your mostly vanilla django settings, with a few conditionals and lot's of reading them from the environment. almost everything is in here, keeping all the purposed environments consistent and as similar as possible. the main differences are below (i hope these are self explanatory): code_removed code_removed code_removed the last bit shows the power here. code_removed has a sensible default, which can be overridden in code_removed and even that that can be overridden by an environment setting! yay! in effect we have a mixed hierarchy of importance: settings/.py - sets defaults based on purpose, does not store secrets settings/base.py - is mostly controlled by environment process environment settings - 12 factor baby! settings/.env - local defaults for easy startup", "update for django 1.10+: code_removed is now an attribute in django 1.10. the method still exists for backwards compatibility, but will be removed in django 2.0. for django 1.9 and older: code_removed is a function. you should call it like code_removed as peter rowell pointed out, what may be tripping you up is that in the default django template language, you don't tack on parenthesis to call functions. so you may have seen something like this in template code: code_removed however, in python code, it is indeed a method in the code_removed class.", "how do i change some models name from \"categorys\" to \"categories\" on admin site in the new dev django version? in the old version (whithout admin sites and admin models) you could just do this; however - now setting verbose_name_plural inside my modeladmin based class does nothing. anyone encouter the same issue?", "is there any particular advantage for the code_removed being included in the overriden code_removed? the code_removed timestamp definitely needs to be in there because you only want to set the value once, but wouldn't code_removed be sufficient for that field? i suppose i might be answering myself, but keeping it in code_removed would mean that you can't override the default value.", "great answer. works because center creates a string of n spaces that are then looped over. each space char is then ignored, but the current value in range can be found from forloop.counter (or forloop.counter0). see docs.djangoproject.com/en/dev/ref/templates/builtins/#center", "if you're using a recent django, changelist 9530 introduced an {% empty %} block, allowing you to write code_removed useful when the something that you want to do involves iterating over a non-empty list.", "one vm with apache, django and mysql. mod_wsgi. rhel.", "it requires special privileges to use port 80. you can try a code_removed.", "just for my understanding: do we need to call the save() method after deleting?", "i mean put those lines inside name check. it might be skipping the execution. i have not made enough tests.", "to put every template from different apps in one directory code_removed is not a good design. but, as i know, after adding your code_removed in the code_removed, code_removed might go to search the app's template under the directory which is under the code_removed. thus, you can separate the template for various app. (django 1.7 -.1.9", "one downside: it defaults to code_removed and i didn't find a way to override it yet. created a new question for this: stackoverflow.com/q/34798703/854477", "@guettli unexpected that you had written a solution first and a minute before you started the bounty? i did it also in a strange order: i found details for the solution from django source, then found it all is in the docs about finally that you had known the solution first.", "if ipython is available (code_removed) then code_removed will automatically use it's shell and then you can use the magic command code_removed: code_removed", "look at setting the field's widget and choices when writing the form class. code_removed the default widget is a drop down select.", "@chronial interesting. could you please give as an example one context in which this method would not work and yours would instead? i'm not arguing in favor of my version -- actually i like yours --, i'm just curious. also, consider that the django version by the time of my answer is around 1.2~1.3.", "to be more clear - there's no onetomany in django, only manytoone - which is foreignkey described above. you can describe onetomany relation using foreignkey but that is very inexpressively. a good article about it:", "related, for mixing querysets from the same model, or for similar fields from a few models, starting with django 1.11 a code_removed method is also available: code_removed code_removed new in django 1.11. uses sql\u2019s union operator to combine the results of two or more querysets. for example: code_removed the union operator selects only distinct values by default. to allow duplicate values, use the all=true argument. union(), intersection(), and difference() return model instances of the type of the first queryset even if the arguments are querysets of other models. passing different models works as long as the select list is the same in all querysets (at least the types, the names don\u2019t matter as long as the types in the same order). in addition, only limit, offset, and order by (i.e. slicing and order_by()) are allowed on the resulting queryset. further, databases place restrictions on what operations are allowed in the combined queries. for example, most databases don\u2019t allow limit or offset in the combined queries.", "for me the problem got solved by simply reinstalling mysql-python code_removed", "what i really want is \"take models.py as gospel, and make me a clean on from that point on\". thus retaining the ability to set a deployment up from scratch, or work from an existing deployment.", "just open your project urls.py, then find this if statement. code_removed you can change settings.debug on true and it will work always. but if your project is a something serious then you should to think about other solutions mentioned above. code_removed in django 1.10 you can write so: code_removed", "checkout dajax: dajax project easy to use ajax libraries for django fast, easy and lightweight libraries to implement ajax inside your django projects. ready to use in 5 minutes. dajax is a powerful tool to easily and super-fastly develop asynchronous presentation logic in web applications using python and almost no lines of js source code. it supports up to four of the most popular js frameworks: prototype, jquery, dojo and mootols.", "feels like django left me...", "if its possible, how to do it?", "my take on this issue, i think is the nicest. i keep a my_filters.py on the templatetags directory. code_removed and you would use like this: code_removed", "you have to run the development server such that it listens on the interface to your network. e.g. code_removed listens on every interface on port 8000. it doesn't matter whether you access the webserver with the ip or the hostname. i guess you are still in your own lan. if you really want to access the server from outside, you also have to configure your router to forward port e.g. code_removed to your server. check your firewall on your server whether incoming connections to the port in use are allowed! assuming you can access your apache server from the outside successfully, you can also try this: stop the apache server, so that port code_removed is free. start the development server with code_removed", "i added the code that i am testing.", "you're right, that was a confusing way to clarify. i intended to modify rather than rewrite the models in the original question, but it makes more sense to show just the more useful answer. fixed.", "i vote against using double parentheses (()) as template tag. it may work well as long as no function call is involved but when tried the following code_removed with firefox (10.0.2) on mac i got a terribly long error instead of the intended logic. <[]> went well for me, at least up until now. edit 2012-03-29: please note that $invalidwidgets is deprecated. however i'd still use another wrapper than double braces. for any angular version higher than 0.10.7 (i guess) you could change the wrapper a lot easier in your app / module definition: code_removed api docs.", "this is how it's done, but usually the command is called code_removed. also, in code_removed you will need to put code_removed and code_removed etc.", "i have tried to use ajaxableresponsemixin in my project, but had ended up with the following error message: improperlyconfigured: no url to redirect to. either provide a url or define a get_absolute_url method on the model. that is because the createview will return a redirect response instead of returning a when you to send json request to the browser. so i have made some changes to the code_removed. if the request is an ajax request, it will not call the code_removed method, just call the code_removed directly. code_removed", "i had this problem when i had activated my virtualenv as a different user than the one who created it. it seems to be a permission problem. i discovered this when i tried the answer by @cwc and saw this in the output: code_removed switching back to the user that created the virtualenv, then running the original code_removed command went without problems. hope this helps!", "@'alex okrushko' no, it doesn't seem safe (with angular 1.3). my variables show correctly and it feels awesome, but my angular-ui calendar won't display anything. i'd love to be proven i'm wrong.", "try this code_removed", "i am upvoting this answer but i received an error when trying to use code_removed. perhaps only available in newer versions of django.", "this looks painful. why so many hoops to grab a variable?", "i split my large (7k lines) views.py file to separate files and the increase in speed was significant.", "i suppose it's a bit more readable than my own mixin i suggested here. even probably more efficient, as those cleans don't raise validations errors\u2026", "i am new to django and pretty new to ajax. i am working on a project where i need to integrate the two. i believe that i understand the principles behind them both, but have not found a good explanation of the two together. could someone give me a quick explanation of how the codebase must change with the two of them integrating together? for example, can i still use the code_removed with ajax, or do my responses have to change with the use of ajax? if so, could you please provide an example of how the responses to the requests must change? if it makes any difference, the data i am returning is json.", "if you want a simple one-line solution that doesn't involve exception handling, conditional statements or a requirement of django 1.6+, do this instead: code_removed", "cleaner than the accepted answer, no reason to have.all().filter(xxx).", "i want to use python to convert json data into a python object. i receive json data objects from the facebook api, which i want to store in my database. my current view in django (python) (code_removed contains the json): code_removed this works fine, but how do i handle complex json data objects? wouldn't it be much better if i could somehow convert this json object into a python object for easy use?", "you can do it this way: code_removed now go variable could be either the object you want or none ref:", "i also had to add 'django.contrib.auth.context_processors.auth' to the template_context_processors tuple.", "that's great until someone else has to maintain your code. think: \"principle of least magic\"", "this will also not work when you are saving a multi-table child model class. the parent instance is created first before saving the child instance. and by default, the pk for the child instance is attained from the parent instance's pk.", "it's a good solution but this method includes the reverse relation fields such as a reverse foreignkey and those are not exactly \"fields\". anyone know how to distinguish the actual fields?", "you need to add the path of your pip installation to your path system variable. by default, pip is installed to code_removed (pip now comes bundled with new versions of python), so the path \"c: python34 scripts\" needs to be added to your path variable. to check if it is already in your path variable, type code_removed at the cmd prompt to add the path of your pip installation to your path variable, you can use the control panel or the code_removed command. for example: code_removed note: according to the official documentation, \"[v]ariables set with setx variables are available in future command windows only, not in the current command window\". in particular, you will need to start a new cmd.exe instance after entering the above command in order to utilize the new environment variable. thanks to scott bartell for pointing this out.", "cross-site request forgery (csrf) in simple words assume you are currently logged into your online banking at code_removed assume a money transfer from code_removed will result in a request of (conceptually) the form code_removed. (your account number is not needed, because it is implied by your login.) you visit code_removed, not knowing that it is a malicious site. if the owner of that site knows the form of the above request (easy!) and correctly guesses you are logged into code_removed (requires some luck!), they could include on their page a request like code_removed (where code_removed is the number of their cayman islands account and code_removed is an amount that you previously thought you were glad to possess). you retrieved that code_removed page, so your browser will make that request. your bank cannot recognize this origin of the request: your web browser will send the request along with your code_removed cookie and it will look perfectly legitimate. there goes your money! this is the world without csrf tokens. now for the better one with csrf tokens: the transfer request is extended with a third argument: code_removed. that token is a huge, impossible-to-guess random number that code_removed will include on their own web page when they serve it to you. it is different each time they serve any page to anybody. the attacker is not able to guess the token, is not able to convince your web browser to surrender it (if the browser works correctly...), and so the attacker will not be able to create a valid request, because requests with the wrong token (or no token) will be refused by code_removed. result: you keep your code_removed monetary units. i suggest you donate some of that to wikipedia. (your mileage may vary.) edit from comment worth reading: it would be worthy to note that script from code_removed normally does not have access to your anti-csrf token from code_removed because of http access control. this note is important for some people who unreasonably send a header code_removed for every website response without knowing what it is for, just because they can't use the api from another website.", "importing my signals in the ready() method did not work. i went back to just doing it in models.py and setting dispatch_uid to avoid duplicates", "did you first remove installed pip version?", "this is the configuration i was missing. tk", "this is only way to roll!", "this confirms what i knew, but my code_removed still is giving invalid_choice when i give it an code_removed value:(", "for django >= 1.8 you can use the length function, which is @pratyush's code_removed under the hood for mysql, or code_removed for some other databases: code_removed", "note: if the renamed table is part of a unique together relationship, you have to redeclare it with db.create_unique", "this is the answer that works with django 1.11", "i have changed the name of an app in django by renaming its folder, imports and all its references (templates/indexes). but now i get this error when i try to run code_removed code_removed how can i debug and solve this error? any clues?", "@v-light each app has its own table and each project has its own database.", "@user568109 could you explain \"besides code_removed is too permissive and would defeat use of credentials.\"?", "converting to list === call code_removed to get a new iterator object and call it's code_removed method until code_removed is thrown. so definitively there is gonna be an exception somewhere;)", "shouldn't you replace code_removed with code_removed? docs.djangoproject.com/en/1.8/topics/i18n/timezones/\u2026", "@guilhermejunqueira:cool!", "this is an expansion on mounir's answer. i've added a bash script that covers this for you. just run code_removed instead of code_removed and it'll work exactly the same way. code_removed", "this seems like a \"something you can do\", not something you should do. it significantly blooms the query complexity over two simple checks.", "this gets executed after parsing the settings. any idea how to make this load before the settings?", "with this solution should other models foreignkey to user or userprofile?", "example link is down.", "if it's a value you'd like to have for every request & template, using a context processor is more appropriate. here's how: make a code_removed file in your app directory. let's say i want to have the code_removed value in every context: code_removed add your context processor to your settings.py file: code_removed use code_removed in your view to add your context processors in your template. the code_removed shortcut does this automatically: code_removed and finally, in your template: code_removed", "@guyarad, the problem is: x= jsonpickle.decode('[{\"name\":\"object1\"},{\"name\":\"object2\"}]') gives a list of dictionaries ([{'name': 'object1'}, {'name': 'object2'}]), not a list of objects with properties (x[0].name == 'object1'), which is what the original question required. to get that, i ended up using the object_hook/namespace approach suggested by eddygeek, but the quick/dirty approach by ubershmekel looks good, too. i think i could use object_hook with jsonpickle's set_encoder_options() (undocumented!), but it would take more code than the basic json module. i'd love to be proven wrong!", "also that wouldn't put it in the virtualenv", "well i like the simplicity! why the code_removed though? i didn't use it before and it still worked in code_removed.", "i don't have enough reputation to reply to the comment in question, but it's important to note that if you're going to use jinja, it does not support the '-' character in template block names, while django does. this caused me a lot of problems and wasted time trying to track down the very obscure error message it generated.", "hey, now you got a point but somehow, i prefer doing without knowing and then reverse-engineering it: d.", "yeah but you can't run it from anywhere!", "(next) if isinstance(self.created,unicode): v = models.datetimefield().to_python(self.created); self.created = timezone.make_aware(v, self.modified.tzinfo) #self.modified = timezone.now() is executed before the if to have tzinfo value set", "could you please edit in an explanation of why this code answers the question in a way that's different from some of the very similar earlier answers? code-only answers are discouraged, because they don't teach the solution.", "yeah, i was tempted to give up on this, and either write to mysql directly, or just use a charfield().", "fixed - i think it's considered totally acceptable for you to edit dumb typos in other people's answers yourself so if you see more just jump in:-)", "ah, got it.. thanks!", "i am on django 1.8 and this works (@monajalal settings.py)", "i have the similar issue, in my case it was caused by having a commented script inside the body tag. code_removed", "today we use many web apps and sites for our needs. most of them are highly useful. i will show you some of them used by python or django. washington post the washington post\u2019s website is a hugely popular online news source to accompany their daily paper. its\u2019 huge amount of views and traffic can be easily handled by the django web framework. code_removed nasa the national aeronautics and space administration\u2019s official website is the place to find news, pictures, and videos about their ongoing space exploration. this django website can easily handle huge amounts of views and traffic. code_removed the guardian the guardian is a british news and media website owned by the guardian media group. it contains nearly all of the content of the newspapers the guardian and the observer. this huge data is handled by django. code_removed youtube we all know youtube as the place to upload cat videos and fails. as one of the most popular websites in existence, it provides us with endless hours of video entertainment. the python programming language powers it and the features we love. dropbox dropbox started the online document storing revolution that has become part of daily life. we now store almost everything in the cloud. dropbox allows us to store, sync, and share almost anything using the power of python. survey monkey survey monkey is the largest online survey company. they can handle over one million responses every day on their rewritten python website. quora quora is the number one place online to ask a question and receive answers from a community of individuals. on their python website relevant results are answered, edited, and organized by these community members. bitly a majority of the code for bitly url shortening services and analytics are all built with python. their service can handle hundreds of millions of events per day. reddit reddit is known as the front page of the internet. it is the place online to find information or entertainment based on thousands of different categories. posts and links are user generated and are promoted to the top through votes. many of reddit\u2019s capabilities rely on python for their functionality. hipmunk hipmunk is an online consumer travel site that compares the top travel sites to find you the best deals. this python website\u2019s tools allow you to find the cheapest hotels and flights for your destination. click here for more: 25-of-the-most-popular-python-and-django-websites, what-are-some-well-known-sites-running-on-django", "here's a less verbose solution provided by django: code_removed source:", "add code_removed at the corresponding line in the python code and execute it. the execution will stop with an interactive shell. in the shell you can execute python code (i.e. print variables) or use commands such as: code_removed continue execution code_removed step to the next line within the same function code_removed step to the next line in this function or a called function code_removed quit the debugger/execution also see:", "this is useful. thanks!", "using the code_removed and code_removed functions: code_removed", "would using string.printable work?", "better to be explicit.", "according to the documentation, you can only display the code_removed representation of a foreignkey: seems odd that it doesn't support the code_removed style format which is used everywhere else in the db api. turns out there's a ticket for this feature, which is marked as won't fix.", "with django 1.7+ this should be the accepted answer:)", "if using a class-based view: code_removed", "did you first remove installed pip version?", "i love this trick - it's a poor man's migrations", "a small typo in case anyone is cutting & pasting: \"propogate\" instead of \"propagate\" at the end.", "great answer! i missed it in the comments. thanks for putting it here", "i'm using django 1.11 and the part of this answer featuring code_removed doesn't work for me, but this question and answer does: stackoverflow.com/questions/15048963/\u2026", "use signals to add accessor-methods on-the-fly. i saw this technique in django-photologue: for any size object added, the post_init signal will add the corresponding methods to the image model. if you add a site giant, the methods to retrieve the picture in giant resolution will be code_removed. the methods are generated by calling code_removed from the code_removed signal: code_removed see the source code of photologue.models for real-world usage.", "@tkone, it doesn't really make it much more difficult. if just doubles the amount of effort and time. it doesn't add any kind of prohibitive processing. the trick is also associating the csrf token to a domain-specific cookie, and sending this cookie along with the form. both the cookie and the form post data would have to be sent to the server on the post request. this way would require a cookie-hijacking attack to be able to emulate a legitimate request.", "is there a way to define a couple of fields as unique in django? i have a table of volumes (of journals) and i don't want more then one volume number for the same journal. code_removed i tried to put code_removed as attribute in the fields code_removed and code_removed but it doesn't work.", "whoa! great find, thanks!", "worked perfect. like a champ", "the short answer is yes, at this point it would be better to use code_removed. (keeping in mind when i originally answered this, it was in 2009!) i have updated the answer to reflect this.", "the address ranges assigned for private networks are: 172.16.0.0\u2013172.31.255.255 (16 \u201cclass b\u201d networks), 192.168.0.0\u2013192.168.255.255 (1 \u201cclass b\u201d network) and 10.0.0.0\u201310.255.255.255 (1 \u201cclass a\u201d or 256 \u201cclass b\u201d networks).", "thanks greatly, try all stated above. none worked on osx 10.11 expect this", "@janekolszak i did not know this - only took about a day of lots of cursing and banging on the keyboard - until reading this and swapping over to 2.7. and guess what, everything works hunky-dory~", "you shouldn't downvote people that answer their own questions. it is encouraged, even if it is pre-determined.", "i highly recommend epdb (extended python debugger). one thing i love about epdb for debugging django or other python webservers is the epdb.serve() command. this sets a trace and serves this on a local port that you can connect to. typical use case: i have a view that i want to go through step-by-step. i'll insert the following at the point i want to set the trace. code_removed once this code gets executed, i open a python interpreter and connect to the serving instance. i can analyze all the values and step through the code using the standard pdb commands like n, s, etc. code_removed and tons more that you can learn about typing epdb help at any time. if you want to serve or connect to multiple epdb instances at the same time, you can specify the port to listen on (default is 8080). i.e. code_removed host defaults to 'localhost' if not specified. i threw it in here to demonstrate how you can use this to debug something other than a local instance, like a development server on your local lan. obviously, if you do this be careful that the set trace never makes it onto your production server! as a quick note, you can still do the same thing as the accepted answer with epdb (code_removed) but i wanted to highlight the serve functionality since i've found it so useful.", "i use and enjoy jinja2 as well, but i've found that there are some couplings to the \"contrib\" applications. particularly, the admin tool is pretty heavily tied to django templates. also, i had to recreate the login decorators in contrib.auth to be jinja2 friendly, but not too hard.", "running code_removed from a cronfile won't work as cron uses code_removed as its default shell, which doesn't support code_removed. you need to set the shell environment variable to be code_removed: code_removed it's tricky to spot why this fails as code_removed doesn't log the error details. best to alias yourself to root so you get emailed with any cron errors. simply add yourself to code_removed and run code_removed. more info here:", "you should declare code_removed with a second argument code_removed so that it passes all arguments you don't care to the built-in code_removed view.", "fwiw, the django authors actually use class-based views in a few places, e.g. contrib.formtools: code.djangoproject.com/browser/django/trunk/django/contrib/\u2026", "might want to make both of the foreignkeys not required (blank=true, null=true), or add some sort of custom validation to make sure that there is at least one or the other. what about the case of a business having a generic number? or an unemployed dude?", "1.9.6 passes the stdin to a code_removed github.com/django/django/blob/1.9.6/django/core/management/\u2026 | docs.python.org/2/library/code.html likely the interactive nature of it breaks things. there should be a cli option of code_removed to pass stdin to an code_removed.", "the django documentation on the call_command fails to mention that code_removed must be redirected to code_removed. the example code should read: code_removed", "i want to write a django query equivalent to this sql query: code_removed how to construct the django queryset filter? code_removed this doesn't work, because it code_removeds the filters. i want to code_removed the filters to get union of individual querysets.", "if you wondering (like me) where code_removed being used as or operator comes from, it's actually the set union operator. it's also used (not here) as bitwise or: stackoverflow.com/questions/5988665/pipe-character-in-python", "best solution by far.", "i installed this recently, but only today figured out to configure \"post_mortem=true\" in my dev settings as documented by tom's django-pdb. now i can just cruise along and when things go bad i'm dropped right to the location of the problem. thanks tom!", "@pykler unfortunatly the ready() function is also called each times makemigrations is called. is there a way to make this function called only for runserver.", "@purrell do you mean the code_removed call? that's going to evaluate any iterator you hand to it for sure. so yes, the queryset is going to be in memory.", "anonymous_required decorator for class based views code: code_removed usage: code_removed for view functions from code: code_removed usage: code_removed", "could exclude be used with negated comparisons?", "turns out that this error is because there are indexes bonding this column (django generated unique_together constraints). any idea how to continue from here?", "this executes once for each worker, in my case, it's executed 3 times in total.", "i edited my answer to incorporate fixes for the problems you found (just guessing at them based on your answer), and tested it on a production database with millions of rows.", "i am currently defining regular expressions in order to capture parameters in a url, as described in the tutorial. how do i access parameters from the url as part the code_removed object? my code_removed currently returns an empty code_removed object. i'd like to learn how to do this without a library so i can get to know django better.", "what i did was to create my own storage that will just not save the file to the disk: code_removed then, in my models, for my imagefield, i've used the new custom storage: code_removed", "@kirkwoll to pass the related fields clash/conflict error.", "i'm getting this error when doing syncdb - i think it's to do with the order django goes through the tables.", "you can do like this: code_removed hope that works. ignas", "you need to add code_removed to the email field to let code_removed accept it", "the big downside of your current approach is its inefficiency with large search result sets, as you have to pull down the entire result set from the database each time, even though you only intend to display one page of results. in order to only pull down the objects you actually need from the database, you have to use pagination on a queryset, not a list. if you do this, django actually slices the queryset before the query is executed, so the sql query will use offset and limit to only get the records you will actually display. but you can't do this unless you can cram your search into a single query somehow. given that all three of your models have title and body fields, why not use model inheritance? just have all three models inherit from a common ancestor that has title and body, and perform the search as a single query on the ancestor model.", "this solution is far from great and i would advise you don't use it when you need to load related objects or defer loading of some properties. the way django works with code_removed is it: 1st creates an instance (executes models code_removed, than follows the code_removed signal) and only after that the properties that are related are populated. so in such cases usage of code_removed is meaningless and you will be loading every related property with a separate query (because it will get fetched before related properties are set). this can be a big performance hit to your app.", "@tupteq can't you expect that? in the age of virtualization and containers i think you can and should strive for that. maybe not always possible, but you can selectively address individual issues by defining environment variables to allow overrides as necessary. sure beats the \"works for me\"-shrug when the junior asks the senior why something isn't working.", "query attribute? what? where is that - i checked the link but it is a giant un-alphabetical (why would anyone make a list that isn't alphabetical?) list...", "@solartic: you're right, thanks. i didn't mention this because the code_removed field created by django for formsets gets pretty hairy\u2026", "i ended up doing code_removed, it works when i am inside my project directory, my django_settings_module is correct and i try to run a script that import models, views, etc.", "i think it depends on the size of the site as to whether you need to step up from using sqlite, i've successfully used sqlite on several smaller live sites and it runs great.", "i've tried this and still get the same error: 'raise improperlyconfigured(\"error loading mysqldb module: %s\" % e) django.core.exceptions.improperlyconfigured: error loading mysqldb module: no module named mysqldb'", "what is name of the column in your command? code_removed or code_removed?", "i solved this problem by using 'django-admin' command as following instead: code_removed just remove the \".py\" attached to \"django-admin\"", "schweeeet feature!", "as may 2018 (the date i've tested this answer again), it shows version as 1.11.5 despite i've installed 2.0.1. but code_removed in python shell displays the right version", "in case you don't know in which app your model exists, you can search it this way: code_removed remember that your_model_name must be lowercase.", "bootstrapping templates with data is not an uncommon practice. it's actually recommended in backbone.js", "i have first_name, last_name & alias (optional) which i need to search for. so, i need a query to give me all the names that have an alias set. only if i could do: code_removed so, what is the equivalent to the above?", "great answer and post. something you might want to add to your blog-post, though, would be adding the media context_processor explicitly, as this answer mentions. otherwise, as i found out the hard way, code_removed won't be defined in templates. as of 1.8+, it's not explicitly added.", "i have my settings.py file in an external directory. that way, it doesn't get checked into source control, or over-written by a deploy. i put this in the settings.py file under my django project, along with any default settings: code_removed note: this is very dangerous if you can't trust local_settings.py.", "why can't you just have code_removed in the book model, and then code_removed?", "so if we're storing topic names using slugs (e.g. databases, or \"database-administration\"), should we just index and search based on the slug column instead of the name column?", "new in django 1.5, now you can create your own custom user model (which seems to be good thing to do in above case). refer to 'customizing authentication in django' probably the coolest new feature on 1.5 release.", "i also had the similar requirement. most of the examples on net are asking to create models and create forms which i did not wanna use. here is my final code. code_removed and in html to upload i wrote: code_removed following is the html which displays content of file: code_removed", "thanks you so much, it works perfectly!", "for date__range you need to put 01 of the next month. here is a link to the documentaion that exmaplins that it translates to 00:00:00.0000 of the dates, hence the last day in your range is not included. docs.djangoproject.com/en/1.10/ref/models/querysets/#range in this case i use: date__range=[\"%s-%s-1\"%(year,month),\"%s-%s-1\"%(year,int(mont\u200c\u200bh)+1)]", "actually i think the code_removed would be issued to the database so slicing would not occur in python but in the database. see limiting-querysets for more information.", "i don't do anything as fancy as anyone else apparently:). i just take advantage of the orm that django supplies.", "i guess init call is more dry than doing this in every view functions. but this method is much less hacky. i gotta change one of my form class based on this method. right now i am using a hack to avoid the validation error, which is caused the ajax filter of foreignkey choices.", "ok, so nm about the groupby function in this context. with the the q function you should be able to perform any or query you need:", "oh ok.. thanks for the info, that makes sense then why it wasn't working, unless i missed something, it is really not clear about this in the django documentation", "this from documentation should be helpful: code_removed", "well there is a case where last_modified won't be updated: when code_removed arg is provided and 'last_modified' is not in list, i would add: code_removed", "here code_removed is the set union operator, not bitwise or.", "thanks, that solved my problem with respect to this: code_removed", "i don't understand your subquestion. is what_to_put_here just a method on item? if so, then your syntax is correct. this question about the specific situation of having named choices in a field object.", "during development, adding a quick code_removed can help diagnose problems in views or anywhere else, without the need to use a debugger.", "i've updated my examples to make it clearer -- thanks.", "can you explain code_removed?", "@dave: no, this is not one of south's supported autodetections. i just tested on south 0.7.3 and south thinks that the old column name has been deleted, and that the new column name has been deleted.", "for a very simple but not efficient or scalable solution, you can just use the built in django code_removed view. this is excellent for quick prototypes or one-off work, but as has been mentioned throughout this question, you should use something like apache or nginx in production. code_removed", "thanks, @stevepitchers, code_removed solved the issue for me (without needing to pipe curl). hit the problem updating via pip in the first place.", "@mermoz really? it appears the ticket remains set as wontfix. it doesn't appear to work, either (django 1.3)", "@jmyles, if by \"regular django test runner\" you mean code_removed then in fact this answer does work just fine. (just tried it)", "it works in 1.4, thanks.", "can you please estimate approximate price for 5000 hits per second, assuming its like linkedin, using django. assume an average programmer has built the site and ofcourse added caching. assume that algorithms etc(to make things fast) not used as i donno them yet.", "i am trying to get started with south. i had an existing database and i added south (code_removed, code_removed). then, i updated code_removed to add a field and ran code_removed. it seemed to find the field and said i could apply this with code_removed. but, doing that gave the error: code_removed code_removed is the first table listed in code_removed. i am running django 1.2, south 0.7", "this does not provide an answer to the question. to critique or request clarification from an author, leave a comment below their post.", "actually the log path is defined absolutely, it's simply not created/appended to because the script is not running.", "important to note: this should be added to the code_removed class. i read it too quickly and tried to add it to my code_removed or code_removed classes and had no idea why they weren't rendering the \"read only fields\". btw, is there a possibility to have true \"read-only fields in a form?", "i had to set both code_removed and code_removed to make this work in django 1.4", "nice stuff, useful in the case of django 1.4", "great answer, thanks. is there a way to express a more complex expression with datetime.now as a default? e.g. now + 30 days (the following doesn't work) code_removed", "again adding a comment to confirm that this method will execute the code only once. no need for any locking mechanisms.", "but it works only on edit record. when i create new record - passed to date tile value ignored. when i change this record - new value is set.", "you might be able to step around the 255 repetition limit if your length is a multiple of items less than 255 - e.g. code_removed for >1025 (i can't test this on a mysql db right now though)", "also works great in a for loop with a formset, just use the logic \"for form in formset\" and you can set choices and initial data as seen above.", "@andr\u00e9terra now?", "add code_removed in your view code to dump debug information.", "having the same error trying to install matplotlib for python 3, those solutions didn't work for me. it was just a matter of dependencies, though it wasn't clear in the error message. i used code_removed then code_removed and it worked. hope it'll help!", "yeah it does the same thing. i tried it. anyway, perhaps this could be useful in some other situation. thanks for pointing that out. you don't exactly start out knowing all the shortcuts as a beginner. sometimes you gotta travel the load winding road to appreciate the crow's fly", "i've found whenever the documentation is lacking, a quick dip into the source code has been extremely productive. everything is laid out in a straightforward, comprehensible manner. with beautiful code like that, i almost wonder if the documentation is necessary! (i kid.)", "error in code: usermode.doesnotexist", "if the number is coming from a model, i found this to be a nice patch to the model: code_removed", "you can use django's code_removed with code_removed objects: code_removed", "note to oracle users: it is not true that \"code_removed and code_removed are never saved as code_removed by django\". it is true for most backends, but oracle will force an empty string to null, so the django oracle backend is an exception to the above statement django docs", "today we use many web apps and sites for our needs. most of them are highly useful. i will show you some of them used by python or django. washington post the washington post\u2019s website is a hugely popular online news source to accompany their daily paper. its\u2019 huge amount of views and traffic can be easily handled by the django web framework. code_removed nasa the national aeronautics and space administration\u2019s official website is the place to find news, pictures, and videos about their ongoing space exploration. this django website can easily handle huge amounts of views and traffic. code_removed the guardian the guardian is a british news and media website owned by the guardian media group. it contains nearly all of the content of the newspapers the guardian and the observer. this huge data is handled by django. code_removed youtube we all know youtube as the place to upload cat videos and fails. as one of the most popular websites in existence, it provides us with endless hours of video entertainment. the python programming language powers it and the features we love. dropbox dropbox started the online document storing revolution that has become part of daily life. we now store almost everything in the cloud. dropbox allows us to store, sync, and share almost anything using the power of python. survey monkey survey monkey is the largest online survey company. they can handle over one million responses every day on their rewritten python website. quora quora is the number one place online to ask a question and receive answers from a community of individuals. on their python website relevant results are answered, edited, and organized by these community members. bitly a majority of the code for bitly url shortening services and analytics are all built with python. their service can handle hundreds of millions of events per day. reddit reddit is known as the front page of the internet. it is the place online to find information or entertainment based on thousands of different categories. posts and links are user generated and are promoted to the top through votes. many of reddit\u2019s capabilities rely on python for their functionality. hipmunk hipmunk is an online consumer travel site that compares the top travel sites to find you the best deals. this python website\u2019s tools allow you to find the cheapest hotels and flights for your destination. click here for more: 25-of-the-most-popular-python-and-django-websites, what-are-some-well-known-sites-running-on-django", "thank you dmitry!", "@bobort the code snippet was added by @pdenya; i suspect he copied the field code from jkm's post (linked above), which was written before code_removed existed, and then added more modern code as usage.", "@zach: there are examples right at the top of the docs i linked to.", "you can pass it as code_removed", "you have nice answers about that here: stackoverflow.com/questions/8159310/\u2026 and here: stackoverflow.com/questions/4384098/\u2026", "what about foreignkey? i have errors like this code_removed", "specifically, it should be code_removed", "please note: that's will not work with manifeststaticfilesstorage as code.djangoproject.com/ticket/19295", "another solution that appears to work for both python 2.x and 3.x is code_removed. i've found this can be useful for quick-and-dirty scripts that you only need to run once, without having to go through the cumbersome process of creating a code_removed command.", "all you have to do is set the \"root\" url to the homepage view. since the homepage view is already restricted for logged on users, it'll automatically redirect anonymous users to the login page. kepp the url as it is. and add something like: code_removed", "fml... what happens when that parameter is passed in on a linux machine?", "in a virtualenv you can simply code_removed.", "to be more clear - there's no onetomany in django, only manytoone - which is foreignkey described above. you can describe onetomany relation using foreignkey but that is very inexpressively. a good article about it:", "when you have list of items and you want to check the possible values from the list then you can't use code_removed. the sql query will be like code_removed which is not true. you have to use code_removed operator for this so you query will be like code_removed for that django provide code_removed operator.", "please check @dr-jimbob 's answer because recent versions of pip will actually upgrade all other dependencies that the package you are upgrading depends on.", "see also django-pdb as per my answer below. gives you code_removed and code_removed commands.", "you can also use./manage.py schemamigration my_app renaming_column_x --empty to create an empty migration and just to place the code in it", "i'll add that using the same name for a project and an app within it also causes problems with code_removed, causing it to be unable to import your project settings correctly. this happened to me, and i solved it by refactoring the app to the effect of code_removed.", "try this in url.py admin.site.site_header = 'my administration' admin.site.index_title = ('my admin') admin.site.site_title = ('my admin page')", "interesing command, thanks", "isn't south suporting such operation?", "the reverse() is used to adhere the django dry principle i.e if you change the url in future then you can reference that url using reverse(urlname).", "@wadim hence step 0: \"make sure that you have no desync between migrations on disk, and migrations that have been executed on the database\".", "i want to create an object that contains 2 links to users. for example: code_removed but i am getting the following errors when running the server: accessor for field 'target' clashes with related field 'user.gameclaim_set'. add a related_name argument to the definition for 'target'. accessor for field 'claimer' clashes with related field 'user.gameclaim_set'. add a related_name argument to the definition for 'claimer'. can you please explain why i am getting the errors and how to fix them?", "worked perfect. like a champ", "yes, that is the difference.", "the most efficient way (before django 1.2) is this: code_removed", "if you have a more complicated setup, or don't want to use code_removed-type statements, you can define a function called code_removed in your tests.py (or tests/__init__.py), which returns an instance of code_removed.", "--empty doesn't help much, instead use --auto and modify created migration. this way it won't claim field has been deleted for next migration of models.py.", "@applegrew, nice catch! the \"community\" modified my post to point to specific branches and they picked 1.4", "i have work with this, just thank you. it's really perfect for understand fast and correcly.", "i highly recommend jquery. there are several tutorials on how to implement it. note: microsoft also announced a while ago that jquery would be the official client-side framework for asp.net mvc, so its good to know regardless of what server side framework you're using.", "unknown option: k", "isn't it better to use code_removed signal instead? overwriting code_removed method does not seem to be a good idea. docs.djangoproject.com/en/dev/ref/signals/#pre-save", "this solution works poorly if you're using migrations. every time you run code_removed it interprets the default as the time when you run code_removed, and therefore thinks the default value has changed!", "also auto slug at django-admin. added at modeladmin: code_removed as here: code_removed", "+1 for using a generic view rather than implementing your own (no matter how simple) as in the (current) top voted answer.", "@thnee could you clarify the 'delete from', specifying the tool used?", "in 1.7 docs.djangoproject.com/en/1.7/howto/static-files/\u2026", "@akaihola true you will have to deal with your database directly (create a trigger or something similar, depending on which type you use), but in most non trivial projects you are going to have to tweak the db settings yourself anyway. another big advantage here is if you have any other jobs that access your database, it's kept consistent across the board. it also simplifies your life if you ever have to write insert/update statements using djangos raw sql features.", "this looks painful. why so many hoops to grab a variable?", "there is this line in the django tutorial, writing your first django app, part 1: code_removed how is code_removed called into existence and what is it? i suppose the code_removed part is the lowercase version of the model code_removed used in the tutorial, but what is code_removed? can you elaborate? update 1: based on ben james' answer i located a place in the documentation where it is described: following relationships \"backward\".", ".exists() seems to be even more efficient", "you make a good point - if you think of your website traffic as a queue, then how many responses can you serve per hour? if you keep the response time short, you can serve more, and so have 'greater scalability' - it doesn't really matter if you use django, twisted, rails or technology from the planet zod.", "if you are using the static serve view in development, you have to have debug = true: warning this will only work if debug is true. that's because this view is grossly inefficient and probably insecure. this is only intended for local development, and should never be used in production. docs: serving static files in developent edit: you could add some urls just to test your 404 and 500 templates, just use the generic view direct_to_template in your urls. code_removed", "this is usefull too", "@mitjagustin the guessing works this this: \"hmm, code_removed is the biggest bank, so out of every 10 000 people visiting my code_removed, about 500 will be code_removed customers -- and if i'm a little lucky, 5 of them will be logged in to code_removed at that time. let's see...\"", "this is an expansion on mounir's answer. i've added a bash script that covers this for you. just run code_removed instead of code_removed and it'll work exactly the same way. code_removed", "after trying several of these answers, then reaching out to a colleague, what worked for me on ubuntu 16.04 was: code_removed in my case, it was only an old version of pillow 3.1.1 that was having trouble (pillow 4.x worked fine), and that's now resolved!", "this is pretty much what we're doing. if you use --delete-ghost-migrations option at step 4, you can leave out step 1.", "this worked, thanks. i updated from centos 6.5 -> 6.7 and it must have defaulted the value to off during the update, because it was working fine before the update. simple fix.", "the one that has proven to work best for me, and which seems most up-to-date is the one over at launchpad. it integrated seamlessly with my application that already utilizes the django.auth module. to get a copy run: code_removed or install it via pypi code_removed", "i guess, since django 1.5 with the allowed hosts setting it's safe to use. docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts", "just to be sure, will this work with django on top of apache/mod_wsgi? or just with the django runsrever command?", "error in code: usermode.doesnotexist", "you can try: code_removed", "you have to run the development server such that it listens on the interface to your network. e.g. code_removed listens on every interface on port 8000. it doesn't matter whether you access the webserver with the ip or the hostname. i guess you are still in your own lan. if you really want to access the server from outside, you also have to configure your router to forward port e.g. code_removed to your server. check your firewall on your server whether incoming connections to the port in use are allowed! assuming you can access your apache server from the outside successfully, you can also try this: stop the apache server, so that port code_removed is free. start the development server with code_removed", "as of django 1.7 the code_removed is deprecated (to be removed in 1.9) in favor of the the new application loading system. the 1.7 docs give us the following instead: code_removed edited per tttthomasssss comment.", "@markessel these hoops are made so the variable is accessible in every view you'll make as long as it uses the requestcontext function. you could always fetch a settings variable manually in every view. i'd choose a reusable context processor anytime instead of good ol' copy & paste.", "render form via django template instead of as_(ul|table|p)(). this article shows, how to use template to render cusstomforms instead of code_removed, code_removed... to make it work change code_removed to code_removed code_removed to code_removed", "code_removed works perfectly in ubuntu code_removed raises an environment error", "great!!, that is what i was looking for", "i've recently moved beyond django, so i'm more familiar with jinja2 templating, but here we go: note that it is stored in the database as 'm' and 'f' psuedo: code_removed actual: code_removed for something more complex with more choices it might be worth writing some logic to search through the category_choices tuple of tuples. as of now, with two choices for gender, i don't see that being the case. also see: django template tags", "'feroxtl' you need to credit @guettli for this answer, as he commented this on the accepted answer a year prior to your post.", "in addition to the multiple settings files mentioned by jim, i also tend to place two settings into my settings.py file at the top code_removed and code_removed set to the path of the code and the url to the base of the site, all other settings are modified to append themselves to these. code_removed e.g. code_removed so when moving the project i only have to edit these settings and not search the whole file. i would also recommend looking at fabric and capistrano (ruby tool, but it can be used to deploy django applications) which facilitate automation of remote deployment.", "ps. you can then use this in your templates: <img src=\"{{ media_url }}images/myimage.png\"/>", "you're not recommended to do that from the code_removed - and this is intended as you shouldn't really be executing random scripts from the django environment (but there are ways around this, see the other answers). if this is a script that you will be running multiple times, it's a good idea to set it up as a custom command ie code_removed to do this create a file in a subdir of code_removed and code_removed of your code_removed, ie code_removed and in this file define your custom command (ensuring that the name of the file is the name of the command you want to execute from code_removed) code_removed", "i am trying to implement your solution but, when django.contrib.auth.views.login redirects (after authenticates succesfully) the instance of user is not in the request, so user.is_authenticated() always returns false. any help?", "@paulpreibisch it should change on each page load - not on each login. this way the attacker would have to request the page each time they wanted to submit the form. makes it much more difficult.", "just for sharing, i had a bit of issues with vincent demeester's answer. everything is fine except in init.py file, i have to write in this way: __init__.py: code_removed this way i still don't need to change my code_removed method in urls.py. i am on python 3.6.1 and django 1.11.4.", "in leopard, i bring on the activity monitor and kill python. solved.", "to be more clear: s.lott has the simple example, just serving files straight from django, no other setup needed. elo80ka has the more efficient example, where the web-server handles static files and django doesn't have to. the latter has better performance, but may require more setup. both have their places.", "i could use some help complying with django's csrf protection mechanism via my ajax post. i've followed the directions here: i've copied the ajax sample code they have on that page exactly: i put an alert printing the contents of code_removed before the code_removed call and it is indeed populated with some data. i'm not sure how to verify that the token is correct, but i'm encouraged that it's finding and sending something. but django is still rejecting my ajax post. here's my javascript: code_removed here's the error i'm seeing from django: [23/feb/2011 22:08:29] \"post /memorize/ 403 2332 i'm sure i'm missing something, and maybe it's simple, but i don't know what it is. i've searched around so and saw some information about turning off the csrf check for my view via the code_removed decorator, but i find that unappealing. i've tried that out and it works, but i'd rather get my post to work the way django was designed to expect it, if possible. just in case it's helpful, here's the gist of what my view is doing: code_removed thanks for your replies!", "you print the queryset's code_removed attribute. code_removed", "you could use this library: it allows you to do the following: code_removed", "i would dispute your comment about prefetch related \"generally doesn't make much sense\". that's true for fk fields marked unique, but anywhere where multiple rows have the same fk value (author, user, category, city etc etc) prefetch cuts down bandwidth between django and the db but not duplicating rows. it also generally uses less memory on the db. either of these is often more important than the overhead of a single extra query. given this is the top answer on a reasonably popular question i think that should be noted in the answer.", "i'll add that using the same name for a project and an app within it also causes problems with code_removed, causing it to be unable to import your project settings correctly. this happened to me, and i solved it by refactoring the app to the effect of code_removed.", "i don't know about you, but for me, code_removed is very annoying for big projects! i prefer using o.o.p. (extending) in my projects!", "from the django-admin documentation: if you use the bash shell, consider installing the django bash completion script, which lives in code_removed in the django distribution. it enables tab-completion of code_removed and code_removed commands, so you can, for instance... type code_removed. press [tab] to see all available options. type code_removed, then [tab], to see all available options whose names start with code_removed.", "this is great but i ran into an error where, when running an app level test (code_removed) the second bit of code would throw an error stating that code_removed was not available. i avoided it by wrapping the second snippet in a code_removed check, which did the trick. thanks for the answer!", "@ryan hiebert, you damn right!", "here's a list of some relatively high-profile things built in django: the guardian's \"investigate your mp's expenses\" app politifact.com (here's a blog post talking about the (positive) experience. site won a pulitzer. ny times' represent app everyblock peter harkins, one of the programmers over at wapo, lists all the stuff they\u2019ve built with django on his blog it's a little old, but someone from the la times gave a basic overview of why they went with django. the onion's av club was recently moved from (i think drupal) to django. i imagine a number of these these sites probably gets well over 100k+ hits per day. django can certainly do 100k hits/day and more. but ymmv in getting your particular site there depending on what you're building. there are caching options at the django level (for example caching querysets and views in memcached can work wonders) and beyond (upstream caches like squid). database server specifications will also be a factor (and usually the place to splurge), as is how well you've tuned it. don't assume, for example, that django's going set up indexes properly. don't assume that the default postgresql or mysql configuration is the right one. furthermore, you always have the option of having multiple application servers running django if that is the slow point, with a software or hardware load balancer in front. finally, are you serving static content on the same server as django? are you using apache or something like nginx or lig can you afford to use a cdn for static content? these are things to think about, but it's all very speculative. 100k hits/day isn't the only variable: how much do you want to spend? how much expertise do you have managing all these components? how much time do you have to pull it all together?", "@simonweber good idea. also, on your dev machine, if you put code_removed in your.bashrc (or similar), you can just type code_removed in the root dir of any django project that uses this pattern. @rsp, this will help you too i guess, just don't type code_removed for those other projects.", "just for my understanding: do we need to call the save() method after deleting?", "thanks for the compliments on django packages. however, we moved the source code to github.com/opencomparison/opencomparison:", "then i'd suggest either write a custom view that does the processing and then calls the generic view, or write a decorator e.g. pre_process and decorate the generic view: (r'^one/$', pre_process(redirect_to), {'url': '/another/'})", "at the time (1 year ago) my personal fork had the non apache file serving fallback the original repository hasn't included yet.", "can i use django orm from this command?", "would the answer be significantly different for in django versions > 1.5? (e.g. the now-current 1.9)", "if code_removed does this code_removed, it can override values in code_removed. (the code_removed file has to be imported at the end of code_removed).", "i am on django 1.8 and this works (@monajalal settings.py)", "i like to use django-debug-toolbar, its very handfull", "coolest. tip. evar. :)", "sometimes you have to use extra formatting in code_removed - actually, any time when inheritance is used. code_removed no clash here, but related_name is defined once and django will take care for creating unique relation names. then in children of value class, you'll have access to: code_removed", "i was also missing proxy in above answer. i used code_removed from django_easy_timezones. code_removed and here is method code_removed, ipv4 and ipv6 ready: code_removed", "interesting....", "this isn't an ultimate answer for the question, however for someone it may solve the problem. i got the same error in my project after checking out a really old commit (going to detached head state) and then getting the code base back up to date. solution was to delete all *.pyc files in the project.", "please note: this is an ancient question with ancient answers. most of the linked apps are now unmaintained. these days, most people seem to use django-allauth or python-social-auth. i'll leave the original question intact below for posterity's sake. there are at least half a dozen django apps that provide openid authentication for django: django-openid django-openid-auth another django-openid-auth, which seems to be dead django-authopenid django-socialauth (which also provides authentication with twitter and facebook accounts) django-socialregistration (has facebook and twitter authentication, too) django-openid-consumer, a fork of simon willison's original django-openid. seems more suited for simple blog comments than a full fledged registration workflow django-social-auth i played around with a couple of them. simon willison's django-openid made a good impression, but as he is at the forefront of trendsetting in djangoland, i sometimes have difficulties wrapping my head around his trends (e.g. the whole dynamic urlpatterns system in django-openid). what's more, i couldn't get login to work with google. django-authopenid made a good impression, and it seems to have good integration with django-registration. django-socialauth and django-socialregistration have support for twitter and facebook, which is definitely a plus. who knows if and when facebook will start to be an openid provider...? socialauth seems to have its share of problems, though. so, what is the best openid app out there? please share any positive (and negative) experience. thanks!", "hi. i have a question. i'm using django-storages with the amazon s3 backend. will this trigger a new upload?", "this solution doesn't work for me (same error than for @chrismiller. my solution: in code_removed: code_removed. note that you can't have a views.py anymore (or at least it won't be read @shiftntab: error for not finding your views in views.py). hope it helps!", "instead of disabling your constraint, permanently modify it to on delete set null. that will accomplish a similar thing and you wouldn't have to turn key checking on and off. like so: code_removed have a read of this ( and this (", "we can use django builtin exception which attached to the models named as code_removed. so, we don't have to import code_removed exception. instead doing: code_removed we can do this: code_removed", "@monajalal please see harald's comment.", "one of the best ways to retrieve the username and password is to view and update them. the user model provides a perfect way to do so. in this case, i'm using django 1.9 navigate to your root directory i,e. where you \"manage.py\" file is located using your console or other application such as git. retrieve the python shell using the command \"python manage.py shell\". import the user model by typing the following command \"from django.contrib.auth.models import user\" get all the users by typing the following command \"users = user.objects.all()\" print a list of the users for python 2 users use the command \"print users\" for python 3 users use the command \"print(users)\" the first user is usually the admin. select the user you wish to change their password e.g. code_removed set the password code_removed save the new password code_removed start the server and log in using the username and the updated password.", "code_removed is raised when django attempts to save the record to the database. the field is not required to be filled in by the user, and that's the problem because at the database level it's not null.", "note that if any of your test package names coincide with top level module names which get imported during the test run, the pkgutil snippet will cause the import to fail because the tests get added as code_removed. a quick workaround is to code_removed any that cause problems after the above. (or you could rename your folders;) )", "ctrl+z is undo. if you don't see a command prompt, your server is still running.", "just change the model and run code_removed in 1.9 django automatically detects that you've deleted and created a single field, and asks: code_removed say yes, and the right migration gets created. magic.", "how is saying that it's good enough for you helpful to my understanding of yhe question?", "...i love you...i spent hours debugging it....damn firefox didn't return any message!", "look at django poor man's cron which is a django app that makes use of spambots, search engine indexing robots and alike to run scheduled tasks in approximately regular intervals see:", "[' 'script_name', 'request_method', 'path_info', 'server_protocol', 'query_string', 'content_length', ' ' ' 'server_name', 'wsgi.url_scheme', 'server_port', 'wsgi.input', ' 'wsgi.multithread', ' ' 'wsgi.version', 'wsgi.run_once', 'wsgi.errors', 'wsgi.multiprocess', ' 'content_type', 'csrf_cookie', '", "don't look any further: code_removed generic approach: code_removed the beauty about this is you do not need to change the code_removed variable for crontab from code_removed to code_removed", "thank you very much..... how can i access a custom field from html??", "just for anyone getting stuck (like i did): code_removed code_removed should be listed using quotes, as should code_removed (i.e. don't try to import it) code_removed accepts lower case or upper case 'model_name'", "why have you made the code_removed setting blank? it needs to be the path to your media directory. since, as you say, your media is in a subdirectory called code_removed, you should put that in code_removed.", "make sure you're version of setuptools is up to date using code_removed it seems possible to have multiple conflicting installs of setuptools. this could possibly be because i use conda to manage packages with the anaconda distribution and using code_removed was showing '12.0.5' but this was still failing. this was because the version the pip cli was picking up was 0.6rc11", "you can paste this js into your html file, remember put it before other js function code_removed", "can someone please tell me how someone would reverse these policy changes?", "i had written this in the expectation of migrations being runnable from scratch once the process was finished. if the migrations failed, perhaps one of us missed something. i'll have a think about it, and see if there are any other steps i need to add.", "save even more loc by using the @render_to decorator available in django-annoying. bitbucket.org/offline/django-annoying", "ok, that sounds promising. how do i access the relevant field object? form.company.queryset = rate.objects.filter(company_id=the_company.id)? or via a dictionary?", "the shortcut command for code_removed: code_removed is: code_removed", "as known this was a path issue. the base of my custom packages shared a name with a directory set in a /etc/profile. the packages were in a different location however for the webserver. so i removed the offending entries from my $pythonpath and was good to go! thanks for the help.", "you have two foreign keys to user. django automatically creates a reverse relation from user back to gameclaim, which is usually code_removed. however, because you have two fks, you would have two code_removed attributes, which is obviously impossible. so you need to tell django what name to use for the reverse relation. use the code_removed attribute in the fk definition. e.g. code_removed", "@joeb yes we can do that way also.", "if we were to compare context vs. template tags on a single variable, then knowing the more efficient option could be benificial. however, you might be better off to dip into the settings only from templates that need that variable. in that case it doesn't make sense to pass the variable into all templates. but if you are sending the variable into a common template such as the base.html template, then it would not matter as the base.html template is rendered on every request, so you can use either methods. if you decide to go with the template tags option, then use the following code as it allows you to pass a default value in, just in case the variable in-question was undefined. example: get_from_settings my_variable as my_context_value example: get_from_settings my_variable my_default as my_context_value code_removed", "try code_removed less secure if you're not firewalled off or on a public lan, but it's what i use and it works. edit: interestingly enough i've been needing to add this to a few of my 1.8 projects even when code_removed. very unsure why. edit: this is due to a django security update as mentioned in my comment.", "what is the recommended idiom for checking whether a query returned any results? example: code_removed i suppose there are several different ways of checking this, but i'd like to know how an experienced django user would do it. most examples in the docs just ignore the case where nothing was found...", "in django doc, code_removed \"follows\" foreign-key relationships, selecting additional related-object data when it executes its query. code_removed does a separate lookup for each relationship, and does the \"joining\" in python. what does it mean by \"doing the joining in python\"? can someone illustrate with an example? my understanding is that for foreign key relationship, use code_removed; and for m2m relationship, use code_removed. is this correct?", "the problem is here it's not getting the value from the input field vld_value = request.post.get('validatevalue')", "assume, i have a class in app/models.py named code_removed: app/models.py code_removed app/views.py code_removed only a a little change in the code_removed and added pagination code from django documentation here app/templates/app/exam_list.html normal content list code_removed paginate section code_removed app/urls.py code_removed", "no answer back from jathanism", "still no luck. i get: geoip query must be a string, not type nonetype", "feels like django left me...", "this is the correct answer stackoverflow.com/a/35647389/8893667 the given answer is unreliable at times and as mentioned above when you use code_removed", "i have tried to use ajaxableresponsemixin in my project, but had ended up with the following error message: improperlyconfigured: no url to redirect to. either provide a url or define a get_absolute_url method on the model. that is because the createview will return a redirect response instead of returning a when you to send json request to the browser. so i have made some changes to the code_removed. if the request is an ajax request, it will not call the code_removed method, just call the code_removed directly. code_removed", "at the end of settings.py i have the following: code_removed this way if i want to override default settings i need to just put settings_local.py right next to settings.py.", "i have extended the mixin of @livskiy as follows: code_removed and the dictfield is: code_removed it can be used by extending it in your models a _dict field will be added when you sync/migrate and that field will store the state of your objects", "i had this problem when i had activated my virtualenv as a different user than the one who created it. it seems to be a permission problem. i discovered this when i tried the answer by @cwc and saw this in the output: code_removed switching back to the user that created the virtualenv, then running the original code_removed command went without problems. hope this helps!", "be carefull when using this. will also format numbers in urls and other that you add to the template", "the quickest way is to remake the virtualenv completely. i'm assuming you have a requirements.txt file that matches production, if not: code_removed", "@rossipedia: just noting that the._meta api is public (though it used to be private, probably when this answer was first written): docs.djangoproject.com/en/1.8/ref/models/meta/\u2026", "code_removed is documented here.", "\"now\" as in april 29th, 2011 as per the timestamp.", "response headers seem to indicate asp.net $ curl -i curse.com 301 moved permanently content-type: text/html; charset=utf-8 location: curse.com server: microsoft-iis/7.0 x-powered-by: asp.net date: thu, 03 dec 2009 22:16:05 gmt content-length: 144 connection: close", "as answer by miles, code_removed is used for multi-line comments, but you can also comment out text on the same line like this: code_removed", "@arie not necessarily, perhaps a better example, for a webshop services would include things like generating cart sessions, asynchronous tasks like product ratings calculations, creating and sending emails etcetera", "@markpneyer: as far as i understand, a onetoone field is just that: one-to-one. it does not have to be onto. see this example: a place does not have to be a restaurant.", "that's what this does.", "you have to run the development server such that it listens on the interface to your network. e.g. code_removed listens on every interface on port 8000. it doesn't matter whether you access the webserver with the ip or the hostname. i guess you are still in your own lan. if you really want to access the server from outside, you also have to configure your router to forward port e.g. code_removed to your server. check your firewall on your server whether incoming connections to the port in use are allowed! assuming you can access your apache server from the outside successfully, you can also try this: stop the apache server, so that port code_removed is free. start the development server with code_removed", "post digging, but today this helped me: i am not always using all the applications of my codebase (depending of the django site used), and code_removed needs the tested application to be loaded in code_removed. between having to load the app just for testing purposes and using this, i chose this.", "the community edition does not support django, you have to get the professional edition:(", "installing postfix did it for me. there seemed to be no answer here that was suitably upvoted, so this page can be a bit confusing. notice in the documentation: the parameters settings.py have default values. when i installed postfix it fixed the problem, locally at least. hope this helps another confused soul!", "i've never run into issues using it against python 2 (specifically 2.4-2.7). i used it just a few days ago, in fact. i've never tried with python 3.", "this won't work if your ids are not contiguous", "onetoonefield (one-to-one) realizes, in object orientation, the notion of composition, while foreignkey (one-to-many) relates to agregation.", "a bit late to the party. but django canvas has recently come out and it deserves a place here. don't start your project with code_removed. instead you can use something like django canvas to help piece together a blank project with the modules you need. you go to that site, tick some options and then download a blank project, so simple. it has all the common things like south schema migrations and command extensions as well as a lot of other best practices mentioned here. plus it has a great code_removed script that will install python, virtualenv, pip, django and whatever you need to start from a fresh copy of windows, osx or linux.", "another option is that you have a duplicate entry in installed_apps. that threw this error for two different apps i tested. apparently it's not something django checks for, but then who's silly enough to put the same app in the list twice. me, that's who.", "perfect answer!", "be careful here. this can be extremely expensive if you're in a loop of some kind and you're retrieving objects one by one. if you don't want the call to the database, just do: code_removed it does the same thing as some of these other answers, but it doesn't make the database call to retrieve an object. this is also useful if you want to make a copy of an object that doesn't exist yet in the database.", "i like this solution - think its the cleanest way. not sure what that empty logger adds to the solution..", "@joshrusso your link above is dead", "beware alterting table can take a long time, better to set the server global for code_removed to 0 and put it back once the dirty work is done. besides it might lock for writing your tables.", "slug a short label for something, containing only letters, numbers, underscores or hyphens. they\u2019re generally used in urls. for example, in a typical blog entry url: the last bit (spring) is the slug.", "@flimm stackoverflow.com/questions/3297048/\u2026 i'm not sure about django, but django rest framework has: from rest_framework import status status. 403", "this is awesome trick:d", "based on github history and issues that have been resolved in 2018, it would seem that tastypie is indeed still maintained.", "did you first remove installed pip version?", "to me simplejson worked fine with 2.7", "can't not create a initial model in this way", "i was getting 500 internal server error and was not able to debug it as the code was not accessed through a browser and terminal didn't show the traceback. this bit of code in a middleware made all the difference: code_removed instead of processing the exception i, am processing the response object and printing the traceback when the status code not 200 and voila i can now see what is causing the error. which in this particular case was an improperly indented block. yuji's answer above and the middleware documentation helped me reach this solution.", "if you dont't want html escaped, look at the code_removed filter and the code_removed tag filter: code_removed tag: code_removed", "i have found a solution if i have a model class like: code_removed then this field will show up in my admin change page", "the answer by alasdair covers the basics identify the migrations you want by code_removed code_removed using the app name and the migration name but it should be pointed out that not all migrations can be reversed. this happens if django doesn't have a rule to do the reversal. for most changes that you automatically made migrations by code_removed, the reversal will be possible. however, custom scripts will need to have both a forward and reverse written, as described in the example here: how to do a no-op reversal if you had a code_removed operation, then maybe you just want to back out the migration without writing a logically rigorous reversal script. the following quick hack to the example from the docs (above link) allows this, leaving the database in the same state that it was after the migration was applied, even after reversing it. code_removed this works for django 1.8, 1.9 update: a better way of writing this would be to replace code_removed with code_removed in the snippet above. these are both functionally the same thing. (credit to the comments)", "you can use jthanism's approach, but define it on an abstract class. any model you want to have the timestamp behavior (which is often useful) can just inheret from that instead of code_removed. see my answer", "ok, i see plenty of these errors around. i have tried everything i know to do and have yet to figure this out. i am working on a development server running python 2.5 and django 1.3. django 1.3 was installed using python setup.py install after unpacking the tar.gz download. all works well, i seldom have the need to run code_removed but am trying to use the new staticfiles app and am running into problems. code_removed ok, so i have code_removed issue. from django install i double check my code_removed directory. code_removed ok, let's check out what i have, echo $python_path was empty, so i set it code_removed still no luck. lets check what sys.path has to say code_removed path is there, i even created /usr/lib/python2.5/site-packages/django.pth with contents code_removed anyone got an clues to what is going on here? i found a symlink further up the path that was getting in the way, but no on to a new error. code_removed i also tried creating a new project to see if there were any issues there and get the same utils.version error. side node: unode from #django helped me a bit, set up virtualenv on same machine and got past the errors so still not sure what is up with this actual install here, but it seems to not be in the django projects but in the django/python install.", "this is very good question. python manage.py changepassword user_name example:- code_removed", "if you are in a virtualenv you need to activate it before you can run./manage.py 'command' code_removed if you config workon in.bash_profile or.bashrc code_removed *please dont edit your manage.py file maybe works by isnt the correct way and could give you future errors", "@thomas-beedesk: agreed. hence, \"more-or-less equivalent\".", "django will use the version of python specified by the pythonpath environment variable. you can use code_removed in a shell to determine which version will be used. the module versions used by django will be the module versions installed under the version of python specified by pythonpath.", "render form via django template instead of as_(ul|table|p)(). this article shows, how to use template to render cusstomforms instead of code_removed, code_removed... to make it work change code_removed to code_removed code_removed to code_removed", "you can do this in your view works fine for me without declaring in settings.py code_removed", "why it is not efficient?", "when doing a comparison, it's worth noting here that each resource has it's own queryset in tastypie. this is a huge design flaw, because it means that nested resources become separate queries and this can not be easily optimized. it is difficult to maintain a well-performing api using tasty pie because of this.", "i was in a repl, this is exactly the answer i was looking for.", "if you are using code_removed you can use the cors package to allow cors like so instead of writing your middleware; code_removed", "how do i run an update and select statement on the same queryset rather than having to do two queries, one to select the object and one to update the object? the equivalent in sql would be something like: code_removed", "just never could have imagined that when the default welcome page is displayed but proxying an upstream server doesn't work, it is still the fault of a third-party security policy. i just focused my debugging effort on the config file... though should have been able to find the error log earlier indeed.", "i know de morgan's law, and this is my point exactly: your example only works because it takes advantage to turn the code_removed in the first query into an code_removed because you're using code_removed. in the general case, it's probably more correct to think of chaining as a code_removed, i.e. code_removed. sorry about the harsh language above. your answer really is good, but i'm worried about new developers taking your answer too generally.", "consider using \"django command extensions\" which which adds the./manage.py shell_plus command which does this for you (several other cool stuff, too.)", "you can use code_removed to get to the outer code_removed, so in your case code_removed.", "i'm having difficulty settings up the forms.py file to include a radio or select button. i looked at the documentation but was having no luck applying the correct syntax. here is what i currently have in code_removed-- code_removed and in my code_removed -- code_removed how can i set up a set of radio buttons of 'value1', 'value2', 'value3'? how to do this with a select dropdown? thank you.", "note shai berger's answer below", "you can do it in one line, using code_removed and code_removed: code_removed or, to reuse this easily: code_removed if you want it to handle keys that aren't good attribute names, check out code_removed's code_removed parameter.", "better than custom code_removed or code_removed / code_removed is to allow your database to handle this, and let your frontend ignore it.", "yep, using the default middleware.", "ok, so how exactly does the server know whether or not it should send \"*\"?", "well, suppose i inject a malicious iframe of \"bank.com/transfer?from=x&to=y\"; in a, say, facebook.com. if you're customer of bank.com and you go to facebook, that iframe will load bank page, with your cookies (because browser will send them along to a known domain) and make a money transfer. without you knowing anything.", "@andrefsp: i'm using mysql. i'll edit my question to add that.", "your understanding is mostly correct. you use code_removed when the object that you're going to be selecting is a single object, so code_removed or a code_removed. you use code_removed when you're going to get a \"set\" of things, so code_removeds as you stated or reverse code_removeds. just to clarify what i mean by \"reverse code_removeds\" here's an example: code_removed the difference is that code_removed does an sql join and therefore gets the results back as part of the table from the sql server. code_removed on the other hand executes another query and therefore reduces the redundant columns in the original object (code_removed in the above example). you may use code_removed for anything that you can use code_removed for. the tradeoffs are that code_removed has to create and send a list of ids to select back to the server, this can take a while. i'm not sure if there's a nice way of doing this in a transaction, but my understanding is that django always just sends a list and says select... where pk in (...,...,...) basically. in this case if the prefetched data is sparse (let's say u.s. state objects linked to people's addresses) this can be very good, however if it's closer to one-to-one, this can waste a lot of communications. if in doubt, try both and see which performs better. everything discussed above is basically about the communications with the database. on the python side however code_removed has the extra benefit that a single object is used to represent each object in the database. with code_removed duplicate objects will be created in python for each \"parent\" object. since objects in python have a decent bit of memory overhead this can also be a consideration.", "just incase anyone else comes across this question\u2026 i've created a template tag which lets you create a code_removed: accepts the same arguments as the 'range' builtin and creates a list containing the result of 'range'. syntax: {% mkrange [start,] stop[, step] as context_name %} for example: {% mkrange 5 10 2 as some_range %} {% for i in some_range %} {{ i }}: something i want to repeat n {% endfor %} produces: 5: something i want to repeat 7: something i want to repeat 9: something i want to repeat", "you are probably using virtualenvwrapper. don't forget to select your enviroment by running: code_removed", "how about if i have created the app01 and app02, then how can i put the app02 into app01 now?", "django scales, but requires too much computing power. blog.disqus.com/trying-out-this-go-thing", "thanks for the compliments on django packages. however, we moved the source code to github.com/opencomparison/opencomparison:", "in windows, open cmd and find the location of python_home using code_removed, now add this location to your environment path using: code_removed or refer this in linux, open terminal and find the location of python_home using code_removed, now add the code_removed to the path variable using: code_removed", "this work for my need, only init one field in the form. thank you.", "here is a method that works well and allows you to convert the file to a certain format as well (to avoid \"cannot write mode p as jpeg\" error): code_removed where image is the django imagefield or your_model_instance.image here is a usage example: code_removed hope this helps", "works great, i haven't tested the speed though. do you think there will be any issues with speed?", "@espen we hit a difference between python 2.4 and 2.5. in 2.5 the islice function accepts a step value of none and interprets it as 1. the fix is trivial. by the way, i sense that learning python debugging techniques plus some django specific tricks would benefit you a lot. amazing stuff out there.", "@ajp, you're right. you should always use code_removed rather than code_removed, especially if you aren't certain whether code_removed exists in your model or has been overridden. this happens if you have any field with code_removed or any field named code_removed that isn't the pk.", "on osx these commands worked for me code_removed", "raise is not bad", "you must have been doing control + z.. instead do control + c that will kill the server session... cheers!!!", "can i use django orm from this command?", "if using aptana for django development, watch this: if not, consider using it.", "you need to find (or define) a 'get' template tag, for example, here. the tag definition: code_removed and it\u2019s used like: code_removed", "how do you crack the session open? the only thing code_removed gives me is a code_removed object.", "this answer assumes too much about the environment and doesn't directly solve the problem if you are using pyenv for example.", "i'm using django 1.11 and the part of this answer featuring code_removed doesn't work for me, but this question and answer does: stackoverflow.com/questions/15048963/\u2026", "what's the difference between django onetoonefield and foreignkey?", "@chefarov not sure what you are trying to do, seems complex. you would have to dig into django's startup sequence to see where best to put your code. most likely though, easiest is to call it at the top of settings file itself if you want to make sure the settings have not been loaded yet.", "to anthony: i just found funny that the top-voted comment provided instructions for linux, freebsd and osx but not for vista as specified by the poster", "and how can we deal with the migrations?", "looks like this isn't necessary in the new code_removed. \"as a shortcut, this method also accepts a single argument in the form code_removed.\"", "how to pass the data between angular2 and jinja2? any help", "shouldn't you also import the handlers.py module somewhere? i am trying this and it doesn't seem to be defining the handler for the signal.", "i had try, not work..", "you need to add code_removed to the email field to let code_removed accept it", "edit: another (slightly better) way of doing what i'm suggesting is answered here: django form input field styling all the above options are awesome, just thought i'd throw in this one because it's different. if you want custom styling, classes, etc. on your forms, you can make an html input in your template that matches your form field. for a charfield, for example, (default widget is code_removed), let's say you want a bootstrap-looking text input. you would do something like this: code_removed and as long as you put the form field name matches the html code_removed attribue, (and the widget probably needs to match the input type as well) django will run all the same validators on that field when you run code_removed or code_removed and styling other things like labels, error messages, and help text don't require much workaround because you can do something like code_removed and style them however you want. the actual fields are the ones that require some fiddling. i don't know if this is the best way, or the way i would recommend, but it is a way, and it might be right for someone. here's a useful walkthrough of styling forms and it includes most of the answers listed on so (like using the attr on the widgets and widget tweaks).", "nice work @zorpix. worked well on ubuntu 15.04.", "please don't do this.", "context processors are awesome. say you have a different user model and you want to include that in every response. instead of doing this: code_removed context processes give you the ability to pass any variable to your templates. i typically put mine in code_removed: code_removed in your code_removed add the following line to your code_removed code_removed now every time a request is made it includes the code_removed key automatically. also signals win. i wrote a blog post about this a few months ago so i'm just going to cut and paste: out of the box django gives you several signals that are incredibly useful. you have the ability to do things pre and post save, init, delete, or even when a request is being processed. so lets get away from the concepts and demonstrate how these are used. say we\u2019ve got a blog code_removed so somehow you want to notify one of the many blog-pinging services we\u2019ve made a new post, rebuild the most recent posts cache, and tweet about it. well with signals you have the ability to do all of this without having to add any methods to the post class. code_removed there we go, by defining that function and using the post_init signal to connect the function to the post model and execute it after it has been saved.", "thanks, that fixed my issue too, i'm on centos 7.", "i understand that this solution can be used to execute some arbitrary code when the server starts but is it possible to share some data that would be loaded? for example, i want to load an object that contains a huge matrix, put this matrix in a variable and use it, via a web api, in each request a user can do. is such a thing possibe?", "okay guys, i am writing a django application and i just want an idea of what actually a csrf token is and how it protects the data. is the post data not safe if you do not use csrf tokens? i know how to use csrf_token but i just need some information how it works.", "sadly i didn't get your answer though", "yes and no. first css classes are by convention used for styling, if you need an unique identifier its better to use code_removed. second its usually the template side's responsobilty to do exaclty this, esspecially if you are going to access this class via frontend methods (js, css). i didn't say your answer is wrong. in my opinion its just bad practice (esspecially when your working in a team with frontend and backend developers).", "worked for me on 1.10 too.", "for class based views you can use code_removed", "@cafebabe1991 what do you mean? the code_removed class doesn't deal with templates at all, so the question doesn't seem relevant...", "cross-platform support by using only code_removed: code_removed", "@jameslin: there is none: code_removed is the same as code_removed as both use code_removed and return an object instead of a queryset.", "could i save it directly to the database? stackoverflow.com/questions/24705246/\u2026", "using 1.3, the official django documentation entry worked for me.", "this was all i needed. although the best practice would be to use environment variable to differentiate between development and production environment and debug toggle.", "the key is apt-get install python-dev. no idea why i'm installing a dev version of python 2 years later, but this works as of today using python 2.7.3. only 3 hours wasted.", "call objects = managerwithfirstquery as objects = managerwithfirstquery() - dont forget parentheses - anyway, you helped me so +1", "code_removed", "you are perhaps confusing the washington post with the washington times. i believe the times is all on django, but it is a much smaller paper.", "virtualenv + python = life saver if you are working on multiple django projects and there is a possibility that they all don't depend on the same version of django/an application.", "this is eli5 at its best.", "code_removed", "should i uninstall and reinstall?", "correct answer. my solution class mychangeform(forms.modelform): def __init__(self, *args, **kwargs): super(mychangeform, self).__init__(*args, **kwargs) self.fields['my_field'].disabled = true", "django 1.5 supports python 2.6.5 and later. if you're under linux and want to check the python version you're using, run code_removed from the command line. if you want to check the django version, open a python console and type code_removed", "one solution that i have employed is to do this: 1) create a custom management command, e.g. code_removed 2) use code_removed (on linux) or code_removed (on windows) to run my command at the required times. this is a simple solution that doesn't require installing a heavy amqp stack. however there are nice advantages to using something like celery, mentioned in the other answers. in particular, with celery it is nice to not have to spread your application logic out into crontab files. however the cron solution works quite nicely for a small to medium sized application and where you don't want a lot of external dependencies. edit: in later version of windows the code_removed command is deprecated for windows 8, server 2012 and above. you can use code_removed for same use.", "this has been happening to me now that i split time w django and flask lol", "i needed code_removed", "go to your project directory with code_removed. source/bin/activate (activate your env. if not previously). run the command code_removed", "ditto nate - when his answer was what i found a year and a half ago - i merely built upon it...", "doesn't work yet: code.djangoproject.com/ticket/15590", "thank you! you saved my time!", "how does this answer the original question?", "using first() is only a good idea if you don't care when there are multiples. otherwise, this solution is superior, because it will still throw an exception if you unexpectedly find multiple objects, which is normally what you would want to happen in that case.", "what are the benefits of code_removed over code_removed", ":o cool since which version is possible to do that?", "@eno the slug is added for seo and for permalink nicey-ness. the id is used for indexed lookup. the seo for stackoverflow is brilliant - and they use exactly this strategy. your argument was \"hide the database id\", which you've now turned in to \"seo\". what's the go?", "edit: a possible hack is to check the command lines arguments any(x in sys.argv for x in ['makemigrations', 'migrate'])", "@geckon not sure i follow, but in the ready method you can create anything you want and can make them module level globals that are importable if thats what you need.", "excellent, really. thanks", "here's what i do: make the column name change in your model (in this example it would be code_removed) run code_removed note code_removed can be anything you like, it's just a way of giving a descriptive name to the migration file. this will generate you a file called code_removed which will delete your old column and add a new column. modify the code in this file to change the migration behaviour to a simple rename: code_removed", "what is the code_removed argument useful for on code_removed and code_removed fields? for example, given the following code, what is the effect of code_removed? code_removed", "how can i order by descending my query set in django by date? code_removed i just want to filter from descending all the reserved by check_in date.", "dropping and reapplying an fk is changing your db. you're trying to defy the very constraints that allow the system to see some sense, it has no regard that an fk could be a temporary thing, and if it did know, it would panic.", "completly strange to me too, because the function has some kind of static functionallaty so why setup this settings...", "your solutions works for me. but i had \"invalid start byte...\" error for my file. solved it with code_removed", "it looks like code_removed is being evaluated when the model is defined, and not each time you add a record. django has a feature to accomplish what you are trying to do already: code_removed or code_removed the difference between the second example and what you currently have is the lack of parentheses. by passing code_removed without the parentheses, you are passing the actual function, which will be called each time a record is added. if you pass it code_removed, then you are just evaluating the function and passing it the return value. more information is available at django's model field reference", "well i couldn't find a django way, but i did find a python way from inside my model: code_removed", "this is what i am currently using for registration: code_removed is it possible not to require the user to login manually after creating an account, but rather simply to log them in automatically? thanks. edit: i had tried the login() function without success. i believe the problem is that authentication_backends was not set.", "@ciantic, see btimby's answer for what looks like a solution to the encoding problem.", "code_removed worked for me!", "this doesn't look right: code_removed. did you mean: code_removed?", "@dominic, \"when specifying the path, always use forward slashes, even on windows (e.g. c:/homes/user/mysite/sqlite3.db).\" from here: docs.djangoproject.com/en/1.1/intro/tutorial01/#database-set\u200c\u200bup", "tried @rocketmonkeys solution but downloaded files were being stored as *.bin and given random names. that's not fine of course. adding another line from @elo80ka solved the problem. here is the code i'm using now: code_removed you can now store files in a private directory (not inside /media nor /public_html) and expose them via django to certain users or under certain circumstances. hope it helps. thanks to @elo80ka, @s.lott and @rocketmonkeys for the answers, got the perfect solution combining all of them =)", "i'm still struggling a bit when it comes to laying out my own app. i feel like my main application is a bit heavy, but at the same time, i wouldn't be able to refactor it into anything close to resembling something loosely coupled. i'm leaning toward thinking that it wouldn't really be an improvement to have my main major entities separated, if they still depend heavily on one another, and there's no need to reuse or generalize on the horizon. i'm leaning toward \"don't prematurely refactor\" as an interpretation of \"don't prematurely optimize\"", "@bozojoe: do this in your terminal: code_removed; code_removed; code_removed; and it just works!", "whoa! great find, thanks!", "i seem to remember curse going through an acquisition about 6 months ago - that might have influenced their decision to change technologies. i wouldn't put it down to any inadequacy in django.", "update: django 1.7 now has a hook for this file: code_removed code_removed file: code_removed code_removed for django < 1.7 the number one answer does not seem to work anymore, urls.py is loaded upon first request. what has worked lately is to put the startup code in any one of your installed_apps init.py e.g. code_removed code_removed when using code_removed... this gets executed twice, but that is because runserver has some tricks to validate the models first etc... normal deployments or even when runserver auto reloads, this is only executed once.", "to add to existing answer - related name is a must in case there 2 fks in the model that point to the same table. for example in case of bill of material code_removed so when you will have to access this data you only can use related name code_removed it is not working otherwise (at least i was not able to skip the usage of related name in case of 2 fk's to the same table.)", "you can pass it as code_removed", "@simonweber good idea. also, on your dev machine, if you put code_removed in your.bashrc (or similar), you can just type code_removed in the root dir of any django project that uses this pattern. @rsp, this will help you too i guess, just don't type code_removed for those other projects.", "user3597950 pip command is not recognised by the w-pc, this actually due to the python path and pip install conflict, make sure the env path is added correctly, for 2.7-\"c: python27 scripts;\", and try to reinstall the pip.", "note: the high-profile companies mentioned use a variety of technology coupled on top of django to achieve scalability. few languages can achieve high scalability with a helping hand from distributed architecture or heavy caching. django is a \"sync\" language which can make more bottlenecks vs. an \"async\" language (see node.js). varnish is every web server(s) friend.", "i've tried that. doesn't work for some reason.", "i think the easiest (and maybe most elegant) solution here is to leverage the fact that you can set code_removed to a callable. so, to get around admin's special handling of auto_now, you can just declare the field like so: code_removed it's important that you don't use code_removed as the default value wouldn't update (i.e., default gets set only when the code is loaded). if you find yourself doing this a lot, you could create a custom field. however, this is pretty dry already i think.", "great, solved my problem on centos 7.3", "doesn't work for me. i'm starting the server with python3 manage.py runserver, also i'm not using a production server.", "@john: i can't recognize my answer anymore!:-) but you are completely right that it was too vague, even if correct - your examples make it clear, contrary to my original wording.", "@pykler unfortunatly the ready() function is also called each times makemigrations is called. is there a way to make this function called only for runserver.", "if you use a table to store file information, including which users should be able to download it, then all you need to send is the primary key, not the filename, and the app decides what to do.", "textmate, firebug, and pdb. the latter one saved me gazillion of times:)", "with django 1.7+ this should be the accepted answer:)", "@astrocybernaute make sure you have staticfiles app installed", "thanks for your answer. unfortunately i didn't provide enough detail to show that i can't use your approach.", "how can i use the nifty javascript date and time widgets that the default admin uses with my custom view? i have looked through the django forms documentation, and it briefly mentions django.contrib.admin.widgets, but i don't know how to use it? here is my template that i want it applied on. code_removed also, i think it should be noted that i haven't really written a view up myself for this form, i am using a generic view. here is the entry from the url.py: code_removed and i am relevantly new to the whole django/mvc/mtv thing, so please go easy...", "@geckon not sure i follow, but in the ready method you can create anything you want and can make them module level globals that are importable if thats what you need.", "the question was on how to automate the changing of settings to switch between environments:-)", "how did i not know this!?", "did you try following the instructions in the error message?", "it seem that this does not work for jinjia2 templates. i wish it did because it is a great solution. {{ myform.email|safe|add_class(\"css_class_1 css_class_2\") }}", "fyi it throws a django.db.utils.integrityerror if you try to add a duplicate.", "@user798719 the field does not have to be filled by the user, but should assign some value to that field before saving that object to database(for eg:in the save method of that model).", "code_removed did the job when using python 3's venv module. python 2's virtualenv supported code_removed flag, but one has to install code_removed on environments created by code_removed.", "setting readonly on widget only makes the input in the browser read-only. adding a clean_sku which returns instance.sku ensures the field value will not change on form level. code_removed this way you can use model's (unmodified save) and aviod getting the field required error.", "@sberder could you update the answer according to latest django version?", "@claymation, what should be included in settings (as app) in order to allow 'python manage.py makemigrations' or 'python manage.py migrate' to see the 'models.py' file in 'my product' directory?", "this is fine, unless you are returning some and some render_to_response()s. then the redirects fail.", "if you want to modify not override variables like lists (e.g. code_removed), you can import them in the local_settings.py like: code_removed and then in local_settings.py: code_removed", "the three line custom field is here: link", "@wadim yeah; code_removed:)", "fyi the new (1.0+) recommended method is onetoonefield(user) docs.djangoproject.com/en/dev/topics/auth/\u2026", "in windows, open cmd and find the location of python_home using code_removed, now add this location to your environment path using: code_removed or refer this in linux, open terminal and find the location of python_home using code_removed, now add the code_removed to the path variable using: code_removed", "can this result in duplicates in the result queryset?", "this way is supported in older versions of django if you cannot support redirectview in view.py code_removed in the url.py code_removed you can make it permanent by using code_removed", "@almostabeginner also note, i added a bit of sample code. in case it wasn't clear from the text alone - you have to reference the form itself, not individual fields, at which point the form auto-generates html that contains ids, as described. hopefully that helps.", "this doesn't guarantee that the order will be preserved, correct?", "something i just found to be interesting is django scripts, which allows you to write scripts to be run with python manage.py runscript foobar. more detailed information on implementation and scructure can be found here,", "i'm trying to use get_or_create for some fields in my forms, but i'm getting a 500 error when i try to do so. one of the lines looks like this: code_removed the error i get for the above code is: code_removed", "really nice. thanks. also a repository of custom tags would be great to share stuff, dont you think?", "how do i get the sql that django will use on the database from a queryset object? i'm trying to debug some strange behavior, but i'm not sure what queries are going to the database. thanks for your help.", "for me, i had to do code_removed", "try going to windows powershell or cmd prompt and typing: code_removed", "@richarddunn the ordering will be based on your model's default ordering, or if you use code_removed over the generated code_removed by the above mentioned code_removed. i haven't used django in years.", "there's a clone snippet here, which you can add to your model which does this: code_removed", "i was trying to redirect all 404s to the home page and the following worked great: code_removed", "all kinds of fun with signals: code.google.com/p/django-badges", "thank you very much..... how can i access a custom field from html??", "to add to what carles barrob\u00e9s said, you can generate a new key using the method that django uses in code_removed: code_removed", "got it sir........thanks a zillion", "this answer & comments has become outdated e.g. auth_profile_module is deprecated, code_removed", "works great..!.", "@almostabeginner one thing i can suggest for debugging - once you see the page in a browser, use view page source (generally by right-clicking), and look at the actual full page that django is generating. see if the fields exist, with the id or class identifier that you expect. also most browsers (possibly by installing a plugin) can run a debugger that shows you the css which is applied to a page, also helpful to see what's going on.", "@davidnathan did you set code_removed on the field? according to what i found in the source code, you can use a default function on a serialized field but it must be top level since it gets serialized by path name: github.com/django/django/blob/master/django/db/models/fields\u200c\u200b/\u2026", "delete necessary file from app folder instance path code_removed wiki -is my app", "for contextprocessor approach", "but youtube is not built with django. python might be fast, but not so for django.", "just simply comment out the line: allowed_hosts = [...]", "@akaihola sorry, the right url is: drommestipendet.hyperinteraktiv.no/sok/\u2026", "one csrf token is assigned to every session ( i.e. every time you log in). so before you wish to get some data entered by user and send that as ajax call to some function which is protected by csrf_protect decorator, try to find the functions that are being called before you are getting this data from user. e.g. some template must be being rendered on which your user is entering data. that template is being rendered by some function. in this function you can get csrf token as follows: csrf = request.cookies['csrftoken'] now pass this csrf value in context dictionary against which template in question is being rendered. now in that template write this line: now in your javascript function, before making ajax request, write this: var csrf = $('#csrf').val() this will pick value of token passed to template and store it in variable csrf. now while making ajax call, in your post data, pass this value as well: \"csrfmiddlewaretoken\": csrf this will work even if you are not implementing django forms. in fact, logic over here is: you need token which you can get from request. so you just need to figure out the function being called immediately after log in. once you have this token, either make another ajax call to get it or pass it to some template which is accessible by your ajax.", "there is pycharm from jetbrains which supports django and google apps. it looks promising. note: you need to buy a license for the professional version if you want django support. the community version desn't support django.", "folder setup: your project root should be something like: code_removed the media folder is supposed to hold things like images, downloads and other material that might be uploaded during normal use of the website (i.e. after development is finished) the static folder is supposed to hold all the css/js and other material that is a part of the development of the site settings.py: media_root is the absolute server path to the static folder mentioned above. that means it should be something like: code_removed media_url is the relative browser url you should access your media files from when you are looking at the site. it should be (usually) code_removed which means all material can be viewed at similarly, static_root should be something like code_removed and static_url be code_removed serving the files: now that you have told django where these folders should be, and the correct urls to access them, you need to serve all requests to the folders correctly. usually when you are in production, you want the webserver to take care of serving your static files and media files. if you are developing though, you can just get the django development server to serve them for you. to do this, you tell it to route all request that come in to to your media_root and all requests that come in to to your static_root. to do this, you add some urls to urls.py like you have: code_removed extra: if you have multiple apps, each with their own css and js files, you mightn't want to throw them into one single /static/ folder. it might be useful to put them in subfolders of the apps they belong to: code_removed now, your webserver/development server is only looking for static files where you told it to look (i.e. the root static folder) so you need to collect all the files in the subfolders and copy them to the root static folder. you could do this by hand, but django provides a command to do this for you (this is the whole point of the static app) code_removed", "this gets executed after parsing the settings. any idea how to make this load before the settings?", "if you are using a redirect after processing the post to code_removed, you can actually get away with calling the code_removed method from the code_removed method. an example: code_removed this should yield a transparent experience for the end-user, and the client who hired you will likely never know the difference. if you're not redirecting after the post, aren't you worried about duplicate data due to the user refreshing the page?", "i think code_removed is the right answer", "if using a class-based view: code_removed", "yes i agree with you.. and thanks for your responds..", "@davidw.: yes, but widget tweaks has lots of more filters, such as code_removed.", "the problem about this is the amount of sql queries done in the end. for each object in the list, it will make a query. this is why 'field__attribute' would be very handy, because certainly django would span that to one sql query only. odd that there is no support this already.", "@numerah request.get is a python dictionary. you can e.g. iterate through request.get.items().", "if you're listening to the signals emitted by that model then putting all the listeners there too makes the whole exercise pointless, doesn't it? the point of signals is to decouple. shouldn't the listeners live with the code that is interested in these remote events? the question is how to ensure the listeners are loaded before the emitters.", "that's what this does.", "both methods achieve the same purpose, to forego unnecessary db queries. but they use different approaches for efficiency. the only reason to use either of these methods is when a single large query is preferable to many small queries. django uses the large query to create models in memory preemptively rather than performing on demand queries against the database. code_removed performs a join with each lookup, but extends the select to include the columns of all joined tables. however this approach has a caveat. joins have the potential to multiply the number of rows in a query. when you perform a join over a foreign key or one-to-one field, the number of rows won't increase. however, many-to-many joins do not have this guarantee. so, django restricts code_removed to relations that won't unexpectedly result in a massive join. the \"join in python\" for code_removed is a little more alarming then it should be. it creates a separate query for each table to be joined. it filters each of these table with a where in clause, like: code_removed rather than performing a single join with potentially too many rows, each table is split into a separate query.", "put the following at the top of your cron.py file: code_removed", "the one that has proven to work best for me, and which seems most up-to-date is the one over at launchpad. it integrated seamlessly with my application that already utilizes the django.auth module. to get a copy run: code_removed or install it via pypi code_removed", "why would you do this when call_command also provides for capturing stdin, stdout, stderr? and when the documentation specifies the right way to do this?", "even if you extract the logic this function is still useful to test your command specific behavior, like the required arguments, and to make sure it calls your library function witch does the real work.", "i've been loving pycharm so far. 1.0 is a great start, but certainly not a full featured suite yet.", "did you try code_removed?", "i realize this is an old question, but i was having the same problem just now. after adding the proper folder (c: python33 scripts) to the path, i still could not get pip to run. all it took was running pip.exe install -package- instead of pip install -package-. just a thought.", "instead of using code_removed to bind your context to a template and render it (which is what the django docs usually show) use the generic view code_removed. it does the same thing that code_removed does but it also automatically adds requestcontext to the template context, implicitly allowing context processors to be used. you can do this manually using code_removed, but why bother? it's just another step to remember and another loc. besides making use of context processors, having requestcontext in your template allows you to do things like: code_removed which is very useful. in fact, +1 on generic views in general. the django docs mostly show them as shortcuts for not even having a views.py file for simple apps, but you can also use them inside your own view functions: code_removed", "simple, clever, concise way to do it. very nice.", "thank you @dave-halter, you'r right. i updated my comment to correct it.", "imran, i tried your code on my view but got this error: 'wsgirequest' object has no attribute 'name'.", "+1 for a small explanation. while i know i can read the docs, that doesn't necessarily mean i understood the docs.", "this works in debian if when you replace \"yum\" with \"sudo apt-get\". also: code_removed", "it appears that several of the issues cal harped on are now standard features: docs.djangoproject.com/en/dev/topics/db/multi-db", "the site generates a unique token when it makes the form page. this token is required to post/get data back to the server. since the token is generated by your site and provided only when the page with the form is generated, some other site can't mimic your forms -- they won't have the token and therefore can't post to your site.", "virtualenv is a tool to create isolated python environments. you will need to add the following to fix command python setup.py egg_info failed with error code 1, so inside your requirements.txt add this: virtualenv==12.0.7", "st2 is awesome but no match for pycharm. however for various reasons people prefer st2 (light, extensible) so here's a list of useful plugins for st2+django/python to get it going: stackoverflow.com/q/18914386/781695", "this is definitively the correct answer for django 1.9.x. not running code_removed will not let the script access django models, not even import them!", "@akaihola true you will have to deal with your database directly (create a trigger or something similar, depending on which type you use), but in most non trivial projects you are going to have to tweak the db settings yourself anyway. another big advantage here is if you have any other jobs that access your database, it's kept consistent across the board. it also simplifies your life if you ever have to write insert/update statements using djangos raw sql features.", "would using string.printable work?", "working! you can save image by using filesystemstorage. check the example below code_removed", "@uweplonus take another look at the other answers and tell me how different they are from mine that makes them an appropriate answer.", "fyi the new (1.0+) recommended method is onetoonefield(user) docs.djangoproject.com/en/dev/topics/auth/\u2026", "please update this answer. from django1.9 change-log: django\u2019s default logging configuration no longer defines \u2018django.request\u2019 and \u2018django.security\u2019 loggers.", "found the location in django docs that shows file uploads. the example in this answer is excellent, but the info in the django docs will be kept up to date with new releases. docs.djangoproject.com/en/dev/topics/", "you should use code_removed rather than code_removed when checking for identity with the code_removed object", "ctrl+z is undo. if you don't see a command prompt, your server is still running.", "this fails for me. i have a line like the above in my form's init method, and it raises \"attributeerror: this querydict instance is immutable\"", "this taught me how to fish; wish i could upvote more", "python3 using urlsplit: code_removed", "do you know if signals are async?", "the shortcut command for code_removed: code_removed is: code_removed", "in django, you can specify relationships like: code_removed and then internally it has to convert the string \"person\" into the model code_removed. where's the function that does this? i want to use it, but i can't find it.", "@espen i added a proper _clone() method to the class. it should now work with the object_list generic view, if template_name= is specified.", "anonymous_required decorator for class based views code: code_removed usage: code_removed for view functions from code: code_removed usage: code_removed", "i like to use the python debugger pdb to debug django projects. this is a helpful link for learning how to use it:", "performing the join in python means that the join will not happen in the database. with a select_related, your join happens in the database and you only suffer one database query. with prefetch_related, you will be executing two queries and then the results will be 'joined' by the orm so you can still type object.related_set", "use firefox with firebug. open the 'console' tab while firing the ajax request. with code_removed you get the nice django error page as response and you can even see the rendered html of the ajax response in the console tab. then you will know what the error is.", "since version 1.2, django has queryset.exists() method which is the most efficient: code_removed but if you are going to evaluate queryset anyway it's better to use: code_removed for more information read queryset.exists() documentation.", "it's one vm on a 64-bit dell with 32gb ram (afaik).", "these error messages are really good. they already explain how to fix them. and reading up on **[code_removed in the documentation]**(docs.djangoproject.com/en/dev/ref/models/fi\u200c\u200belds/#arguments) will explain why they occur.", "yes. you are right. corrected.", "for me a good fix was to use code_removed option to virtualenv (code_removed for tox.)", "@guettli a problem with the accepted answer is, that the original poster has been seen last time in september 2015 at so and your admirable altruism was the only possibility:-) i had to edit this answer before i could upvote. i added a similar answer for django >= 1.9 that doesn't require annotate, but a global registration of code_removed transform.", "why do you set the default to timezone.now, but the pre_save signal is using datetime.datetime.now?", "@espen i added a proper _clone() method to the class. it should now work with the object_list generic view, if template_name= is specified.", "\"django provides access to certain, frequently-used settings constants to the template such as settings.media_url\". this doesn't appear to work in django 1.3, although i'm probably using it wrong. is there any documentation for this feature?", "in fact you should probably consider having the same (or almost the same) configs for your development and production environment. otherwise, situations like \"hey, it works on my machine\" will happen from time to time. so in order to automate your deployment and eliminate those womm issues, just use docker.", "@ypcrumble using data attributes on the html elements could help solve some of these problems. the attributes can be used to identify the forms being posted. i mean, you can do the same thing with some identifier on the button, but with a data attribute on each form identifying them, you can have your view pass back the erring form, use js to replace the form on page with the erring form response, matching them up using the data attrs. i mean, if you're okay introducing ajax for this.", "@megabytes: sorry, i don't know what that might be.", "the correct way is form.initial[\"email\"] = getemailstring()", "this is useful. thanks!", "if a keyword as \"as\" can be used with a template-tag depends of this particular tag. it is not defined by django itself but by single tags, depending on their meaning. have a look in the mentioned url-tag to see how \"as\" is used: code.djangoproject.com/browser/django/trunk/django/template/\u200c\u200b\u2026", "using an 'apps' folder to organize your applications without editing pythonpath this has come handy when i want to organize my folders like this: code_removed without overwritting pythonpath or having to add apps to every import like: code_removed in your settings.py add code_removed and you are ready to go:-) i saw this at", "that's what this does.", "works like a charm", "a bit late to the party, but what you are seeing is output from the shell. more specifically, it's the output from the datetime object's repr method, that returns printable information of the object.", "hi, i'm trying to parse datetime string from frontend simillar to @user3595632 using code_removed. the result is correct as expected, but i stil got naive object warning.", "@tokenmacguy: ya, my bad... didn't notice the missing /", "i like this solution - think its the cleanest way. not sure what that empty logger adds to the solution..", "om django.conf.urls.defaults import patterns, include, url from django.conf import settings from django.conf.urls.static import s", "i use and enjoy jinja2 as well, but i've found that there are some couplings to the \"contrib\" applications. particularly, the admin tool is pretty heavily tied to django templates. also, i had to recreate the login decorators in contrib.auth to be jinja2 friendly, but not too hard.", "offsets change throughout the year (usually because of daylight saving time), so that's not the same as what we normally think of as a timezone.", "while this doesn't actually answer your question, i'd go about this in a different way. simply clear the code_removed field after successfully saving the local copy. then in your save method you can always update the image whenever code_removed isn't empty. if you'd like to keep a reference to the url, you could use an non-editable boolean field to handle the caching flag rather than code_removed field itself.", "@joshrusso your link above is dead", "you should use sendfile apis given by popular servers like code_removed or code_removed in production. many years i was using sendfile api of these servers for protecting files. then created a simple middleware based django app for this purpose suitable for both development & production purpose.you can access the source code here. update: in new version code_removed provider uses django code_removed if available and also adds support for many server implementations from light caddy to hiawatha usage code_removed add code_removed app to code_removed settings, add code_removed to code_removed settings set code_removed settings to code_removed or code_removed in production, by default it is code_removed for development purpose. in your classbased or function views set response header code_removed value to absolute path to the file. for example, code_removed code_removed impemented in a way that your code will need only minimum modification. nginx configuration to protect file from direct access you can set the configuration as code_removed here code_removed sets a location url code_removed only access internaly, if you are using above configuration you can set x-file as, code_removed by doing this with nginx configuration, the file will be protected & also you can control the file from django code_removed", "just to update - 'has_key' has been replaced with 'in'.", "i ended up doing code_removed, it works when i am inside my project directory, my django_settings_module is correct and i try to run a script that import models, views, etc.", "i think if you want to avoid doing this with new instances, you can throw in code_removed before the property is set in code_removed.", "render form via django template instead of as_(ul|table|p)(). this article shows, how to use template to render cusstomforms instead of code_removed, code_removed... to make it work change code_removed to code_removed code_removed to code_removed", "@stephenpaulger really? my browser (firefox /w firebug) seems content to wait several minutes for a response while i debug.", "here's an article explaining this too: techiediaries.com/\u2026", "ok, thanks for expanding the example, but i seem to have to use form.fields[\"rate\"].queryset to avoid \"'clientform' object has no attribute 'rate'\", am i missing something? (and your example should be form.rate.queryset to be consistent too.)", "pdb is fantastic, and i use it all the time, but there is always the danger of inadvertently committing a set_trace, and of that commit getting onto master, which would be a problem. if you're using pdb, it's a very good idea to add a pre-commit hook blocking commits which contain that import.", "for anyone using django 1.7+, it seems that simply import the settings module is not enough. after some digging, i found this stack overflow answer: you now need to: code_removed without doing the above, i was getting a code_removed error. my script file is in the same directory as my django project (ie. in the same folder as manage.py)", "@gershommaes you are welcome man:d", "no problem. good luck!", "this issue was the result of an incomplete / incorrect installation of the mysql for python adapter. specifically, i had to edit the path to the mysql_config file to point to /usr/local/mysql/bin/mysql_config - discussed in greater detail in this article: dakrauth.com/blog/entry/\u2026", "i made a mistake and committed my django project's code_removed into a public repository. this key should have been kept secret according to the docs the django project is live and has been running for a while with some active users. what are the effects if i change the code_removed? will any existing users, cookies, sessions, etc.. be affected? obviously, the new code_removed will no longer be stored in a public location.", "i found yet another cause of the 500 error when debug=false. i use the django code_removed utility and our front-end engineer added references to font files inside a code_removed block in a django template. like this: code_removed the solution was to move the link to the code_removed file below the code_removed line.", "@simonweber good idea. also, on your dev machine, if you put code_removed in your.bashrc (or similar), you can just type code_removed in the root dir of any django project that uses this pattern. @rsp, this will help you too i guess, just don't type code_removed for those other projects.", "coming in really late on this, but one thing i noticed when using this approach with a fk is that there are a lot of extra db hits and select_related does not seem to fix it. i believe one of the pre-save options is best.", "just to fix the error to set current time code_removed", "there is a cross-import there: signals.py tries to import model from models.py", "even this solution doesn't work with django>=1.8 tested.", "i would solve the problem on your app server and not tax your database. you can do this by: code_removed", "you don't need to write custom filters for this in django rest framework. you just need to use the provided code_removed as documented by rest framework here: django-rest-framework.org/api-guide/filtering#api-guide", "yes, you are right.", "pycharm has now been released in a stable version. the integrated django and python shells work well and autocomplete works like a charm (pycharm after all;). unfortunately, do not expect autocomplete from your templates yet.", "the first link fixed my problem. windows 7 user.", "if you have not a lot commands in your script use it: code_removed django docs", "the other thing that you can do is delete the table created manually. along with that, you will have to delete that particular migration file. also, you will have to delete that particular entry in the django-migrations table(probably the last one in your case) which correlates to that particular migration.", "yep, the only way", "i had the same error and code_removed solved it for me. alternate installs: if you don't have pip, code_removed should work. if your python is managed by a packaging system, you might have to use that system (e.g. code_removed) below, soli notes that if you receive the following error: code_removed ... then you have a further system dependency issue. solving this will vary from system to system, but for debian-derived systems: code_removed", "can i use django orm from this command?", "your setting is all right. some web servers require to specify the media and static folder files specifically. for example in pythonanywhere.com you have to go to the 'web' section and add the url od the media folders and static folder. for example: code_removed i know that it is late, but just to help those who visit this link because of the same problem;)", "i agree 100% on this one. i started out using hard coded urls, and it bit me on a project when i changed the url format around a bit to accommodate some changes. i took the time to go back and dig through everything and replace hard coded urls. my only big complaint is that url tag errors kill the whole page while hard coded only messes up the individual link.", "it seem that this does not work for jinjia2 templates. i wish it did because it is a great solution. {{ myform.email|safe|add_class(\"css_class_1 css_class_2\") }}", "the issue you are encountering is a documented feature of code_removed. when using keyword arguments other than \"defaults\" the return value of code_removed is an instance. that's why it is showing you the parens in the return value. you could use code_removed to get the correct value. here is a link for the documentation:", "@goliney: yes. the slice of the query set adds a code_removed clause to the sql query.", "the one that has proven to work best for me, and which seems most up-to-date is the one over at launchpad. it integrated seamlessly with my application that already utilizes the django.auth module. to get a copy run: code_removed or install it via pypi code_removed", "you might be able to step around the 255 repetition limit if your length is a multiple of items less than 255 - e.g. code_removed for >1025 (i can't test this on a mysql db right now though)", "i would like to suggest an improvement to yanchenko's answer. instead of taking the first ip in the x_forwarded_for list, i take the first one which in not a known internal ip, as some routers don't respect the protocol, and you can see internal ips as the first value of the list. code_removed i hope this helps fellow googlers who have the same problem.", "it's ok, and i did that before, but it's a lot of typing / pasting. the bare \"state\" number - in this case code_removed - is enough. when improving and testing a migration you can have both commands in the history: forward (no argument), backward with previous state number.", "some old mail clients do not support html mail, so they will show the plain text version. see docs.djangoproject.com/en/2.0/topics/email/\u2026", "i have changed the name of an app in django by renaming its folder, imports and all its references (templates/indexes). but now i get this error when i try to run code_removed code_removed how can i debug and solve this error? any clues?", "read unbreaking django if you haven't already. it contains lots of useful information regarding django pitfalls.", "no, not this\u200b.\u200b", "@rick: i completely agree with you about real life syntax. i have heard the (what i consider) lame reasons they have for not using a \"real\" programming language for the template system, but that's what they did. you can choose to use jinja2 (jinja.pocoo.org/2) and it will give you full python capabilities, but since the overwhelming majority of 3rd party apps use the django system it is often hard to intermix them. look at exprtag (djangosnippets.org/snippets/9) for a way to get expressions inside of django templates. it works.", "@rolling stone- thank you, i was adding that after realizing my mistake as you commented. unique=true doesn't work exactly like onetoonefield, i meant to explain that foreignkey only uses a one-to-one relationship if you specify unique=true.", "django will use the version of python specified by the pythonpath environment variable. you can use code_removed in a shell to determine which version will be used. the module versions used by django will be the module versions installed under the version of python specified by pythonpath.", "i prefer the more satisfying: diaf", "can someone please tell me how someone would reverse these policy changes?", "so...when would one even want to use a code_removed with code_removed rather than a code_removed? i see in other questions that django even warns that a code_removed usually best serve's one's interests. the reverse code_removed will never have more than one element, right?", "could you please edit in an explanation of why this code answers the question in a way that's different from some of the very similar earlier answers? code-only answers are discouraged, because they don't teach the solution.", "since django 1.8 released, you can use from_db classmethod to cache old value of remote_image. then in save method you can compare old and new value of field to check if the value has changed. code_removed", "add double-quotes around the file name code_removed in the content-disposition header, to avoid problems with spaces in file names. references: filenames with spaces are truncated upon download, how to encode the filename parameter of content-disposition header in", "would the answer be significantly different for in django versions > 1.5? (e.g. the now-current 1.9)", "even i'm new to this but, c: python34 scripts>pip install django,worked for me. the path should be set as where the script folder of python installation is i.e.c: python34 scripts. i suppose its because django is a framework which is based on python that's why this directory structure has to be maintained while installing.", "++ on pycharm. the only disappointment is lack of auto-complete in templates.", "i have solved my problem by running my nginx as my present working user that is code_removed.by default the user as code_removed in my code_removed file.we can find that line at the top of the code_removed file. code_removed change this to your current working user name like code_removed", "suppose if you have a file named: code_removed then inside code_removed add: code_removed then you can call that module's function from code_removed.", "web framework do matter! look how fast tornado compared to other python webframework: tornadoweb.org/documentation#performance", "i got something like this in my code, so i check the settings.debug flag to know if i wanna import stuff.. that flag is always set to false in django unit tests (see here) so my work around is to override them at each test like so", "simple answer: yes. best is to make a directory called views and then in your urls.py do: code_removed", "@jmyles, if by \"regular django test runner\" you mean code_removed then in fact this answer does work just fine. (just tried it)", "if you have a more complicated setup, or don't want to use code_removed-type statements, you can define a function called code_removed in your tests.py (or tests/__init__.py), which returns an instance of code_removed.", "it's 1.5 years later now, and the project looks like it hasn't had many updates since then. is this still a good recommendation?", "@danielroseman thanks.", "also curious: is your db running on the same machine, or a separate server?", "note that the output of code_removed is not valid sql, because \"django never actually interpolates the parameters: it sends the query and the parameters separately to the database adapter, which performs the appropriate operations.\" source: code.djangoproject.com/ticket/17741", "i've been playing with putting this in my init.py: code_removed i'm still new to python, so i'm still looking at what effect it has on speed/security/ease of use.", "take a look at debug_toolbar, it's very useful for debugging. documentation and source is available at", "if you just do it in the debugger (code_removed) you also have to use the code_removed method, even code_removed is supposed to print.", "@andrefsp: i'm using mysql. i'll edit my question to add that.", "@guilhermedaviddacosta why do you say it isn't best practice? can you give us a hint?", "first of all, don't repeat yourself. then, please be careful not to overengineer, sometimes it is just a waste of time, and makes someone lose focus on what is important. review the zen of python from time to time. take a look at active projects more people = more need to organize properly the django repository they have a straightforward structure. the pip repository they have a straigtforward directory structure. the fabric repository is also a good one to look at. you can place all your models under code_removed e.g code_removed, code_removed and related models can go under code_removed e.g code_removed, code_removed, code_removed... could go under code_removed load what you need in code_removed inside of code_removed more about mvc model is your data this includes your actual data this also includes your session / cookie / cache / fs / index data user interacts with controller to manipulate the model this could be an api, or a view that saves/updates your data this can be tuned with code_removed / code_removed...etc think paging or filtering too. the data updates the view the templates take the data and format it accordingly apis even w/o templates are part of the view; e.g. code_removed or code_removed this should also account for the middleware. take advantage of middleware / templatetags if you need some work to be done for each request, middleware is one way to go. e.g. adding timestamps e.g. updating metrics about page hits e.g. populating a cache if you have snippets of code that always reoccur for formatting objects, templatetags are good. e.g. active tab / url breadcrumbs take advantage of model managers creating code_removed can go in a code_removed. gory details for instances should go on the code_removed. gory details for code_removed could go in a code_removed. you might want to create a code_removed one at a time, so you may think that it should live on the model itself, but when creating the object, you probably don't have all the details: example: code_removed make use of forms where possible a lot of boilerplate code can be eliminated if you have forms that map to a model. the code_removed is pretty good. separating code for forms from model code can be good if you have a lot of customization (or sometimes avoid cyclic import errors for more advanced uses). use management commands when possible e.g. code_removed e.g. code_removed if you have business logic, you can separate it out code_removed uses backends, just like db has a backend...etc. add a code_removed for your business logic (e.g. code_removed) you could use code_removed you could use code_removed you could use code_removed delegate the difficult business logic to the backend make sure to set the expectation right on the input/output. changing business logic is as simple as changing a setting:) backend example: code_removed could become: code_removed more about design patterns there's already a good question about design patterns a very good video about practical design patterns django's backends are obvious use of delegation design pattern. more about interface boundaries is the code you want to use really part of the models? -> code_removed is the code part of business logic? -> code_removed is the code part of generic tools / libs? -> code_removed is the code part of business logic libs? -> code_removed or code_removed here is a good one: can you test your code independently? yes, good:) no, you may have an interface problem when there is clear separation, unittest should be a breeze with the use of mocking is the separation logical? yes, good:) no, you may have trouble testing those logical concepts separately. do you think you will need to refactor when you get 10x more code? yes, no good, no bueno, refactor could be a lot of work no, that's just awesome! in short, you could have code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed code_removed or anything else that helps you; finding the interfaces you need and the boundaries will help you.", "what sort of performance drawbacks are we talking about here? do files get loaded into ram or something of the sort if they are served through django? why isn't django capable of serving with the same efficiency as nginx?", "when doing django ranges with a filter make sure you know the difference between using a date object vs a datetime object. __range is inclusive on dates but if you use a datetime object for the end date it will not include the entries for that day if the time is not set. code_removed returns all entries from startdate to enddate including entries on those dates. bad example since this is returning entries a week into the future, but you get the drift. code_removed will be missing 24 hours worth of entries depending on what the time for the date fields is set to.", "and now for direct answer: one way to check if the value for the field has changed is to fetch original data from database before saving instance. consider this example: code_removed the same thing applies when working with a form. you can detect it at the clean or save method of a modelform: code_removed", "worked for me for python 3.5.2 version", "this blog post provides a nice way to stop the emails: tiwoc.de/blog/2013/03/\u2026", "this was all i needed. although the best practice would be to use environment variable to differentiate between development and production environment and debug toggle.", "or just type some random shit and screw the syntax!;)", "i think this answer is the cleanest solution if you already have the path of python set up in your system variable. (y)", "docs.djangoproject.com/en/dev/topics/db/queries/\u2026", "@monajalal please see harald's comment.", "do i need to setup specific urlconf patters for uploaded media? yes. for development, it's as easy as adding this to your urlconf: code_removed however, for production, you'll want to serve the media using apache, lig nginx, or your preferred web server.", "go to your setting.py you can add this anywhere in your settings.py file but i prefer to place it at the bottom. login_url = '/login/' note: '/login/' is the url segment that brings the user to the login page. the complete url is similar to this \"myexample.com/login/\".", "you should import os and not os.path a per the python documentation.", "god bless you for just putting the output here.", "code_removed didn't work for me in django 1.4.1, but the below code saved me. it's for timezone aware datetime. code_removed", "add this decorator above your login view to redirect to /home if a user is already logged in code_removed and don't forget to import the decorator code_removed", "but is_authenticated (both inside and outside templates) always returns true for a real user (and false for an anonymous user) - regardless of whether the user is actually logged in or not.", "what's date1's datatype? i've got datetime object now.", "see django docs for views.login(), you supply a 'next' value (as a hidden field) on the input form to redirect to after a successful login.", "@thnee could you clarify the 'delete from', specifying the tool used?", "this could also related to code_removed. recreating the venv directory fixed it for me. ``` mv venv venv_old virtualenv venv source./venv/bin/activate pip install -r requirements.txt ```", "i'm using python 3 so i had to run sudo apt-get install --reinstall python3-pkg-resources and that fixed it. thank you!", "i don't think the pownce dead is related to a scalability issue.", "@ignaciop\u00e9rez django provides an or on both queryset and q so depending on the scenario either may be appropriate.", "this seems to be preferred in the documentation too, for instance: docs.djangoproject.com/en/1.8/topics/", "would you mind explaining your first point (maintenance, security, and other concerns for mixing server-side and client-side templates)? a little more explanation would be helpful.", "also, the long method - it was a last resort after trying all items above: code_removed this after cd in directory where the wheel is located", "but youtube is not built with django. python might be fast, but not so for django.", "this has enough upvotes to merit being marked the correct answer", "i left this out of my original question to keep it less wordy, but i already have a settings_local.py file with media_root, template_dirs, secret_key, etc. i'm looking for a way to automate generation of the key to prevent people installing the project from either forgetting to generate keys, or generating bad keys. i think i will go with storing it in the database and having settings_local.py check for its existance.", "the first way worked. i dont really know what was the problem at the moment. thank you", "could you give me an example given the problem above? i'm probably just missing it completely, but i've been reading the django documentation for some time now and am still unclear as to how to create this kind of relationship.", "yep, the only way", "@isaac not anymore it seems:-)", "best solution by far.", "instead of code_removed, use this layout: code_removed code_removed is where most of your configuration lives. code_removed imports everything from common, and overrides whatever it needs to override: code_removed similarly, code_removed imports everything from code_removed and overrides whatever it needs to override. finally, code_removed is where you decide which settings to load, and it's also where you store secrets (therefore this file should not be versioned): code_removed what i like about this solution is: everything is in your versioning system, except secrets most configuration is in one place: code_removed. prod-specific things go in code_removed, dev-specific things go in code_removed. it's simple. you can override stuff from code_removed in code_removed or code_removed, and you can override anything in code_removed. it's straightforward python. no re-import hacks.", "is it possible to use code_removed instead of code_removed?", "this answer should be part of django's manual!", "code_removed a hyphen \"-\" in front of \"check_in\" indicates descending order. ascending order is implied. we don't have to add an all() before filter(). that would still work, but you only need to add all() when you want all objects from the root queryset. more on this here:", "this is not the correct answer. if using a code_removed as a primary key, code_removed is never code_removed.", "@dave_750 code_removed would work just as well", "logs are set in your code_removed file. a new, default project, looks like this: code_removed by default, these don't create log files. if you want those, you need to add a code_removed parameter to your code_removed code_removed this will set up a rotating log that can get 15 mb in size and keep 10 historical versions. in the code_removed section from above, you need to add code_removed to the code_removed for your application code_removed this example will put your logs in your django root in a file named code_removed", "for angular 1.0 you should use the $interpolateprovider apis to configure the interpolation symbols: something like this should do the trick: code_removed keep in mind two things: mixing server-side and client-side templates is rarely a good idea and should be used with caution. the main issues are: maintainability (hard to read) and security (double interpolation could expose a new security vector - e.g. while escaping of serverside and clientside templating by themselves might be secure, their combination might not be). if you start using third-party directives (components) that use code_removed in their templates then your configuration will break them. (fix pending) while there is nothing we can do about the first issue, except for warning people, we do need to address the second issue.", "i developed an extension for this purpose, so you can easily put a decorator on your view function and see how many queries are executed. to install: code_removed to use as context manager: code_removed to use as decorator: code_removed github:", "you can list all the available timezones with code_removed: code_removed there is also code_removed: code_removed", "the django docs are a bit contradictory on this point in my opinion. i've had the same question and read \"note that instantiating a model in no way touches your database; for that, you need to save().\" docs.djangoproject.com/en/1.10/ref/models/instances/\u2026", "so if you want to display - un-authenticated users as \"welcome guest\" and authenticate users as \"welcome.username\" then following block in templates can work: {% if user.is_authenticated %} <p>welcome {{ user.username }}!!!</p> {% else %} <p>welcome guest!!! </p> {% endif %}", "you can use either foreign key on many side of code_removed relation (i.e. code_removed relation) or use code_removed (on any side) with unique constraint.", "i have consistently used vim or kate, but i would prefer a full-blown ide. given it is not as heavy as visual studio.", "@shaiberger, i think they are subtlety different in an important way. the doc stated the subtlety: \"automatically set the field...; it\u2019s not just a default value that you can override.\" -- docs.djangoproject.com/en/dev/ref/models/fields/\u2026", "excellent, thanks for clarifying. for future reference, it might be worth noting when you edit your answer via a comment because edits don't show up in the responses tab of my user page.", "code_removed is raised when django attempts to save the record to the database. the field is not required to be filled in by the user, and that's the problem because at the database level it's not null.", "@v-light each app has its own table and each project has its own database.", "in pycharm, edit the default configuration for the django webserver by inserting 0.0.0.0 for \"host:\"", "so far i am using this solution except i cannot use getattr on the settings object properly.", "how does one, then serve the static files on production? nvm, i just saw that. thanks.", "@josh: don't you mean changes that are specific to the model in question? based on the answer you linked to, signals are best suited when you want to reuse the same code across models. did i miss something?", "please note: that's will not work with manifeststaticfilesstorage as code.djangoproject.com/ticket/19295", "there is a newer fork at github.com/omab/django-social-auth", "with debug turned off django won't handle static files for you any more - your production web server (apache or something) should take care of that.", "one csrf token is assigned to every session ( i.e. every time you log in). so before you wish to get some data entered by user and send that as ajax call to some function which is protected by csrf_protect decorator, try to find the functions that are being called before you are getting this data from user. e.g. some template must be being rendered on which your user is entering data. that template is being rendered by some function. in this function you can get csrf token as follows: csrf = request.cookies['csrftoken'] now pass this csrf value in context dictionary against which template in question is being rendered. now in that template write this line: now in your javascript function, before making ajax request, write this: var csrf = $('#csrf').val() this will pick value of token passed to template and store it in variable csrf. now while making ajax call, in your post data, pass this value as well: \"csrfmiddlewaretoken\": csrf this will work even if you are not implementing django forms. in fact, logic over here is: you need token which you can get from request. so you just need to figure out the function being called immediately after log in. once you have this token, either make another ajax call to get it or pass it to some template which is accessible by your ajax.", "we can use django builtin exception which attached to the models named as code_removed. so, we don't have to import code_removed exception. instead doing: code_removed we can do this: code_removed", "please read the op carefully. the question is about how to redirect logged in users from the login page if they were already authenticated. the built-in code_removed view does not cover this case.", "i met the same situation under windows, and searched for the solution. seeing this post install mysql-python (windows). it points out installing such a pip environment is difficult, needs many other dependencies. but i finally know that if we use code_removed with a version down to code_removed, it don't need that requirements any more, so try: code_removed", "you must have been doing control + z.. instead do control + c that will kill the server session... cheers!!!", "actually, if the user is behind a proxy you would get the user's internal ip address, i.e. a rfc 1918 address. in most cases, that's not very desirable at all. this solution focuses on getting the external ip address of the client (the proxy address), which is the right-most address.", "nasa builds their web infrastructure on django. they had a public cloud for hosting django apps called nebula for a while. @dustinrasener i don't think the answer needs to be inclusive of every name. it gets the point across.", "@kiok46 conflict with github policies. edited to point to the canonical address.", "if you're building a standalone, you need the django.setup() call: docs.djangoproject.com/en/1.8/topics/settings/\u2026 the other workarounds (get_wsgi_application(), etc.) call django.setup() or something similar in the background.", "correct me if i'm wrong, i really would like to have an ability to use onetomany relationships, for example i have model 'tag' and subject of tag can by anything - so instead of using genericforeignkey on side of tag model, i would like to be able to set manytoone field from other models to tag model, so, i suppose, genericforeigkey wouldn't be needed at all in django. is it not possible by db side or what?", "i must use templates for a internal app and it works for me: code_removed", "if your models.py's meta class has 'app_name' listed, make sure to rename that too", "this method is priceless. but aside using the method, what's the way to retrieve the value stored in say, {{ i.item.what_to_put_here}}?", "once you graduate from using code_removed and code_removed, there's nothing to stop you from combining a \"project\" and \"app\" in the same python package. a project is really nothing more than a code_removed module, and an app is really nothing more than a code_removed module\u2014everything else is optional. for small sites, it's entirely reasonable to have something like: code_removed"]